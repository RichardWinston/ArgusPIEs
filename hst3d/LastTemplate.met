# 
# Export template for HST3D  v. 2
# by Richard B. Winston
# Copyright, 1998, Richard B. WInston
# 
Define Variable: Title1 [String]
Define Variable: Title2 [String]
# 
Set Variable: Title1:= "henry me"
Set Variable: Title2:= "Title Line 2"
# 
Define Variable: RESTRT [Boolean]
Define Variable: TIMRST [Real]
# 
Set Variable: RESTRT:= 0
Set Variable: TIMRST:= 0.
# 
Define Variable: HEAT [Boolean]
Define Variable: SOLUTE [Boolean]
Define Variable: EEUNIT [Boolean]
Define Variable: CYLIND [Boolean]
Define Variable: SCALMF [Boolean]
# 
Set Variable: HEAT:= 0
Set Variable: SOLUTE:= 1
Set Variable: EEUNIT:= 0
Set Variable: CYLIND:= 0
Set Variable: SCALMF:= 1
# 
Define Variable: TMUNIT [Integer]
# 
Set Variable: TMUNIT:= 0+1
# 
Define Variable: SLMETH [Integer]
# 
Set Variable: SLMETH:= 0 + 1
# 
Define Variable: TILT [Boolean]
# 
Set Variable: TILT:= 0
# 
Define Variable: THETXZ [Real]
Define Variable: THETYZ [Real]
Define Variable: THETZZ [Real]
# 
Set Variable: THETXZ:= 90.
Set Variable: THETYZ:= 90.
Set Variable: THETZZ:= 0.
# 
Define Variable: BP [Real]
# 
Set Variable: BP:= 0.0
# 
Define Variable: P0 [Real]
Define Variable: T0 [Real]
Define Variable: W0 [Real]
Define Variable: DENF0 [Real]
# 
Set Variable: P0:= 0.
Set Variable: T0:= 20.
Set Variable: W0:= 0.
Set Variable: DENF0:= 1000.
# 
Define Variable: W1 [Real]
Define Variable: DENF1 [Real]
# 
Set Variable: W1:= 0.0357
Set Variable: DENF1:= 1025.
# 
Define Variable: VISFAC [Real]
Define Variable: VisMult [Real]
Define Variable: Visc [Real]
Define Variable: ViscChoice [Boolean]
# 
Set Variable: VisMult:= 1.
Set Variable: Visc:= 0.00100
Set Variable: ViscChoice:= 1
# 
Define Variable: PAATM [Real]
# 
Set Variable: PAATM:= 0.
# 
Define Variable: P0H [Real]
Define Variable: T0H [Real]
# 
Set Variable: P0H:= 0.
Set Variable: T0H:= 20.
# 
Define Variable: CPF [Real]
Define Variable: KHTF [Real]
Define Variable: BT [Real]
# 
Set Variable: CPF:= 4182.
Set Variable: KHTF:= 0.
Set Variable: BT:= 2.e-4
# 
Define Variable: DM [Real]
Define Variable: DECLAM [Real]
# 
Set Variable: DM:= 18.8571e-6
Set Variable: DECLAM:= 0.
# 
Define Variable: WellRiser [Boolean]
Define Variable: MXITQW [Integer]
Define Variable: TOLDPW [Real]
Define Variable: TOLFPW [Real]
Define Variable: TOLQW [Real]
Define Variable: DAMWRC [Real]
Define Variable: DZMIN [Real]
Define Variable: EPSWR [Real]
# 
Set Variable: WellRiser:= 0
Set Variable: MXITQW:= 20
Set Variable: TOLDPW:= 0.006
Set Variable: TOLFPW:= 0.001
Set Variable: TOLQW:= 0.001
Set Variable: DAMWRC:= 2.
Set Variable: DZMIN:= 0.
Set Variable: EPSWR:= 0.001
# 
Define Variable: IAIF [Integer]
# 
Set Variable: IAIF:= 0 + 1
# 
Define Variable: ABOAR [Real]
Define Variable: POROAR [Real]
Define Variable: VOAR [Real]
Define Variable: KOAR [Real]
Define Variable: VISOAR [Real]
Define Variable: BOAR [Real]
Define Variable: RIOAR [Real]
Define Variable: ANGOAR [Real]
# 
Set Variable: ABOAR:= 1e-8
Set Variable: POROAR:= 0.2
Set Variable: VOAR:= 0.
Set Variable: KOAR:= 1e-10
Set Variable: VISOAR:= 0.001002
Set Variable: BOAR:= 0.
Set Variable: RIOAR:= 0.
Set Variable: ANGOAR:= 360.
# 
Define Variable: HST3D_NUnits [Real]
Define Variable: NX [Integer]
Define Variable: NY [Integer]
Define Variable: NZ [Integer]
# 
Set Variable: HST3D_NUnits:= 10
Set Variable: NZ:= HST3D_NUnits + 1
# 
Define Variable: NHCN [Integer]
# 
Set Variable: NHCN:= 3
# 
Define Variable: InterpSpecPres [Boolean]
Define Variable: InterpTempAtSpecPres [Boolean]
Define Variable: InterpMassFracAtSpecPres [Boolean]
Define Variable: InterpScMassFracAtSpecPres [Boolean]
Define Variable: InterpSpecifiedTemp [Boolean]
Define Variable: InterpSpecifiedMassFrac [Boolean]
Set Variable: InterpSpecPres:= 0
Set Variable: InterpTempAtSpecPres:= 0
Set Variable: InterpMassFracAtSpecPres:= 0
Set Variable: InterpScMassFracAtSpecPres:= 0
Set Variable: InterpSpecifiedTemp:= 0
Set Variable: InterpSpecifiedMassFrac:= 0
# 
Define Variable: NSBC [Integer]
Define Variable: NFBC [Integer]
Define Variable: NLBC [Integer]
Define Variable: NETBC [Integer]
Define Variable: NAIFC [Integer]
Define Variable: NHCBC [Integer]
Define Variable: NWEL [Integer]
# 
Define Variable: FRESUR [Boolean]
Define Variable: ICHYDP [Boolean]
Define Variable: ICHWT [Boolean]
Define Variable: ZPINIT [Real]
Define Variable: PINIT [Real]
# 
Set Variable: FRESUR:= 0
Set Variable: ICHYDP:= 1
Set Variable: ICHWT:= 0
Set Variable: ZPINIT:= 0.
Set Variable: PINIT:= 10052.2
# 
Define Variable: FDSMTH [Real]
Define Variable: FDTMTH [Real]
Define Variable: TOLDEN [Real]
Define Variable: MAXITN [Integer]
Define Variable: NTSOPT [Integer]
Define Variable: EPSSLV [Real]
Define Variable: EPSOMG [Real]
Define Variable: MAXIT1 [Integer]
Define Variable: MAXIT2 [Integer]
Define Variable: IDIR [Integer]
Define Variable: IORDER [Integer]
Define Variable: NSDR [Integer]
# 
Set Variable: FDSMTH:= 0.
Set Variable: FDTMTH:= 1.
Set Variable: TOLDEN:= 0.001
Set Variable: MAXITN:= 5
Set Variable: NTSOPT:= 5
Set Variable: EPSSLV:= 1e-7
Set Variable: EPSOMG:= 0.2
Set Variable: MAXIT1:= 50
Set Variable: MAXIT2:= 100
Set Variable: IDIR:= 0+1
Set Variable: IORDER:= 1 + 1
Set Variable: NSDR:= 5
# 
Define Variable: PRTPMP [Boolean]
Define Variable: PRTFP [Boolean]
Define Variable: PRTIC [Boolean]
Define Variable: PRTBC [Boolean]
Define Variable: PRTSLM [Boolean]
Define Variable: PRTWEL [Boolean]
Define Variable: IPRPTC [Integer]
Define Variable: PRTDV [Boolean]
Define Variable: ORENPR [Integer]
Define Variable: PLTZON [Boolean]
Define Variable: PLTTEM [Boolean]
# 
Set Variable: PRTPMP:= 0
Set Variable: PRTFP:= 0
Set Variable: PRTIC:= 0
Set Variable: PRTBC:= 0
Set Variable: PRTSLM:= 0
Set Variable: PRTWEL:= 0
Set Variable: IPRPTC:= (0)*100 + (0)*10 +(0)
Set Variable: PRTDV:= 0
Set Variable: ORENPR:= 1 + 12
Set Variable: PLTZON:= 0
Set Variable: PLTTEM:= 0
# 
Define Variable: HST3D_NPer [Real]
# 
Set Variable: HST3D_NPer:= 1
# 
Define Variable: NZTPHC [Integer]
# 
Set Variable: NZTPHC:= 3
# 
Define Variable: UseSpecPres [Boolean]
Define Variable: UseSpecTemp [Boolean]
Define Variable: UseSpecMassFrac [Boolean]
Define Variable: UseSpecFlux [Boolean]
Define Variable: UseSpecHeatFlux [Boolean]
Define Variable: UseSpecSoluteFlux [Boolean]
Define Variable: UseLeakageBoundary [Boolean]
Define Variable: UseRiverLeakage [Boolean]
Define Variable: UseEvapotranspiration [Boolean]
Define Variable: UseAquiferInfluence [Boolean]
Define Variable: UseHeatCond [Boolean]
Define Variable: UseWells [Boolean]
# 
Set Variable: UseSpecPres:= 1
Set Variable: UseSpecTemp:= 0
Set Variable: UseSpecMassFrac:= 1
Set Variable: UseSpecFlux:= 1
Set Variable: UseSpecHeatFlux:= 0
Set Variable: UseSpecSoluteFlux:= 0
Set Variable: UseLeakageBoundary:= 0
Set Variable: UseRiverLeakage:= 0
Set Variable: UseEvapotranspiration:= 0
Set Variable: UseAquiferInfluence:= 0
Set Variable: UseHeatCond:= 0
Set Variable: UseWells:= 0
# 
Define Variable: UseAquifInflWeighting [Boolean]
Set Variable: UseAquifInflWeighting:= 0
# 
Define Variable: RunPath [String]
Define Variable: OutputExtension [String]
Define Variable: RunHST3D [Boolean]
Define Variable: InputFileName [String]
Set Variable: RunPath:= "\"C:\WRDAPP\hst3d-2.2\hst\hst3d.exe\""
Set Variable: OutputExtension:= "Out"
Set Variable: RunHST3D:= 1
Set Variable: InputFileName:= "Seng"
# 
Define Variable: PauseDos [Boolean]
Set Variable: PauseDOS:= "1"
# 
Define Variable: ZWB [Real]
Define Variable: ZWT [Real]
Define Variable: WBOD [Real]
Define Variable: WQMETH [Integer]
Define Variable: WRISL [Real]
Define Variable: WRID [Real]
Define Variable: WRRUF [Real]
Define Variable: WRANGL [Real]
Define Variable: HTCWR [Real]
Define Variable: DTHAWR [Real]
Define Variable: KTHAWR [Real]
Define Variable: KTHWR [Real]
Define Variable: TABWR [Real]
Define Variable: TATWR [Real]
Set Variable: ZWB:= 0.
Set Variable: ZWT:= 0.
Set Variable: WBOD:= 0.
Set Variable: WQMETH:= 0
Set Variable: WRISL:= 0.
Set Variable: WRID:= 0.
Set Variable: WRRUF:= 0.
Set Variable: WRANGL:= 0.
Set Variable: HTCWR:= 0.
Set Variable: DTHAWR:= 0.
Set Variable: KTHAWR:= 0.
Set Variable: KTHWR:= 0.
Set Variable: TABWR:= 20.
Set Variable: TATWR:= 20.
# 
Define Variable: ElementLayerIndex [Integer]
# NUnits = Number of Geologic Units
Define Variable: NUnits [Integer]
Set Variable: NUnits:= 1
Define Variable: ZoneIndex [Integer]
Define Variable: WellIndex [Integer]
# 
Define Variable: RowAboveBoundary [Real]
Define Variable: ColumnAboveBoundary [Real]
Define Variable: RowBelowBoundary [Real]
Define Variable: ColumnBelowBoundary [Real]
Define Variable: CellTop [Real]
Define Variable: CellBottom [Real]
# 
Define Variable: BoundaryIndex [Integer]
# 
Define Variable: ListIndex [Integer]
Define Variable: CellIndex [Integer]
Define Variable: CellIndex2 [Integer]
Define Variable: CellIndex3 [Integer]
Define Variable: AColumn [Integer]
Define Variable: ARow [Integer]
Define Variable: IBC [String]
# 
Define Variable: RowIndex [Integer]
Define Variable: ColumnIndex [Integer]
Define Variable: RowCount [Integer]
Define Variable: ColumnCount [Integer]
Define Variable: NodeX [Real]
Define Variable: NodeY [Real]
# 
Define Variable: ListCount [Integer]
Define Variable: CellCount [Integer]
# 
Define Variable: TimeList [Integer]
Define Variable: TimeIndex [Integer]
Define Variable: InnerTimeIndex [Integer]
# 
Define Variable: WellList [Integer]
Define Variable: SpecifiedStateList [Integer]
Define Variable: SpecifiedFluxList [Integer]
Define Variable: LeakageList [Integer]
Define Variable: RiverList [Integer]
Define Variable: EvapotranspirationList [Integer]
Define Variable: AqInflList [Integer]
Define Variable: SolverList [Integer]
Define Variable: CellList [Integer]
Define Variable: ColumnList [Integer]
Define Variable: RowList [Integer]
# 
Define Variable: VarXList [Integer]
Define Variable: VarYList [Integer]
Define Variable: VarZList [Integer]
Define Variable: VarPresentList [Integer]
# 
Define Variable: ObjectTimeList [Integer]
Define Variable: ATime [Real]
# 
Define Variable: CurrentTime [Real]
Define Variable: InnerCurrentTime [Real]
Define Variable: AString [String]
# 
Define Variable: IWEL [Integer]
Define Variable: QWV [Real]
Define Variable: PWSUR [Real]
Define Variable: PWKT [Real]
Define Variable: TWSRKT [Real]
Define Variable: CWKT [Real]
# 
Define Variable: RDSPBC [Boolean]
Define Variable: RDSTBC [Boolean]
Define Variable: RDSCBC [Boolean]
Define Variable: CurrentTimeIndex [Integer]
# 
Define Variable: PNP [Real]
Define Variable: PNP_End [Real]
Define Variable: TSBC [Real]
Define Variable: TSBC_End [Real]
Define Variable: CSBC [Real]
Define Variable: CSBC_End [Real]
Define Variable: TNP [Real]
Define Variable: TNP_End [Real]
Define Variable: CNP [Real]
Define Variable: CNP_End [Real]
# 
Define Variable: RDFLXQ [Boolean]
Define Variable: RDFLXH [Boolean]
Define Variable: RDFLXS [Boolean]
# 
Define Variable: QFFX [Real]
Define Variable: QFFY [Real]
Define Variable: QFFZ [Real]
Define Variable: UDENBC [Real]
Define Variable: TFLX [Real]
Define Variable: CFLX [Real]
Define Variable: QHFX [Real]
Define Variable: QHFY [Real]
Define Variable: QHFZ [Real]
Define Variable: QSFX [Real]
Define Variable: QSFY [Real]
Define Variable: QSFZ [Real]
# 
Define Variable: XIndex [Integer]
Define Variable: YIndex [Integer]
Define Variable: Zindex [Integer]
# 
Define Variable: CurrentVariable [Real]
# 
Define Variable: RDLBC [Boolean]
Define Variable: PHILBC [Real]
Define Variable: DENLBC [Real]
Define Variable: VISLBC [Real]
Define Variable: TLBC [Real]
Define Variable: CLBC [Real]
# 
Define Variable: HRBC [Real]
Define Variable: DENRBC [Real]
Define Variable: VISRBC [Real]
Define Variable: TRBC [Real]
Define Variable: CRBC [Real]
# 
Define Variable: RDETBC [Boolean]
Define Variable: QETBC [Real]
# 
Define Variable: RDAIF [Boolean]
Define Variable: DENOAR [Real]
Define Variable: TAIF [Real]
Define Variable: CIAF [Real]
# 
Define Variable: P [Real]
Define Variable: P_End [Real]
Define Variable: InterpInitPres [Boolean]
Set Variable: InterpInitPres:= 0
# 
Define Variable: HWT [Real]
Define Variable: HWT_End [Real]
Define Variable: InterpInitWaterTable [Boolean]
Set Variable: InterpInitWaterTable:= 0
# 
Define Variable: QFFX_End [Real]
Define Variable: QFFY_End [Real]
Define Variable: QFFZ_End [Real]
Define Variable: InterpFluidFlux [Boolean]
Set Variable: InterpFluidFlux:= 0
# 
Define Variable: UDENBC_End [Real]
Define Variable: InterpFluxDensity [Boolean]
Set Variable: InterpFluxDensity:= 0
# 
Define Variable: TFLX_End [Real]
Define Variable: InterpFluxTemperature [Boolean]
Set Variable: InterpFluxTemperature:= 0
# 
Define Variable: CFLX_End [Real]
Define Variable: InterpFluxMassFrac [Boolean]
Set Variable: InterpFluxMassFrac:= 0
Define Variable: InterpFluxScMassFrac [Boolean]
Set Variable: InterpFluxScMassFrac:= 0
# 
Define Variable: ObjectPresent [Boolean]
# 
Define Variable: WellTop [Real]
Define Variable: WellBottom [Real]
# 
Define Variable: RDCALC [Boolean]
# 
Define Variable: AUTOTS [Boolean]
# 
Define Variable: PointAngle [Real]
Define Variable: PointDistance [Real]
Define Variable: GAngle [Real]
# 
Define Variable: SpecifiedStateTest [Boolean]
Define Variable: SpecifiedFluxTest [Boolean]
Define Variable: MassFractionTest [Boolean]
# 
Define Variable: RiverElevation [Real]
# 
Define Variable: CurrentContourType [Integer]
# 
Define Variable: BoundaryTypeArray [Integer]
# 
Define Variable: DUMMY [Real]
Define Variable: ok [Boolean]
Set Variable: ok:= 1
# 
Define Variable: MaxStressPeriods [Integer]
Define Variable: ProgressMax [Integer]
Define Variable: PIEVersionOK [Boolean]
Define Variable: ContinueSimulation [Boolean]
Define Variable: WellRiserCalculated [Boolean]
# 
Set Variable: ContinueSimulation:= 1
Set Variable: PIEVersionOK:= L_CheckVersion(1, 9, 0, 0)
If: IsNAN(PIEVersionOK)
	Alert: "Error: List PIE is not installed!"
	Set Variable: ContinueSimulation:= 0
Else
	If: !PIEVersionOK
		Alert: "Error: List PIE is not up to date! Check that the correct version is installed and that there are not multiple copies of it."
		Set Variable: ContinueSimulation:= 0
	End if
End if
Set Variable: PIEVersionOK:= BL_CheckVersion(1, 8, 0, 0)
If: IsNAN(PIEVersionOK)
	Alert: "Error: BlockList PIE is not installed!"
	Set Variable: ContinueSimulation:= 0
Else
	If: !PIEVersionOK
		Alert: "Error: BlockList PIE is not up to date! Check that the correct version is installed and that there are not multiple copies of it."
		Set Variable: ContinueSimulation:= 0
	End if
End if
If: ContinueSimulation
	Set Variable: ProgressMax:= 15
	If: UseSpecPres|UseSpecTemp|UseSpecMassFrac
		Set Variable: ProgressMax:= ProgressMax + NZ * 3
	End if
	If: UseSpecFlux|UseSpecHeatFlux|UseSpecSoluteFlux
		Set Variable: ProgressMax:= ProgressMax + NZ * 4
	End if
	If: UseLeakageBoundary
		Set Variable: ProgressMax:= ProgressMax + NZ * 4
	End if
	If: UseRiverLeakage
		Set Variable: ProgressMax:= ProgressMax + 3
	End if
	If: UseEvapotranspiration
		Set Variable: ProgressMax:= ProgressMax + NZ * 4
	End if
	If: UseAquiferInfluence
		Set Variable: ProgressMax:= ProgressMax + NZ * 4
	End if
	If: UseHeatCond
		Set Variable: ProgressMax:= ProgressMax + NZ * 2
	End if
	If: UseWells
		Set Variable: ProgressMax:= ProgressMax + 3
	End if
	Set Variable: ProgressMax:= ProgressMax + HST3D_NUnits * 4
	If: HEAT
		Set Variable: ProgressMax:= ProgressMax + HST3D_NUnits * 2 + NZ
	End if
	If: HEAT|SOLUTE
		Set Variable: ProgressMax:= ProgressMax + HST3D_NUnits
	End if
	If: SOLUTE
		Set Variable: ProgressMax:= ProgressMax + HST3D_NUnits + NZ
	End if
	If: !ICHYDP&!ICHWT
		Set Variable: ProgressMax:= ProgressMax + NZ
	End if
	If: FRESUR&ICHWT
		Set Variable: ProgressMax:= ProgressMax + 1
	End if
	# 
	Define Variable: Message [String]
	Set Variable: Message:= "Phase 2: Exporting Data Set "
	# 
	Evaluate expression: ProgressBarInitialize(ProgressMax)
	Evaluate expression: ProgressBarSetMessage(Message + "1.1")
	# 
	If: TMUNIT=5
		Set Variable: TMUNIT:= 6
	End if
	If: SLMETH=4
		Set Variable: SLMETH:= 5
	End if
	If: ViscChoice
		Set Variable: VISFAC:= -Visc
	Else
		Set Variable: VISFAC:= VisMult
	End if
	If: !UseHeatCond
		Set Variable: NHCN:= 0
		Set Variable: NZTPHC:= 0
	End if
	Evaluate expression: L_Initialize()
	Set Variable: ColumnList:= L_CreateNewList()
	Set Variable: RowList:= L_CreateNewList()
	Loop for: Variable ColumnIndex from: 0 to: NumColumns() step: 1
		Evaluate expression: L_AddToList(ColumnList, NthColumnPos(ColumnIndex))
	End loop
	Loop for: Variable RowIndex from: 0 to: NumRows() step: 1
		Evaluate expression: L_AddToList(RowList, NthRowPos(RowIndex))
	End loop
	Set Variable: NX:= NumColumns()+1
	Set Variable: NY:= NumRows()+1
	# 
	Set Variable: 
	If: UseSpecFlux|UseSpecHeatFlux|UseSpecSoluteFlux
		Set Variable: VarXList:= L_CreateNew3DList(NX, NY, 1)
		Set Variable: VarYList:= L_CreateNew3DList(NX, NY, 1)
		Set Variable: VarZList:= L_CreateNew3DList(NX, NY, 1)
		Set Variable: VarPresentList:= L_CreateNew3DList(NX, NY, 1)
	End if
	# 
	# To Do: Error Checking
	Redirect output to: Seng
		# 1.1
		Evaluate expression: ProgressBarAdvance()
		Start a new line
			Export expression: "C.....HST Data-Input Form" [G0]
		End line
		Start a new line
			Export expression: "C.....Version 2.0" [G0]
		End line
		Start a new line
			Export expression: "C...   Notes:" [G0]
		End line
		Start a new line
			Export expression: "C...   Input lines are denoted by C.N1.N2.N3 where" [G0]
		End line
		Start a new line
			Export expression: "C...        N1 is the read group number, N2.N3 is the record number" [G0]
		End line
		Start a new line
			Export expression: "C...        A letter indicates an exclusive record choice must be made." [G0]
		End line
		Start a new line
			Export expression: "C...          i.e. A or B or C" [G0]
		End line
		Start a new line
			Export expression: "C...   (O) - Optional data with conditions for requirement" [G0]
		End line
		Start a new line
			Export expression: "C...   (O) - Optional data with conditions for requirement" [G0]
		End line
		Start a new line
			Export expression: "C.....Input by x,y,z range format is;" [G0]
		End line
		Start a new line
			Export expression: "C.0.1.. X1,X2,Y1,Y2,Z1,Z2" [G0]
		End line
		Start a new line
			Export expression: "C.0.2.. VAR1,IMOD1,[VAR2,IMOD2,VAR3,IMOD3]" [G0]
		End line
		Start a new line
			Export expression: "C...     Use as many of line 0.1 & 0.2 sets as necessary" [G0]
		End line
		Start a new line
			Export expression: "C...     End with line 0.3" [G0]
		End line
		Start a new line
			Export expression: "C.0.3.. END OR end" [G0]
		End line
		Start a new line
			Export expression: "C...   {nnn} - Indicates that the default number, nnn, is used if a zero" [G0]
		End line
		Start a new line
			Export expression: "C...           is entered for that variable" [G0]
		End line
		Start a new line
			Export expression: "C...   [T/F] - Indicates a logical variable" [G0]
		End line
		Start a new line
			Export expression: "C...   [I] - Indicates an integer variable" [G0]
		End line
		Start a new line
			Export expression: "C------------------------------------------------------------------------------" [G0]
		End line
		Start a new line
			Export expression: "C------------------------------------------------------------------------------" [G0]
		End line
		Start a new line
			Export expression: "C.....Start of the data file" [G0]
		End line
		Start a new line
			Export expression: "C.....Specification and dimensioning data - READ1" [G0]
		End line
		Start a new line
			Export expression: "C.1.1 .. TITLE Line 1" [G0]
		End line
		Start a new line
			Export expression: " " [G0]
			Export expression: Title1 [G0]
		End line
		# 1.2
		Evaluate expression: ProgressBarAdvance()
		Evaluate expression: ProgressBarSetMessage(Message + "1.2")
		Start a new line
			Export expression: "C.1.2 .. TITLE Line 2" [G0]
		End line
		Start a new line
			Export expression: " " [G0]
			Export expression: Title2 [G0]
		End line
		# 1.3
		Evaluate expression: ProgressBarAdvance()
		Evaluate expression: ProgressBarSetMessage(Message + "1.3")
		Start a new line
			Export expression: "C.1.3 .. RESTRT[T/F],TIMRST" [G0]
		End line
		Start a new line
			Export expression: "C.....If RESTART, skip to READ3 group" [G0]
		End line
		Start a new line
			If: RESTRT
				Export expression: "T"; [G0]
			Else
				Export expression: "F"; [G0]
			End if
			Export expression: TIMRST [G0]
		End line
		If: !RESTRT
			# 1.4
			Evaluate expression: ProgressBarAdvance()
			Evaluate expression: ProgressBarSetMessage(Message + "1.4")
			Start a new line
				Export expression: "C.1.4 .. HEAT[T/F],SOLUTE[T/F],EEUNIT[T/F],CYLIND[T/F],SCALMF[T/F]" [G0]
			End line
			Start a new line
				If: HEAT
					Export expression: "T"; [G0]
				Else
					Export expression: "F"; [G0]
				End if
				If: SOLUTE
					Export expression: "T"; [G0]
				Else
					Export expression: "F"; [G0]
				End if
				If: EEUNIT
					Export expression: "T"; [G0]
				Else
					Export expression: "F"; [G0]
				End if
				If: CYLIND
					Export expression: "T"; [G0]
				Else
					Export expression: "F"; [G0]
				End if
				If: SCALMF
					Export expression: "T"; [G0]
				Else
					Export expression: "F"; [G0]
				End if
			End line
			# 1.5
			Evaluate expression: ProgressBarAdvance()
			Evaluate expression: ProgressBarSetMessage(Message + "1.5")
			Start a new line
				Export expression: "C.1.5 .. TMUNIT[I]" [G0]
			End line
			Start a new line
				Export expression: TMUNIT; [G0]
			End line
			# 
			# Export 1.6
			Evaluate expression: ProgressBarAdvance()
			Evaluate expression: ProgressBarSetMessage(Message + "1.6")
			Start a new line
				Export expression: "C.1.6 .. NX,NY,NZ,NHCN" [G0]
			End line
			Start a new line
				Export expression: NX; [G0]
				Export expression: NY; [G0]
				Export expression: NZ; [G0]
				Export expression: NHCN; [G0]
			End line
		End if
		Set Variable: BoundaryTypeArray:= L_CreateNew3DList(NX, NY, NZ)
		# 
		Evaluate expression: ProgressBarSetMessage(Message + "1.7")
		# Count items for data set 1.7
		Set Variable: CellList:= L_CreateNewList()
		Set Variable: CellCount:= 0
		Set Variable: CellIndex2:= 0
		Evaluate expression: BL_InitializeGridInformation("HST3D Grid",1)
		If: !UseSpecPres&!UseSpecTemp&!UseSpecMassFrac
			Set Variable: NSBC:= 0
		Else
			# Loop over Geological Units
			Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
				Evaluate expression: ProgressBarAdvance()
				Evaluate expression: L_SetListSize(CellList, NX * NY * NZ)
				# Clear Line information
				Evaluate expression: BL_FreeVertexList()
				# Read Line information for current Unit
				If: !BL_AddVertexLayer("Specified State NL" + ElementLayerIndex)
					Alert: "Out of Memory. Abort this process, free up memory and try again."
				End if
				Set Variable: ListIndex:= -1
				If: NSBC = 0
					Loop for: Objects in layer: Specified State NL[ElementLayerIndex]
						Set Variable: ListIndex:= ListIndex + 1
						Set Variable: SpecifiedStateTest:= 0
						If: UseSpecPres
							If: !IsNA(Specified Pressure1)
								Set Variable: SpecifiedStateTest:= 1
							End if
						End if
						If: UseSpecTemp
							If: !IsNA(Specified Temperature1)
								Set Variable: SpecifiedStateTest:= 1
							End if
						End if
						If: UseSpecMassFrac
							If: SCALMF
								If: !IsNA(Specified Scaled Mass Fraction1)
									Set Variable: SpecifiedStateTest:= 1
								End if
							Else
								If: !IsNA(Specified Mass Fraction1)
									Set Variable: SpecifiedStateTest:= 1
								End if
							End if
						End if
						If: SpecifiedStateTest
							If: BL_GetCountOfACellList(ListIndex) > 0
								Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACellList(ListIndex)-1 step: 1
									# Set Variable: Dummy:= BL_GetCountOfACellList(ListIndex)-1
									Set Variable: CellIndex2:= CellIndex2 + 1
									Set Variable: AColumn:= BL_GetCellColumn(ListIndex, CellIndex)
									Set Variable: ARow:= BL_GetCellRow(ListIndex, CellIndex)
									Evaluate expression: L_SetListItem(CellList, (ElementLayerIndex - 1) * NX * NY + (ARow - 1) * NX + AColumn - 1, CellIndex2)
								End loop
								# end Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACellList(ListIndex)-1 step: 1
							End if
						End if
					End loop
					Evaluate expression: L_AddToList(CellList, 0)
					Evaluate expression: L_SortList(CellList)
					Evaluate expression: L_EliminateDuplicates(CellList)
					Set Variable: CellCount:= CellCount + L_GetListSize(CellList) - 1
					Evaluate expression: L_FreeAList(CellList)
					# end Loop for: Objects in layer: Specified State NL[ElementLayerIndex]
				End if
			End loop
			# End Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
			If: CellCount<0
				Set Variable: CellCount:= 0
			End if
			Set Variable: NSBC:= CellCount
		End if
		If: !UseSpecFlux&!UseSpecHeatFlux&!UseSpecSoluteFlux
			Set Variable: NFBC:= 0
		Else
			Set Variable: CellCount:= 0
			Set Variable: CellIndex2:= 0
			Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
				Evaluate expression: ProgressBarAdvance()
				Evaluate expression: L_SetListSize(CellList, NX * NY * NZ)
				Evaluate expression: BL_FreeVertexList()
				# Read Line information for current Unit
				If: !BL_AddVertexLayer("Vertical Specified Flux Boundary NL" + ElementLayerIndex)
					Alert: "Out of Memory. Abort this process, free up memory and try again."
				End if
				Set Variable: ListIndex:= -1
				If: NFBC = 0
					Loop for: Objects in layer: Vertical Specified Flux Boundary NL[ElementLayerIndex]
						Set Variable: ListIndex:= ListIndex + 1
						Set Variable: SpecifiedFluxTest:= 0
						If: UseSpecFlux
							If: !IsNA(Fluid Flux1)
								Set Variable: SpecifiedFluxTest:= 1
							End if
						End if
						If: UseSpecHeatFlux
							If: !IsNA(Heat Flux1)
								Set Variable: SpecifiedFluxTest:= 1
							End if
						End if
						If: UseSpecSoluteFlux
							If: !IsNA(Solute Flux1)
								Set Variable: SpecifiedFluxTest:= 1
							End if
						End if
						If: SpecifiedFluxTest
							If: BL_GetCountOfACrossRowList(ListIndex)>0
								Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossRowList(ListIndex)-1 step: 1
									Set Variable: CellIndex2:= CellIndex2 + 1
									Set Variable: AColumn:= BL_GetCrossRowColumn(ListIndex, CellIndex)
									Set Variable: ARow:= BL_GetCrossRowRow(ListIndex, CellIndex)
									Evaluate expression: L_SetListItem(CellList, (ElementLayerIndex - 1) * NX * NY + (ARow - 1) * NX + AColumn - 1, CellIndex2)
								End loop
								# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossRowList(ListIndex)-1 step: 1
							End if
							# If: BL_GetCountOfACrossRowList(ListIndex)>0
						End if
					End loop
					# Loop for: Objects in layer: Vertical Specified Flux Boundary NL[ElementLayerIndex]
					Set Variable: ListIndex:= -1
					Loop for: Objects in layer: Vertical Specified Flux Boundary NL[ElementLayerIndex]
						Set Variable: ListIndex:= ListIndex + 1
						Set Variable: SpecifiedFluxTest:= 0
						If: UseSpecFlux
							If: !IsNA(Fluid Flux1)
								Set Variable: SpecifiedFluxTest:= 1
							End if
						End if
						If: UseSpecHeatFlux
							If: !IsNA(Heat Flux1)
								Set Variable: SpecifiedFluxTest:= 1
							End if
						End if
						If: UseSpecSoluteFlux
							If: !IsNA(Solute Flux1)
								Set Variable: SpecifiedFluxTest:= 1
							End if
						End if
						If: SpecifiedFluxTest
							If: BL_GetCountOfACrossColumnList(ListIndex)>0
								Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
									Set Variable: CellIndex2:= CellIndex2 + 1
									Set Variable: AColumn:= BL_GetCrossColumnColumn(ListIndex, CellIndex)
									Set Variable: ARow:= BL_GetCrossColumnRow(ListIndex, CellIndex)
									Evaluate expression: L_SetListItem(CellList, (ElementLayerIndex - 1) * NX * NY + (ARow - 1) * NX + AColumn - 1, CellIndex2)
								End loop
								# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
							End if
							# If: BL_GetCountOfACrossColumnList(ListIndex)>0
						End if
					End loop
					# Loop for: Objects in layer: Vertical Specified Flux Boundary NL[ElementLayerIndex]
					# Clear Line information
					Evaluate expression: BL_FreeVertexList()
					# Read Line information for current Unit
					If: !BL_AddVertexLayer("Horizontal Specified Flux Boundary NL" + ElementLayerIndex)
						Alert: "Out of Memory. Abort this process, free up memory and try again."
					End if
					Set Variable: ListIndex:= -1
					Loop for: Objects in layer: Horizontal Specified Flux Boundary NL[ElementLayerIndex]
						Set Variable: ListIndex:= ListIndex + 1
						Set Variable: SpecifiedFluxTest:= 0
						If: UseSpecFlux
							If: !IsNA(Upward Fluid Flux1)
								Set Variable: SpecifiedFluxTest:= 1
							End if
						End if
						If: UseSpecHeatFlux
							If: !IsNA(Upward Heat Flux1)
								Set Variable: SpecifiedFluxTest:= 1
							End if
						End if
						If: UseSpecSoluteFlux
							If: !IsNA(Upward Solute Flux1)
								Set Variable: SpecifiedFluxTest:= 1
							End if
						End if
						If: SpecifiedFluxTest
							If: ContourType()=3
								Set Variable: RowCount:= BL_GetRowNodeCount()
								Set Variable: ColumnCount:= BL_GetColumnNodeCount()
								Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
									Set Variable: NodeX:= BL_GetColumnNodePosition(ColumnIndex)
									Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
										Set Variable: NodeY:= BL_GetRowNodePosition(RowIndex)
										If: BL_GetCountOfACellList(ListIndex)>0
											# Loop for: Variable ListIndex from: 0 to: BL_GetCountOfACellList(ListIndex)-1 step: 1
											If: BL_PointInsideContour(ListIndex, NodeX, NodeY)
												Set Variable: CellIndex2:= CellIndex2 + 1
												Evaluate expression: L_SetListItem(CellList, (ElementLayerIndex - 1) * NX * NY + RowIndex * NX + ColumnIndex, CellIndex2)
											End if
											# end if BL_PointInsideContour(ListIndex, NodeX, NodeY)
											# End loop
											# end Loop for: Variable ListIndex from: 0 to: BL_GetCountOfACellList(ListIndex)-1 step: 1
										End if
										# end If: BL_GetCountOfACellList(ListIndex)>0
									End loop
									# end Loop for: Variable RowIndex from:  to: RowCount step: 1
								End loop
								# end Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
							End if
							If: BL_GetCountOfACellList(ListIndex)>0
								Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACellList(ListIndex)-1 step: 1
									Set Variable: ColumnIndex:= BL_GetCellColumn(ListIndex, CellIndex)-1
									Set Variable: RowIndex:= BL_GetCellRow(ListIndex, CellIndex)-1
									Set Variable: NodeX:= BL_GetColumnNodePosition(ColumnIndex)
									Set Variable: NodeY:= BL_GetRowNodePosition(RowIndex)
									Set Variable: CellIndex2:= CellIndex2 + 1
									Evaluate expression: L_SetListItem(CellList, (ElementLayerIndex - 1) * NX * NY + RowIndex * NX + ColumnIndex, CellIndex2)
								End loop
								# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
							End if
						End if
					End loop
					# end Loop for: Objects in layer: Horizontal Specified Flux Boundary NL[ElementLayerIndex]
					Evaluate expression: L_AddToList(CellList, 0)
					Evaluate expression: L_SortList(CellList)
					Evaluate expression: L_EliminateDuplicates(CellList)
					Set Variable: CellCount:= CellCount + L_GetListSize(CellList) - 1
					Evaluate expression: L_FreeAList(CellList)
				End if
			End loop
			If: CellCount<0
				Set Variable: CellCount:= 0
			End if
			Set Variable: NFBC:= CellCount
		End if
		If: !UseLeakageBoundary
			Set Variable: NLBC:= 0
		Else
			Set Variable: CellCount:= 0
			Set Variable: CellIndex2:= 0
			# Loop over Geological Units
			Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
				Evaluate expression: ProgressBarAdvance()
				Evaluate expression: L_SetListSize(CellList, NX * NY * NZ)
				# Clear Line information
				Evaluate expression: BL_FreeVertexList()
				# Read Line information for current Unit
				If: !BL_AddVertexLayer("Vertical Aquifer Leakage Boundary NL" + ElementLayerIndex)
					Alert: "Out of Memory. Abort this process, free up memory and try again."
				End if
				Set Variable: ListIndex:= -1
				Loop for: Objects in layer: Vertical Aquifer Leakage Boundary NL[ElementLayerIndex]
					Set Variable: ListIndex:= ListIndex + 1
					If: BL_GetCountOfACrossRowList(ListIndex)>0
						If: !IsNA(Potential Energy per Unit Mass1)
							Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossRowList(ListIndex)-1 step: 1
								Set Variable: CellIndex2:= CellIndex2 + 1
								Set Variable: AColumn:= BL_GetCrossRowColumn(ListIndex, CellIndex)
								Set Variable: ARow:= BL_GetCrossRowRow(ListIndex, CellIndex)
								Evaluate expression: L_SetListItem(CellList, (ElementLayerIndex - 1) * NX * NY + (ARow - 1) * NX + AColumn - 1, CellIndex2)
							End loop
							# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossRowList(ListIndex)-1 step: 1
						End if
					End if
					# If: BL_GetCountOfACrossRowList(ListIndex)>0
				End loop
				# Loop for: Objects in layer: Vertical Aquifer Leakage Boundary NL[ElementLayerIndex]
				Set Variable: ListIndex:= -1
				Loop for: Objects in layer: Vertical Aquifer Leakage Boundary NL[ElementLayerIndex]
					Set Variable: ListIndex:= ListIndex + 1
					If: BL_GetCountOfACrossColumnList(ListIndex)>0
						If: !IsNA(Potential Energy per Unit Mass1)
							Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
								Set Variable: CellIndex2:= CellIndex2 + 1
								Set Variable: AColumn:= BL_GetCrossColumnColumn(ListIndex, CellIndex)
								Set Variable: ARow:= BL_GetCrossColumnRow(ListIndex, CellIndex)
								Evaluate expression: L_SetListItem(CellList, (ElementLayerIndex - 1) * NX * NY + (ARow - 1) * NX + AColumn - 1, CellIndex2)
							End loop
							# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
						End if
					End if
					# If: BL_GetCountOfACrossColumnList(ListIndex)>0
				End loop
				# end Loop for: Objects in layer: Vertical Aquifer Leakage Boundary NL[ElementLayerIndex]
				# Clear Line information
				Evaluate expression: BL_FreeVertexList()
				# Read Line information for current Unit
				If: !BL_AddVertexLayer("Horizontal Aquifer Leakage Boundary NL" + ElementLayerIndex)
					Alert: "Out of Memory. Abort this process, free up memory and try again."
				End if
				Set Variable: ListIndex:= -1
				Loop for: Objects in layer: Horizontal Aquifer Leakage Boundary NL[ElementLayerIndex]
					Set Variable: ListIndex:= ListIndex + 1
					If: ContourType()=3
						Set Variable: RowCount:= BL_GetRowNodeCount()
						Set Variable: ColumnCount:= BL_GetColumnNodeCount()
						If: !IsNA(Potential Energy per Unit Mass1)
							Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
								Set Variable: NodeX:= BL_GetColumnNodePosition(ColumnIndex)
								Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
									Set Variable: NodeY:= BL_GetRowNodePosition(RowIndex)
									If: BL_GetCountOfACellList(ListIndex)>0
										If: BL_PointInsideContour(ListIndex, NodeX, NodeY)
											Set Variable: CellIndex2:= CellIndex2 + 1
											Evaluate expression: L_SetListItem(CellList, (ElementLayerIndex - 1) * NX * NY + (RowIndex - 1) * NX + ColumnIndex - 1, CellIndex2)
										End if
										# end if BL_PointInsideContour(ListIndex, NodeX, NodeY)
									End if
									# end If: BL_GetCountOfACellList(ListIndex)>0
								End loop
								# end Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
							End loop
							# end Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
						End if
					End if
				End loop
				# End Loop for: Objects in layer: Horizontal Aquifer Leakage Boundary NL[ElementLayerIndex]
				Evaluate expression: L_AddToList(CellList, 0)
				Evaluate expression: L_SortList(CellList)
				Evaluate expression: L_EliminateDuplicates(CellList)
				Set Variable: CellCount:= CellCount + L_GetListSize(CellList) - 1
				Evaluate expression: L_FreeAList(CellList)
			End loop
			# end Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
			If: CellCount<0
				Set Variable: CellCount:= 0
			End if
			Set Variable: NLBC:= CellCount
		End if
		If: UseRiverLeakage
			Evaluate expression: ProgressBarAdvance()
			Set Variable: CellCount:= 0
			Set Variable: CellIndex2:= 0
			Evaluate expression: L_SetListSize(CellList, NX * NY)
			# Clear Lines
			Evaluate expression: BL_FreeVertexList()
			# Read River information
			If: !BL_AddVertexLayer("River Leakage")
				Alert: "Out of Memory. Abort this process, free up memory and try again."
			End if
			Set Variable: ListCount:= BL_GetCountOfCellLists()
			If: ListCount> 0
				Loop for: Variable ListIndex from: 0 to: ListCount-1 step: 1
					Set Variable: CellCount:= BL_GetCountOfACellList(ListIndex)
					Loop for: Variable CellIndex from: 0 to: CellCount-1 step: 1
						Set Variable: CellIndex2:= CellIndex2 + 1
						Set Variable: AColumn:= BL_GetCellColumn(ListIndex, CellIndex)
						Set Variable: ARow:= BL_GetCellRow(ListIndex, CellIndex)
						Evaluate expression: L_SetListItem(CellList, (ARow - 1) * NX + AColumn - 1, CellIndex2)
					End loop
					# end Loop for: Variable CellIndex from: 0 to: CellCount-1 step: 1
				End loop
			End if
			# end Loop for: Variable ListIndex from: 0 to: ListCount-1 step: 1
			Evaluate expression: L_AddToList(CellList, 0)
			Evaluate expression: L_SortList(CellList)
			Evaluate expression: L_EliminateDuplicates(CellList)
			Set Variable: CellCount:= CellCount + L_GetListSize(CellList) - 1
			If: CellCount<0
				Set Variable: CellCount:= 0
			End if
			Evaluate expression: L_FreeAList(CellList)
			Set Variable: NLBC:= NLBC + CellCount
		End if
		If: !UseEvapotranspiration
			Set Variable: NETBC:= 0
		Else
			Set Variable: CellCount:= 0
			Set Variable: CellIndex2:= 0
			# Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
			Evaluate expression: ProgressBarAdvance()
			Evaluate expression: L_SetListSize(CellList, NX * NY * NZ)
			# Clear Line information
			Evaluate expression: BL_FreeVertexList()
			# Read Line information for current Unit
			If: !BL_AddVertexLayer("Horizontal Evapotranspiration Boundary")
				Alert: "Out of Memory. Abort this process, free up memory and try again."
			End if
			Set Variable: ListIndex:= -1
			Loop for: Objects in layer: Horizontal Evapotranspiration Boundary
				Set Variable: ElementLayerIndex:= Node Layer
				Set Variable: ListIndex:= ListIndex + 1
				If: ContourType()=3
					Set Variable: RowCount:= BL_GetRowNodeCount()
					Set Variable: ColumnCount:= BL_GetColumnNodeCount()
					If: !IsNA(Max Evapotranspiration1)
						Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
							Set Variable: NodeX:= BL_GetColumnNodePosition(ColumnIndex)
							Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
								Set Variable: NodeY:= BL_GetRowNodePosition(RowIndex)
								# 									If: BL_GetCountOfACellList(ListIndex)>0
								# Loop for: Variable ListIndex from: 0 to: BL_GetCountOfACellList(ListIndex)-1 step: 1
								If: BL_PointInsideContour(ListIndex, NodeX, NodeY)
									Set Variable: CellIndex2:= CellIndex2 + 1
									Evaluate expression: L_SetListItem(CellList, (ElementLayerIndex - 1) * NX * NY + (RowIndex - 1) * NX + ColumnIndex - 1, CellIndex2)
								End if
								# end if BL_PointInsideContour(ListIndex, NodeX, NodeY)
								# End loop
								# end Loop for: Variable ListIndex from: 0 to: BL_GetCountOfACellList(ListIndex)-1 step: 1
								# 									End if
								# end If: BL_GetCountOfACellList(ListIndex)>0
							End loop
							# end Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
						End loop
						# end Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
					End if
				End if
				If: BL_GetCountOfACellList(ListIndex)>0
					Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACellList(ListIndex)-1 step: 1
						Set Variable: ColumnIndex:= BL_GetCellColumn(ListIndex, CellIndex)
						Set Variable: RowIndex:= BL_GetCellRow(ListIndex, CellIndex)
						Set Variable: NodeX:= BL_GetColumnNodePosition(ColumnIndex-1)
						Set Variable: NodeY:= BL_GetRowNodePosition(RowIndex-1)
						Set Variable: CellIndex2:= CellIndex2 + 1
						Evaluate expression: L_SetListItem(CellList, (ElementLayerIndex - 1) * NX * NY + RowIndex * NX + ColumnIndex, CellIndex2)
					End loop
					# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
				End if
			End loop
			# end Loop for: Objects in layer: Horizontal Evapotranspiration Boundary
			Evaluate expression: L_AddToList(CellList, 0)
			Evaluate expression: L_SortList(CellList)
			Evaluate expression: L_EliminateDuplicates(CellList)
			Set Variable: CellCount:= CellCount + L_GetListSize(CellList) - 1
			Evaluate expression: L_FreeAList(CellList)
			# End loop
			# End Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
			If: CellCount<0
				Set Variable: CellCount:= 0
			End if
			Set Variable: NETBC:= CellCount
		End if
		If: !UseAquiferInfluence
			Set Variable: NAIFC:= 0
		Else
			Set Variable: CellCount:= 0
			Set Variable: CellIndex2:= 0
			Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
				Evaluate expression: ProgressBarAdvance()
				Evaluate expression: L_SetListSize(CellList, NX * NY * NZ)
				# Clear Line information
				Evaluate expression: BL_FreeVertexList()
				# Read Line information for current Unit
				If: !BL_AddVertexLayer("Vertical Aquifer Influence Boundary NL" + ElementLayerIndex)
					Alert: "Out of Memory. Abort this process, free up memory and try again."
				End if
				Set Variable: ListIndex:= -1
				Loop for: Objects in layer: Vertical Aquifer Influence Boundary NL[ElementLayerIndex]
					Set Variable: ListIndex:= ListIndex + 1
					Set Variable: IBC:= "100400"
					If: !IsNA(Density1)
						If: BL_GetCountOfACrossRowList(ListIndex)>0
							Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossRowList(ListIndex)-1 step: 1
								Set Variable: CellIndex2:= CellIndex2 + 1
								Set Variable: AColumn:= BL_GetCrossRowColumn(ListIndex, CellIndex)
								Set Variable: ARow:= BL_GetCrossRowRow(ListIndex, CellIndex)
								Evaluate expression: L_SetListItem(CellList, (ElementLayerIndex - 1) * NX * NY + (ARow - 1) * NX + AColumn - 1, CellIndex2)
							End loop
							# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossRowList(ListIndex)-1 step: 1
						End if
						# If: BL_GetCountOfACrossRowList(ListIndex)>0
					End if
				End loop
				# Loop for: Objects in layer: Vertical Aquifer Influence Boundary NL[ElementLayerIndex]
				Set Variable: ListIndex:= -1
				Loop for: Objects in layer: Vertical Aquifer Influence Boundary NL[ElementLayerIndex]
					Set Variable: ListIndex:= ListIndex + 1
					Set Variable: IBC:= "200400"
					If: !IsNA(Density1)
						If: BL_GetCountOfACrossColumnList(ListIndex)>0
							Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
								Set Variable: CellIndex2:= CellIndex2 + 1
								Set Variable: AColumn:= BL_GetCrossColumnColumn(ListIndex, CellIndex)
								Set Variable: ARow:= BL_GetCrossColumnRow(ListIndex, CellIndex)
								Evaluate expression: L_SetListItem(CellList, (ElementLayerIndex - 1) * NX * NY + (ARow - 1) * NX + AColumn - 1, CellIndex2)
							End loop
							# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
						End if
						# If: BL_GetCountOfACrossColumnList(ListIndex)>0
					End if
				End loop
				# Loop for: Objects in layer: Vertical Aquifer Influence Boundary NL[ElementLayerIndex]
				# Clear Line information
				Evaluate expression: BL_FreeVertexList()
				# Read Line information for current Unit
				If: !BL_AddVertexLayer("Horizontal Aquifer Influence Boundary NL" + ElementLayerIndex)
					Alert: "Out of Memory. Abort this process, free up memory and try again."
				End if
				Set Variable: ListIndex:= -1
				Loop for: Objects in layer: Horizontal Aquifer Influence Boundary NL[ElementLayerIndex]
					Set Variable: ListIndex:= ListIndex + 1
					If: ContourType()=3
						Set Variable: RowCount:= BL_GetRowNodeCount()
						Set Variable: ColumnCount:= BL_GetColumnNodeCount()
						If: !IsNA(Density1)
							Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
								Set Variable: NodeX:= BL_GetColumnNodePosition(ColumnIndex)
								Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
									Set Variable: NodeY:= BL_GetRowNodePosition(RowIndex)
									If: BL_GetCountOfACellList(ListIndex)>0
										# Loop for: Variable ListIndex from: 0 to: BL_GetCountOfACellList(ListIndex)-1 step: 1
										If: BL_PointInsideContour(ListIndex, NodeX, NodeY)
											Set Variable: CellIndex2:= CellIndex2 + 1
											Evaluate expression: L_SetListItem(CellList, (ElementLayerIndex - 1) * NX * NY + (RowIndex - 1) * NX + ColumnIndex - 1, CellIndex2)
										End if
										# end if BL_PointInsideContour(ListIndex, NodeX, NodeY)
										# End loop
										# end Loop for: Variable ListIndex from: 0 to: BL_GetCountOfCellLists()-1 step: 1
									End if
									# end If: BL_GetCountOfCellLists()>0
								End loop
								# end Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
							End loop
							# end Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
						End if
					End if
				End loop
				# end Loop for: Objects in layer: Horizontal Aquifer Influence Boundary NL[ElementLayerIndex]
				Evaluate expression: L_AddToList(CellList, 0)
				Evaluate expression: L_SortList(CellList)
				Evaluate expression: L_EliminateDuplicates(CellList)
				Set Variable: CellCount:= CellCount + L_GetListSize(CellList) - 1
				Evaluate expression: L_FreeAList(CellList)
			End loop
			# End Loop over Geological units
			If: CellCount<0
				Set Variable: CellCount:= 0
			End if
			Set Variable: NAIFC:= CellCount
		End if
		If: !UseHeatCond
			Set Variable: NHCBC:= 0
		Else
			Set Variable: CellCount:= 0
			Set Variable: CellIndex2:= 0
			Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
				Evaluate expression: ProgressBarAdvance()
				Evaluate expression: L_SetListSize(CellList, NX * NY * NZ)
				# Clear Line information
				Evaluate expression: BL_FreeVertexList()
				# Read Line information for current Unit
				If: !BL_AddVertexLayer("Vertical Heat Conduction Boundary NL" + ElementLayerIndex)
					Alert: "Out of Memory. Abort this process, free up memory and try again."
				End if
				Set Variable: ListIndex:= -1
				Loop for: Objects in layer: Vertical Heat Conduction Boundary NL[ElementLayerIndex]
					Set Variable: ListIndex:= ListIndex + 1
					If: BL_GetCountOfACrossRowList(ListIndex)>0
						Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossRowList(ListIndex)-1 step: 1
							Set Variable: CellIndex2:= CellIndex2 + 1
							Set Variable: AColumn:= BL_GetCrossRowColumn(ListIndex, CellIndex)
							Set Variable: ARow:= BL_GetCrossRowRow(ListIndex, CellIndex)
							Evaluate expression: L_SetListItem(CellList, (ElementLayerIndex - 1) * NX * NY + (ARow - 1) * NX + AColumn - 1, CellIndex2)
						End loop
						# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossRowList(ListIndex)-1 step: 1
					End if
					# If: BL_GetCountOfACrossRowList(ListIndex)>0
				End loop
				# Loop for: Objects in layer: Vertical Heat Conduction Boundary NL[ElementLayerIndex]
				Set Variable: ListIndex:= -1
				Loop for: Objects in layer: Vertical Heat Conduction Boundary NL[ElementLayerIndex]
					Set Variable: ListIndex:= ListIndex + 1
					Set Variable: IBC:= "200040"
					If: BL_GetCountOfACrossColumnList(ListIndex)>0
						Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
							Set Variable: CellIndex2:= CellIndex2 + 1
							Set Variable: AColumn:= BL_GetCrossColumnColumn(ListIndex, CellIndex)
							Set Variable: ARow:= BL_GetCrossColumnRow(ListIndex, CellIndex)
							Evaluate expression: L_SetListItem(CellList, (ElementLayerIndex - 1) * NX * NY + (ARow - 1) * NX + AColumn - 1, CellIndex2)
						End loop
						# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
					End if
					# If: BL_GetCountOfACrossColumnList(ListIndex)>0
				End loop
				# end Loop for: Objects in layer: Vertical Heat Conduction Boundary NL[ElementLayerIndex]
				# Clear Line information
				Evaluate expression: BL_FreeVertexList()
				# Read Line information for current Unit
				If: !BL_AddVertexLayer("Horizontal Heat Conduction Boundary NL" + ElementLayerIndex)
					Alert: "Out of Memory. Abort this process, free up memory and try again."
				End if
				Set Variable: ListIndex:= -1
				Loop for: Objects in layer: Horizontal Heat Conduction Boundary NL[ElementLayerIndex]
					Set Variable: ListIndex:= ListIndex + 1
					If: ContourType()=3
						Set Variable: RowCount:= BL_GetRowNodeCount()
						Set Variable: ColumnCount:= BL_GetColumnNodeCount()
						Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
							Set Variable: NodeX:= BL_GetColumnNodePosition(ColumnIndex)
							Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
								Set Variable: NodeY:= BL_GetRowNodePosition(RowIndex)
								If: BL_GetCountOfACellList(ListIndex)>0
									# Loop for: Variable ListIndex from: 0 to: BL_GetCountOfCellLists()-1 step: 1
									If: BL_PointInsideContour(ListIndex, NodeX, NodeY)
										Set Variable: CellIndex2:= CellIndex2 + 1
										Evaluate expression: L_SetListItem(CellList, (ElementLayerIndex - 1) * NX * NY + (RowIndex) * NX + ColumnIndex, CellIndex2)
									End if
									# end if BL_PointInsideContour(ListIndex, NodeX, NodeY)
									# End loop
									# end Loop for: Variable ListIndex from: 0 to: BL_GetCountOfCellLists()-1 step: 1
								End if
								# end If: BL_GetCountOfCellLists()>0
							End loop
							# end Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
						End loop
						# end Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
					End if
				End loop
				# end Loop for: Objects in layer: Horizontal Heat Conduction Boundary NL[ElementLayerIndex]
				Evaluate expression: L_AddToList(CellList, 0)
				Evaluate expression: L_SortList(CellList)
				Evaluate expression: L_EliminateDuplicates(CellList)
				Set Variable: CellCount:= CellCount + L_GetListSize(CellList) - 1
				Evaluate expression: L_FreeAList(CellList)
			End loop
			# End Loop over Geological units
			If: CellCount<0
				Set Variable: CellCount:= 0
			End if
			Set Variable: NHCBC:= CellCount
		End if
		If: !UseWells
			Set Variable: NWEL:= 0
		Else
			Set Variable: CellCount:= 0
			# Set Variable: CellIndex2:= 0
			Set Variable: WellIndex:= 0
			Loop for: Objects in layer: Wells
				Set Variable: WellTop:= Top Completion Elevation
				Set Variable: WellBottom:= Bottom Completion Elevation
				If: (ContourType()=1)&!IsNA(Flow Rate1)
					Set Variable: WellIndex:= WellIndex + 1
				End if
			End loop
			# end Loop for: Objects in layer: Wells
			Set Variable: NWEL:= WellIndex
		End if
		If: !RESTRT
			Start a new line
				Export expression: "C.1.7 .. NSBC,NFBC,NLBC,NETBC,NAIFC,NHCBC,NWEL [G0]
			End line
			Start a new line
				Export expression: NSBC; [G0]
				Export expression: NFBC; [G0]
				Export expression: NLBC; [G0]
				Export expression: NETBC; [G0]
				Export expression: NAIFC; [G0]
				Export expression: NHCBC; [G0]
				Export expression: NWEL; [G0]
			End line
			# 1.8
			Evaluate expression: ProgressBarAdvance()
			Evaluate expression: ProgressBarSetMessage(Message + "1.8")
			Start a new line
				Export expression: "C.1.8 .. SLMETH[I]" [G0]
			End line
			Start a new line
				Export expression: SLMETH [G0]
			End line
			Start a new line
				Export expression: "C------------------------------------------------------------------------------" [G0]
			End line
			Start a new line
				Export expression: "C------------------------------------------------------------------------------" [G0]
			End line
			Start a new line
				Export expression: "C.....Static data - READ2" [G0]
			End line
			Start a new line
				Export expression: "C.....Coordinate geometry information" [G0]
			End line
			# 
			Evaluate expression: ProgressBarAdvance()
			Evaluate expression: ProgressBarSetMessage(Message + "2.2")
			If: !CYLIND
				Start a new line
					Export expression: "C.....   Rectangular coordinates" [G0]
				End line
				# Export 2.2A.1 using nonuniform coordinates in all cases.
				Start a new line
					Export expression: "C.2.2A.1 .. UNIGRX,UNIGRY,UNIGRZ; all [T/F];(O) - NOT CYLIND [1.4]" [G0]
				End line
				Start a new line
					Export expression: "F F F"; [G0]
				End line
				# 2.2A.2B
				Start a new line
					Export expression: "C.2.2A.2A .. X(1),X(NX);(O) - UNIGRX [2.2A.1]" [G0]
				End line
				Start a new line
					Export expression: "C.2.2A.2B .. X(I),I=1 to NX;(O) - NOT UNIGRX [2.2A.1]" [G0]
				End line
				Loop for: Variable ColumnIndex from: 0 to: NumColumns() step: 1
					Start a new line
						Export expression: NthColumnPos(ColumnIndex); [G0]
					End line
				End loop
				# 2.2A.3B
				Start a new line
					Export expression: "C.2.2A.3A .. Y(1),Y(NY);(O) - UNIGRY [2.2A.1]" [G0]
				End line
				Start a new line
					Export expression: "C.2.2A.3B .. Y(J),J=1 to NY;(O) - NOT UNIGRY [2.2A.1]" [G0]
				End line
				Loop for: Variable RowIndex from: 0 to: NumRows() step: 1
					Start a new line
						Export expression: NthRowPos(RowIndex); [G0]
					End line
				End loop
				# 2.2A.4B
				Start a new line
					Export expression: "C.2.2A.4A .. Z(1),Z(NZ);(O) - UNIGRZ [2.2A.1]" [G0]
				End line
				Start a new line
					Export expression: "C.2.2A.4B .. Z(K),K=1 to NZ;(O) - NOT UNIGRZ [2.2A.1]" [G0]
				End line
				Loop for: Variable ElementLayerIndex from: NZ to: 1 step: -1
					Start a new line
						Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
					End line
				End loop
			Else
				# To Do: Export 2.2B here
				Start a new line
					Export expression: "C.....   Cylindrical coordinates" [G0]
				End line
				Start a new line
					Export expression: "C.2.2B.1A .. R(1),R(NX),ARGRID[T/F];(O) - CYLIND [1.4]" [G0]
				End line
				Start a new line
					Export expression: "C.2.2B.1B .. R(I),I=1 to NX;(O) - CYLIND [1.4] and NOT ARGRID [2.2B.1A]" [G0]
				End line
				Start a new line
					Export expression: "C.2.2B.2 .. UNIGRZ[T/F];(O) - CYLIND [1.4]" [G0]
				End line
				Start a new line
					Export expression: "C.2.2B.3A .. Z(1),Z(NZ);(O) - UNIGRZ [2.2B.3A],CYLIND [1.4]" [G0]
				End line
				Start a new line
					Export expression: "C.2.2B.3B .. Z(K),K=1 to NZ;(O) - NOT UNIGRZ [2.2B.3A],CYLIND [1.4]" [G0]
				End line
				Start a new line
					Export expression: 0 [G0]
				End line
			End if
			# 2.3.1
			Evaluate expression: ProgressBarAdvance()
			Evaluate expression: ProgressBarSetMessage(Message + "2.3")
			Start a new line
				Export expression: "C.2.3.1 .. TILT[T/F];(O) - NOT CYLIND [1.4]" [G0]
			End line
			Start a new line
				If: TILT
					Export expression: "T"; [G0]
				Else
					Export expression: "F" [G0]
				End if
			End line
			Start a new line
				Export expression: "C.2.3.2 .. THETXZ,THETYZ,THETZZ;(O) - TILT [2.3.1] and NOT CYLIND [1.4]" [G0]
			End line
			If: TILT&!CYLIND
				Start a new line
					Export expression: THETXZ; [G0]
					Export expression: THETYZ; [G0]
					Export expression: THETZZ; [G0]
				End line
			End if
			Start a new line
				Export expression: "C------------------------------------------------------------------------------" [G0]
			End line
			Start a new line
				Export expression: "C.....Fluid property information" [G0]
			End line
			# 2.4.1
			Evaluate expression: ProgressBarAdvance()
			Evaluate expression: ProgressBarSetMessage(Message + "2.4")
			Start a new line
				Export expression: "C.2.4.1 .. BP" [G0]
			End line
			Start a new line
				Export expression: BP [G0]
			End line
			# 2.4.2
			Start a new line
				Export expression: "C.2.4.2 .. P0,T0,W0,DENF0" [G0]
			End line
			Start a new line
				Export expression: P0; [G0]
				Export expression: T0; [G0]
				If: SOLUTE
					Export expression: W0; [G0]
				Else
					Export expression: 0; [G0]
				End if
				Export expression: DENF0; [G0]
			End line
			# 2.4.3
			Start a new line
				Export expression: "C.2.4.3 .. W1,DENF1;(O) - SOLUTE [1.4]" [G0]
			End line
			If: SOLUTE
				Start a new line
					Export expression: W1; [G0]
					Export expression: DENF1; [G0]
				End line
			End if
			# 2.4.4
			Start a new line
				Export expression: "C.2.4.4 .. VISFAC; when < 0 for absolute viscosity: Pa-s or cP" [G0]
			End line
			Start a new line
				Export expression: VISFAC; [G0]
			End line
			Start a new line
				Export expression: "C------------------------------------------------------------------------------" [G0]
			End line
			# 2.5.1
			Evaluate expression: ProgressBarAdvance()
			Evaluate expression: ProgressBarSetMessage(Message + "2.5")
			Start a new line
				Export expression: "C.....Reference condition information" [G0]
			End line
			Start a new line
				Export expression: "C.2.5.1 .. PAATM" [G0]
			End line
			Start a new line
				Export expression: PAATM [G0]
			End line
			# 2.5.2
			Start a new line
				Export expression: "C.2.5.2 .. P0H,T0H" [G0]
			End line
			Start a new line
				Export expression: P0H; [G0]
				Export expression: T0H; [G0]
			End line
			Start a new line
				Export expression: "C------------------------------------------------------------------------------" [G0]
			End line
			Start a new line
				Export expression: "C.....Fluid thermal property information" [G0]
			End line
			# 2.6
			Evaluate expression: ProgressBarAdvance()
			Evaluate expression: ProgressBarSetMessage(Message + "2.6")
			Start a new line
				Export expression: "C.2.6 .. CPF,KTHF,BT;(O) - HEAT [1.4]; KTHF- generic time units" [G0]
			End line
			If: HEAT
				Start a new line
					Export expression: CPF; [G0]
					Export expression: KHTF; [G0]
					Export expression: BT; [G0]
				End line
			End if
			Start a new line
				Export expression: "C------------------------------------------------------------------------------" [G0]
			End line
			# 2.7
			Evaluate expression: ProgressBarAdvance()
			Evaluate expression: ProgressBarSetMessage(Message + "2.7")
			Start a new line
				Export expression: "C.....Solute information" [G0]
			End line
			Start a new line
				Export expression: "C.2.7 .. DM,DECLAM;(O) - SOLUTE [1.4]; DECLAM generic time unit" [G0]
			End line
			If: SOLUTE
				Start a new line
					Export expression: DM; [G0]
					Export expression: DECLAM; [G0]
				End line
			End if
			Start a new line
				Export expression: "C------------------------------------------------------------------------------" [G0]
			End line
			Start a new line
				Export expression: "C.....Porous media zone information" [G0]
			End line
			# Export 2.8.1
			Evaluate expression: ProgressBarSetMessage(Message + "2.8")
			Start a new line
				Export expression: "C.2.8.1 .. IPMZ,X1Z(IPMZ),X2Z(IPMZ),Y1Z(IPMZ),Y2Z(IPMZ),Z1Z(IPMZ),Z2Z(IPMZ)" [G0]
			End line
			Start a new line
				Export expression: "C.....Use as many 2.8.1 lines as necessary" [G0]
			End line
			Set Variable: ZoneIndex:= 0
			# Loop over geologic units
			Loop for: Variable ElementLayerIndex from: 1 to: HST3D_NUnits step: 1
				Evaluate expression: ProgressBarAdvance()
				# Loop over Blocks.
				Loop for: Blocks
					If: Active Element Layer[ElementLayerIndex]
						Start a new line
							Set Variable: ZoneIndex:= ZoneIndex + 1
							Export expression: ZoneIndex; [G0]
							Export expression: NthColumnPos(Column() -1 ); [G0]
							Export expression: NthColumnPos(Column()); [G0]
							Export expression: NthRowPos(Row() - 1); [G0]
							Export expression: NthRowPos(Row()); [G0]
							Export expression: HST3D_GetZ(ElementLayerIndex+1); [G0]
							Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
						End line
					End if
				End loop
				# End Loop over Blocks
			End loop
			# end Loop for: Variable ElementLayerIndex from: 1 to: HST3D_NUnits step: 1
			# 2.8.2
			Start a new line
				Export expression: "C.2.8.2 .. End with END" [G0]
			End line
			# 
			Start a new line
				Export expression: "END" [G0]
			End line
			Start a new line
				Export expression: "C------------------------------------------------------------------------------" [G0]
			End line
			Start a new line
				Export expression: "C.....Porous media property information" [G0]
			End line
			# 2.9.1
			Start a new line
				Export expression: "C.2.9.1 .. KXX(IPMZ),KYY(IPMZ),KZZ(IPMZ),IPMZ=1 to NPMZ [1.7]" [G0]
			End line
			Loop for: Variable ElementLayerIndex from: 1 to: HST3D_NUnits step: 1
				Evaluate expression: ProgressBarSetMessage(Message + "2.9.1, Element Layer " + ElementLayerIndex)
				Evaluate expression: ProgressBarAdvance()
				# Loop over Blocks.
				Loop for: Blocks
					If: Active Element Layer[ElementLayerIndex]
						Start a new line
							Export expression: Kx Element Layer[ElementLayerIndex]; [G0]
							Export expression: Ky Element Layer[ElementLayerIndex]; [G0]
							Export expression: Kz Element Layer[ElementLayerIndex]; [G0]
						End line
					End if
				End loop
				# End Loop over Blocks
			End loop
			# end Loop for: Variable ElementLayerIndex from: 1 to: HST3D_NUnits step: 1
			# 2.9.2
			Start a new line
				Export expression: "C.2.9.2 .. POROS(IPMZ),IPMZ=1 to NPMZ [1.7]" [G0]
			End line
			Loop for: Variable ElementLayerIndex from: 1 to: HST3D_NUnits step: 1
				Evaluate expression: ProgressBarSetMessage(Message + "2.9.2, Element Layer " + ElementLayerIndex)
				Evaluate expression: ProgressBarAdvance()
				# Loop over Blocks.
				Loop for: Blocks
					If: Active Element Layer[ElementLayerIndex]
						Start a new line
							Export expression: Porosity Element Layer[ElementLayerIndex]; [G0]
						End line
					End if
				End loop
				# End Loop over Blocks
			End loop
			# 2.9.3
			Evaluate expression: ProgressBarSetMessage(Message + "2.9.3")
			Start a new line
				Export expression: "C.2.9.3 .. ABPM(IPMZ),IPMZ=1 to NPMZ [1.7]" [G0]
			End line
			# end Loop for: Variable ElementLayerIndex from: 1 to: HST3D_NUnits step: 1
			Loop for: Variable ElementLayerIndex from: 1 to: HST3D_NUnits step: 1
				Evaluate expression: ProgressBarSetMessage(Message + "2.9.3, Element Layer " + ElementLayerIndex)
				Evaluate expression: ProgressBarAdvance()
				# Loop over Blocks.
				Loop for: Blocks
					If: Active Element Layer[ElementLayerIndex]
						Start a new line
							Export expression: Vertical Compr Element Layer[ElementLayerIndex]; [G0]
						End line
					End if
				End loop
				# End Loop over Blocks
			End loop
			# end Loop for: Variable ElementLayerIndex from: 1 to: HST3D_NUnits step: 1
			Start a new line
				Export expression: "C------------------------------------------------------------------------------" [G0]
			End line
			Start a new line
				Export expression: "C.....Porous media thermal property information" [G0]
			End line
			# 2.10.1
			Evaluate expression: ProgressBarSetMessage(Message + "2.10")
			Start a new line
				Export expression: "C.2.10.1 .. RCPPM(IPMZ),IPMZ=1 to NPMZ [1.7];(O) - HEAT [1.4]" [G0]
			End line
			If: HEAT
				Loop for: Variable ElementLayerIndex from: 1 to: HST3D_NUnits step: 1
					Evaluate expression: ProgressBarAdvance()
					# Loop over Blocks.
					Loop for: Blocks
						If: Active Element Layer[ElementLayerIndex]
							Start a new line
								Export expression: Heat Cap Element Layer[ElementLayerIndex]; [G0]
							End line
						End if
					End loop
					# End Loop over Blocks
				End loop
				# end Loop for: Variable ElementLayerIndex from: 1 to: HST3D_NUnits step: 1
				# 2.10.2
				Start a new line
					Export expression: "C.2.10.2 .. KTHXPM(IPMZ),KTHYPM(IPMZ),KTHZPM(IPMZ),IPMZ=1 to NPMZ [1.7];(O) -" [G0]
				End line
				Start a new line
					Export expression: "C..          HEAT [1.4]; KTHXPM, KTHYPM, KTHZPM  specific units  W/m-degC or BTU/h-ft-degF" [G0]
				End line
				If: HEAT
				End if
				Loop for: Variable ElementLayerIndex from: 1 to: HST3D_NUnits step: 1
					Evaluate expression: ProgressBarAdvance()
					# Loop over Blocks.
					Loop for: Blocks
						If: Active Element Layer[ElementLayerIndex]
							Start a new line
								Export expression: X Thermal Conductivity Element Layer[ElementLayerIndex]; [G0]
								Export expression: Y Thermal Conductivity Element Layer[ElementLayerIndex]; [G0]
								Export expression: Z Thermal Conductivity Element Layer[ElementLayerIndex]; [G0]
							End line
						End if
					End loop
					# End Loop over Blocks
				End loop
				# end Loop for: Variable ElementLayerIndex from: 1 to: HST3D_NUnits step: 1
			End if
			Start a new line
				Export expression: "C------------------------------------------------------------------------------" [G0]
			End line
			# 2.11
			Start a new line
				Export expression: "C.....Porous media solute and thermal dispersion information" [G0]
			End line
			Evaluate expression: ProgressBarSetMessage(Message + "2.11")
			Start a new line
				Export expression: "C.2.11 .. ALPHL(IPMZ),ALPHT(IPMZ),IPMZ=1 to NPMZ [1.7];(O) - SOLUTE [1.4] " [G0]
			End line
			Start a new line
				Export expression: "C..          and/or HEAT [1.4]" [G0]
			End line
			If: SOLUTE|HEAT
				Loop for: Variable ElementLayerIndex from: 1 to: HST3D_NUnits step: 1
					Evaluate expression: ProgressBarAdvance()
					# Loop over Blocks.
					Loop for: Blocks
						If: Active Element Layer[ElementLayerIndex]
							Start a new line
								Export expression: Longitudinal Dispersivity Element Layer[ElementLayerIndex]; [G0]
								Export expression: Transverse Dispersivity Element Layer[ElementLayerIndex] [G0]
							End line
						End if
					End loop
					# End Loop over Blocks
				End loop
				# end Loop for: Variable ElementLayerIndex from: 1 to: HST3D_NUnits step: 1
			End if
			Start a new line
				Export expression: "C------------------------------------------------------------------------------" [G0]
			End line
			# 2.12
			Start a new line
				Export expression: "C.....Porous media solute property information" [G0]
			End line
			Evaluate expression: ProgressBarSetMessage(Message + "2.12")
			Start a new line
				Export expression: "C.2.12 .. DBKD(IPMZ),IPMZ=1 to NPMZ [1.7];(O) - SOLUTE [1.4]" [G0]
			End line
			If: SOLUTE
				Loop for: Variable ElementLayerIndex from: 1 to: HST3D_NUnits step: 1
					Evaluate expression: ProgressBarAdvance()
					# Loop over Blocks.
					Loop for: Blocks
						If: Active Element Layer[ElementLayerIndex]
							Start a new line
								Export expression: Distribution Coef Element Layer[ElementLayerIndex]; [G0]
							End line
						End if
					End loop
					# End Loop over Blocks
				End loop
				# end Loop for: Variable ElementLayerIndex from: 1 to: HST3D_NUnits step: 1
			End if
			Start a new line
				Export expression: "C------------------------------------------------------------------------------" [G0]
			End line
			Start a new line
				Export expression: "C.....Source-sink well information" [G0]
			End line
			# 2.13.1-2.13.5
			Evaluate expression: ProgressBarSetMessage(Message + "2.13")
			Start a new line
				Export expression: "C 2.13.1 - 2.13.5" [G0]
			End line
			Set Variable: WellRiserCalculated:= 0
			If: NWEL>0
				Evaluate expression: ProgressBarAdvance()
				Set Variable: WellIndex:= 0
				Set Variable: GAngle:= GridAngle()
				Loop for: Objects in layer: Wells
					If: (ContourType()=1)&!IsNA(Flow Rate1)
						# 2.13.1
						Start a new line
							Export expression: "C.2.13.1 .. IWEL,XW,YW,ZWB,ZWT,WBOD,WQMETH[I];(O) - NWEL [1.7] >0" [G0]
						End line
						Start a new line
							Set Variable: WellIndex:= WellIndex + 1
							Export expression: WellIndex; [G0]
							If: (GAngle=0)
								Export expression: NthVertexX(1); [G0]
								Export expression: NthVertexY(1); [G0]
							Else
								Set Variable: PointDistance:= Sqrt(NthVertexX(1) * NthVertexX(1) + NthVertexY(1) * NthVertexY(1))
								Set Variable: PointAngle:= ATan2(NthVertexY(1), NthVertexX(1))
								Set Variable: PointAngle:= PointAngle - GAngle
								Set Variable: NodeX:= PointDistance * Cos(PointAngle)
								Set Variable: NodeY:= PointDistance * Sin(PointAngle)
								Export expression: NodeX; [G0]
								Export expression: NodeY; [G0]
							End if
							Export expression: Bottom Completion Elevation; [G0]
							Export expression: Top Completion Elevation; [G0]
							Export expression: Outside Diameter; [G0]
							Export expression: Method; [G0]
							If: (Method>30)
								Set Variable: WellRiserCalculated:= 1
							End if
						End line
						# 2.13.2
						Start a new line
							Export expression: "C.2.13.2 .. WCF(L);L = 1 to NZ-1 (EXCLUSIVE) by ELEMENT" [G0]
						End line
						# Loop over layers
						Loop for: Variable ElementLayerIndex from: HST3D_NUnits to: 1 step: -1
							Start a new line
								Export expression: Well Completion Element Layer[ElementLayerIndex] [G0]
							End line
						End loop
						# End Loop over layers
						# 2.13.3
						Start a new line
							Export expression: "C.2.13.3 .. WSF(L);L = 1 to NZ-1 (EXCLUSIVE) by ELEMENT" [G0]
						End line
						# Loop over layers
						Loop for: Variable ElementLayerIndex from: HST3D_NUnits to: 1 step: -1
							Start a new line
								Export expression: Well Skin Factor Element Layer[ElementLayerIndex] [G0]
							End line
						End loop
						# End Loop over layers
						# 2.13.4
						Start a new line
							Export expression: "C.2.13.4 .. WRISL,WRID,WRRUF,WRANGL;(O) - NWEL [1.7] >0 and" [G0]
						End line
						Start a new line
							Export expression: "C..          WRCALC(WQMETH [2.13.1] >30)" [G0]
						End line
						# if well riser calculations
						If: (Method=40)|(Method=50)
							Start a new line
								Export expression: Well Riser Pipe Length; [G0]
								Export expression: Well Riser Pipe Inside Diameter; [G0]
								Export expression: Well Riser Pipe Roughness; [G0]
								Export expression: Well Riser Pipe Angle; [G0]
							End line
						End if
						# end if well riser calculations
						# 2.13.5
						Start a new line
							Export expression: "C.2.13.5 .. HTCWR,DTHAWR,KTHAWR,KTHWR,TABWR,TATWR;(O) - NWEL [1.7] >0" [G0]
						End line
						Start a new line
							Export expression: "C..          WRCALC(WQMETH [2.13.1] >30) and HEAT [1.4]" [G0]
						End line
						# if well riser calculations
						Start a new line
							Export expression: "C..          HTCWR, specific units W/m^2-degC or BTU/ft^2-h-degF" [G0]
						End line
						Start a new line
							Export expression: "C..          DTHAWR, generic time unit to correspond with molecular diffusivity" [G0]
						End line
						Start a new line
							Export expression: "C..          KTHAWR, KTHWR  specific  units  W/m-degC or BTU/h-ft-degF" [G0]
						End line
						If: (Method=40)|(Method=50)
							Start a new line
								Export expression: Heat Transfer Coefficient; [G0]
								Export expression: Thermal Diffusivity; [G0]
								Export expression: Medium Thermal Conductivity; [G0]
								Export expression: Pipe Thermal Conductivity; [G0]
								Export expression: Bottom Temperature; [G0]
								Export expression: Top Temperature; [G0]
							End line
						End if
						# end if well riser calculations
					End if
					Start a new line
						Export expression: "C.....Use as many sets of 2.13.1-5 lines as necessary for each well" [G0]
					End line
				End loop
				# 2.13.6
				Start a new line
					Export expression: "C.2.13.6 .. End with END" [G0]
				End line
				Start a new line
					Export expression: "END" [G0]
				End line
			End if
			# end Loop for: Objects in layer: Wells
			# 2.13.7
			Start a new line
				Export expression: "C.2.13.7 .. MXITQW{10},TOLDPW{6.E-3},TOLFPW{.001},TOLQW{.001},DAMWRC{2.}," [G0]
			End line
			Start a new line
				Export expression: "C..          DZMIN{.01},EPSWR{.001};(O) - NWEL [1.7] >0" [G0]
			End line
			Start a new line
				Export expression: "C..          and WRCALC(WQMETH[2.13.1] >30)" [G0]
			End line
			# if well riser calculations
			If: WellRiser&WellRiserCalculated
				Start a new line
					Export expression: MXITQW; [G0]
					Export expression: TOLDPW; [G0]
					Export expression: TOLFPW; [G0]
					Export expression: TOLQW; [G0]
					Export expression: DAMWRC; [G0]
					Export expression: DZMIN; [G0]
					Export expression: EPSWR; [G0]
				End line
			End if
			# end if well riser calculations
			Start a new line
				Export expression: "C------------------------------------------------------------------------------" [G0]
			End line
			Start a new line
				Export expression: "C.....Boundary condition information" [G0]
			End line
			Start a new line
				Export expression: "C------------------------------------------------------------------------------" [G0]
			End line
			Start a new line
				Export expression: "C.....     Specified value b.c." [G0]
			End line
			# 2.14
			Evaluate expression: ProgressBarSetMessage(Message + "2.14")
			Start a new line
				Export expression: "C.2.14 .. IBC by x,y,z range {0.1-0.3} with no IMOD parameter;(O) -" [G0]
			End line
			Start a new line
				Export expression: "C..          NSBC [1.7] > 0" [G0]
			End line
			# Evaluate expression: BL_InitializeGridInformation("HST3D Grid",1)
			If: NSBC>0
				# Loop over Geological Units
				Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
					Evaluate expression: ProgressBarAdvance()
					# Clear Line information
					Evaluate expression: BL_FreeVertexList()
					# Read Line information for current Unit
					If: !BL_AddVertexLayer("Specified State NL" + ElementLayerIndex)
						Alert: "Out of Memory. Abort this process, free up memory and try again."
					End if
					Set Variable: ListIndex:= -1
					Loop for: Objects in layer: Specified State NL[ElementLayerIndex]
						Set Variable: ListIndex:= ListIndex + 1
						If: UseSpecPres
							If: IsNA(Specified Pressure1)
								Set Variable: IBC:= "0"
							Else
								Set Variable: IBC:= "1"
							End if
						Else
							Set Variable: IBC:= "0"
						End if
						If: UseSpecTemp
							If: IsNA(Specified Temperature1)
								Set Variable: IBC:= IBC + "0"
							Else
								Set Variable: IBC:= IBC + "1"
							End if
						Else
							Set Variable: IBC:= IBC + "0"
						End if
						If: UseSpecMassFrac
							Set Variable: MassFractionTest:= 0
							If: SCALMF
								If: !IsNA(Specified Scaled Mass Fraction1)
									Set Variable: MassFractionTest:= 1
								End if
							Else
								If: !IsNA(Specified Mass Fraction1)
									Set Variable: MassFractionTest:= 1
								End if
							End if
							If: MassFractionTest
								Set Variable: IBC:= IBC + "1"
							Else
								Set Variable: IBC:= IBC + "0"
							End if
						Else
							Set Variable: IBC:= IBC + "0"
						End if
						Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACellList(ListIndex)-1 step: 1
							Set Variable: AColumn:= BL_GetCellColumn(ListIndex, CellIndex)
							Set Variable: ARow:= BL_GetCellRow(ListIndex, CellIndex)
							Start a new line
								Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
								Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
								Export expression: L_GetFromList(RowList, ARow - 1); [G0]
								Export expression: L_GetFromList(RowList, ARow - 1); [G0]
								Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
								Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
								Evaluate expression: L_Set3DListItem(BoundaryTypeArray, AColumn - 1, ARow - 1, ElementLayerIndex - 1, 1)
							End line
							Start a new line
								Export expression: IBC [G0]
							End line
						End loop
						# end Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACellList(ListIndex)-1 step: 1
						If: ContourType()=3
							Set Variable: RowCount:= BL_GetRowNodeCount()
							Set Variable: ColumnCount:= BL_GetColumnNodeCount()
							Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
								Set Variable: NodeX:= BL_GetColumnNodePosition(ColumnIndex)
								Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
									Set Variable: NodeY:= BL_GetRowNodePosition(RowIndex)
									# If: BL_GetCountOfCellLists()>0
									If: BL_PointInsideContour(ListIndex, NodeX, NodeY)
										Start a new line
											Export expression: NodeX; [G0]
											Export expression: NodeX; [G0]
											Export expression: NodeY; [G0]
											Export expression: NodeY; [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
											Evaluate expression: L_Set3DListItem(BoundaryTypeArray, ColumnIndex, RowIndex, ElementLayerIndex - 1, 1)
										End line
										Start a new line
											Export expression: IBC [G0]
										End line
									End if
									# end if BL_PointInsideContour(ListIndex, NodeX, NodeY)
									# End if
									# end If: BL_GetCountOfCellLists()>0
								End loop
								# end Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
							End loop
							# end Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
						End if
					End loop
					# end Loop for: Objects in layer: Specified State NL[ElementLayerIndex]
				End loop
				# End Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
				Start a new line
					Export expression: "END" [G0]
				End line
			End if
			Start a new line
				Export expression: "C------------------------------------------------------------------------------" [G0]
			End line
			Start a new line
				Export expression: "C.....     Specified flux b.c." [G0]
			End line
			# 2.15
			Evaluate expression: ProgressBarSetMessage(Message + "2.15")
			Start a new line
				Export expression: "C.2.15 .. IBC by x,y,z range {0.1-0.3} with no IMOD parameter;(O) -" [G0]
			End line
			Start a new line
				Export expression: "C..          NFBC [1.7] > 0" [G0]
			End line
			If: NFBC>0
				# Clear Line information
				Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
					Evaluate expression: ProgressBarAdvance()
					Evaluate expression: BL_FreeVertexList()
					# Read Line information for current Unit
					If: !BL_AddVertexLayer("Vertical Specified Flux Boundary NL" + ElementLayerIndex)
						Alert: "Out of Memory. Abort this process, free up memory and try again."
					End if
					Set Variable: ListIndex:= -1
					Loop for: Objects in layer: Vertical Specified Flux Boundary NL[ElementLayerIndex]
						Set Variable: ListIndex:= ListIndex + 1
						Set Variable: IBC:= "100"
						If: UseSpecFlux
							If: IsNA(Fluid Flux1)
								Set Variable: IBC:= IBC + "0"
							Else
								Set Variable: IBC:= IBC + "2"
							End if
						Else
							Set Variable: IBC:= IBC + "0"
						End if
						If: UseSpecHeatFlux
							If: IsNA(Heat Flux1)
								Set Variable: IBC:= IBC + "0"
							Else
								Set Variable: IBC:= IBC + "2"
							End if
						Else
							Set Variable: IBC:= IBC + "0"
						End if
						If: UseSpecSoluteFlux
							If: IsNA(Solute Flux1)
								Set Variable: IBC:= IBC + "0"
							Else
								Set Variable: IBC:= IBC + "2"
							End if
						Else
							Set Variable: IBC:= IBC + "0"
						End if
						If: BL_GetCountOfACrossRowList(ListIndex)>0
							Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossRowList(ListIndex)-1 step: 1
								Set Variable: AColumn:= BL_GetCrossRowColumn(ListIndex, CellIndex)
								Set Variable: ARow:= BL_GetCrossRowRow(ListIndex, CellIndex)
								If: (L_GetFrom3DList(BoundaryTypeArray, AColumn - 1, ARow - 1, ElementLayerIndex - 1)!=1)
									Evaluate expression: L_Set3DListItem(BoundaryTypeArray, AColumn - 1, ARow - 1, ElementLayerIndex - 1, 2)
									Start a new line
										Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
										Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
										Export expression: L_GetFromList(RowList, ARow - 1); [G0]
										Export expression: L_GetFromList(RowList, ARow - 1); [G0]
										Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
										Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
									End line
									Start a new line
										Export expression: IBC [G0]
									End line
								End if
							End loop
							# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossRowList(ListIndex)-1 step: 1
						End if
						# If: BL_GetCountOfACrossRowList(ListIndex)>0
					End loop
					# Loop for: Objects in layer: Vertical Specified Flux Boundary NL[ElementLayerIndex]
					Set Variable: ListIndex:= -1
					Loop for: Objects in layer: Vertical Specified Flux Boundary NL[ElementLayerIndex]
						Set Variable: ListIndex:= ListIndex + 1
						Set Variable: IBC:= "200"
						If: UseSpecFlux
							If: IsNA(Fluid Flux1)
								Set Variable: IBC:= IBC + "0"
							Else
								Set Variable: IBC:= IBC + "2"
							End if
						Else
							Set Variable: IBC:= IBC + "0"
						End if
						If: UseSpecHeatFlux
							If: IsNA(Heat Flux1)
								Set Variable: IBC:= IBC + "0"
							Else
								Set Variable: IBC:= IBC + "2"
							End if
						Else
							Set Variable: IBC:= IBC + "0"
						End if
						If: UseSpecSoluteFlux
							If: IsNA(Solute Flux1)
								Set Variable: IBC:= IBC + "0"
							Else
								Set Variable: IBC:= IBC + "2"
							End if
						Else
							Set Variable: IBC:= IBC + "0"
						End if
						If: BL_GetCountOfACrossColumnList(ListIndex)>0
							Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
								Set Variable: AColumn:= BL_GetCrossColumnColumn(ListIndex, CellIndex)
								Set Variable: ARow:= BL_GetCrossColumnRow(ListIndex, CellIndex)
								If: (L_GetFrom3DList(BoundaryTypeArray, AColumn - 1, ARow - 1, ElementLayerIndex - 1)!=1)
									Evaluate expression: L_Set3DListItem(BoundaryTypeArray, ColumnIndex, RowIndex, ElementLayerIndex - 1, 2)
									Start a new line
										Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
										Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
										Export expression: L_GetFromList(RowList, ARow - 1); [G0]
										Export expression: L_GetFromList(RowList, ARow - 1); [G0]
										Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
										Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
									End line
									Start a new line
										Export expression: IBC [G0]
									End line
								End if
							End loop
							# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
						End if
						# If: BL_GetCountOfACrossColumnList(ListIndex)>0
					End loop
					# Loop for: Objects in layer: Vertical Specified Flux Boundary NL[ElementLayerIndex]
					# Clear Line information
					Evaluate expression: BL_FreeVertexList()
					# Read Line information for current Unit
					If: !BL_AddVertexLayer("Horizontal Specified Flux Boundary NL" + ElementLayerIndex)
						Alert: "Out of Memory. Abort this process, free up memory and try again."
					End if
					Set Variable: ListIndex:= -1
					Loop for: Objects in layer: Horizontal Specified Flux Boundary NL[ElementLayerIndex]
						Set Variable: ListIndex:= ListIndex + 1
						Set Variable: IBC:= "300"
						If: UseSpecFlux
							If: IsNA(Upward Fluid Flux1)
								Set Variable: IBC:= IBC + "0"
							Else
								Set Variable: IBC:= IBC + "2"
							End if
						Else
							Set Variable: IBC:= IBC + "0"
						End if
						If: UseSpecHeatFlux
							If: IsNA(Upward Heat Flux1)
								Set Variable: IBC:= IBC + "0"
							Else
								Set Variable: IBC:= IBC + "2"
							End if
						Else
							Set Variable: IBC:= IBC + "0"
						End if
						If: UseSpecSoluteFlux
							If: IsNA(Upward Solute Flux1)
								Set Variable: IBC:= IBC + "0"
							Else
								Set Variable: IBC:= IBC + "2"
							End if
						Else
							Set Variable: IBC:= IBC + "0"
						End if
						If: ContourType()=3
							Set Variable: RowCount:= BL_GetRowNodeCount()
							Set Variable: ColumnCount:= BL_GetColumnNodeCount()
							Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
								Set Variable: NodeX:= BL_GetColumnNodePosition(ColumnIndex)
								Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
									If: (L_GetFrom3DList(BoundaryTypeArray, ColumnIndex, RowIndex, ElementLayerIndex - 1)!=1)
										Evaluate expression: L_Set3DListItem(BoundaryTypeArray, ColumnIndex, RowIndex, ElementLayerIndex - 1, 2)
										Set Variable: NodeY:= BL_GetRowNodePosition(RowIndex)
										# If: BL_GetCountOfCellLists()>0
										If: BL_PointInsideContour(ListIndex, NodeX, NodeY)
											Start a new line
												Export expression: NodeX; [G0]
												Export expression: NodeX; [G0]
												Export expression: NodeY; [G0]
												Export expression: NodeY; [G0]
												Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
												Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
											End line
											Start a new line
												Export expression: IBC [G0]
											End line
										End if
										# end if BL_PointInsideContour(ListIndex, NodeX, NodeY)
										# End if
										# end If: BL_GetCountOfCellLists()>0
									End if
								End loop
								# end Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
							End loop
						End if
						# end Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
						If: BL_GetCountOfACellList(ListIndex)>0
							Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACellList(ListIndex)-1 step: 1
								Set Variable: AColumn:= BL_GetCellColumn(ListIndex, CellIndex)
								Set Variable: ARow:= BL_GetCellRow(ListIndex, CellIndex)
								If: (L_GetFrom3DList(BoundaryTypeArray, AColumn - 1, ARow - 1, ElementLayerIndex - 1)!=1)
									Start a new line
										Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
										Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
										Export expression: L_GetFromList(RowList, ARow - 1); [G0]
										Export expression: L_GetFromList(RowList, ARow - 1); [G0]
										Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
										Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
									End line
									Start a new line
										Export expression: IBC [G0]
									End line
								End if
							End loop
							# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
						End if
					End loop
					# end Loop for: Objects in layer: Horizontal Specified Flux Boundary NL[ElementLayerIndex]
				End loop
				# End Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
				Start a new line
					Export expression: "END" [G0]
				End line
			End if
			Start a new line
				Export expression: "C------------------------------------------------------------------------------" [G0]
			End line
			Start a new line
				Export expression: "C.....     Aquifer and river leakage b.c." [G0]
			End line
			# 2.16.1
			Evaluate expression: ProgressBarSetMessage(Message + "2.16")
			Start a new line
				Export expression: "C.2.16.1 .. IBC by x,y,z range {0.1-0.3} with no IMOD parameter;(O) -" [G0]
			End line
			Start a new line
				Export expression: "C..          NLBC [1.7] >0" [G0]
			End line
			If: NLBC>0&UseLeakageBoundary
				# Loop over Geological Units
				Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
					Evaluate expression: ProgressBarAdvance()
					# Clear Line information
					Evaluate expression: BL_FreeVertexList()
					# Read Line information for current Unit
					If: !BL_AddVertexLayer("Vertical Aquifer Leakage Boundary NL" + ElementLayerIndex)
						Alert: "Out of Memory. Abort this process, free up memory and try again."
					End if
					Set Variable: ListIndex:= -1
					Loop for: Objects in layer: Vertical Aquifer Leakage Boundary NL[ElementLayerIndex]
						Set Variable: ListIndex:= ListIndex + 1
						Set Variable: IBC:= "100300"
						If: BL_GetCountOfACrossRowList(ListIndex)>0
							If: !IsNA(Potential Energy per Unit Mass1)
								Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossRowList(ListIndex)-1 step: 1
									Set Variable: AColumn:= BL_GetCrossRowColumn(ListIndex, CellIndex)
									Set Variable: ARow:= BL_GetCrossRowRow(ListIndex, CellIndex)
									If: (L_GetFrom3DList(BoundaryTypeArray, AColumn - 1, ARow - 1, ElementLayerIndex - 1)!=1)
										Evaluate expression: L_Set3DListItem(BoundaryTypeArray, AColumn - 1, ARow - 1, ElementLayerIndex - 1, 3)
										Start a new line
											Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
											Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
											Export expression: L_GetFromList(RowList, ARow - 1); [G0]
											Export expression: L_GetFromList(RowList, ARow - 1); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
										End line
										Start a new line
											Export expression: IBC; [G0]
										End line
									End if
								End loop
								# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossRowList(ListIndex)-1 step: 1
							End if
						End if
						# If: BL_GetCountOfACrossRowList(ListIndex)>0
					End loop
					# Loop for: Objects in layer: Vertical Aquifer Leakage Boundary NL[ElementLayerIndex]
					Set Variable: ListIndex:= -1
					Loop for: Objects in layer: Vertical Aquifer Leakage Boundary NL[ElementLayerIndex]
						Set Variable: ListIndex:= ListIndex + 1
						Set Variable: IBC:= "200300"
						If: BL_GetCountOfACrossColumnList(ListIndex)>0
							If: !IsNA(Potential Energy per Unit Mass1)
								Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
									Set Variable: AColumn:= BL_GetCrossColumnColumn(ListIndex, CellIndex)
									Set Variable: ARow:= BL_GetCrossColumnRow(ListIndex, CellIndex)
									If: (L_GetFrom3DList(BoundaryTypeArray, AColumn - 1, ARow - 1, ElementLayerIndex - 1)!=1)
										Evaluate expression: L_Set3DListItem(BoundaryTypeArray, AColumn - 1, ARow - 1, ElementLayerIndex - 1, 3)
										Start a new line
											Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
											Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
											Export expression: L_GetFromList(RowList, ARow - 1); [G0]
											Export expression: L_GetFromList(RowList, ARow - 1); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
										End line
										Start a new line
											Export expression: IBC; [G0]
										End line
									End if
								End loop
								# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
							End if
						End if
						# If: BL_GetCountOfACrossColumnList(ListIndex)>0
					End loop
					# end Loop for: Objects in layer: Vertical Aquifer Leakage Boundary NL[ElementLayerIndex]
					# Clear Line information
					Evaluate expression: BL_FreeVertexList()
					# Read Line information for current Unit
					If: !BL_AddVertexLayer("Horizontal Aquifer Leakage Boundary NL" + ElementLayerIndex)
						Alert: "Out of Memory. Abort this process, free up memory and try again."
					End if
					Set Variable: ListIndex:= -1
					Loop for: Objects in layer: Horizontal Aquifer Leakage Boundary NL[ElementLayerIndex]
						Set Variable: ListIndex:= ListIndex + 1
						Set Variable: IBC:= "300300"
						If: ContourType()=3
							Set Variable: RowCount:= BL_GetRowNodeCount()
							Set Variable: ColumnCount:= BL_GetColumnNodeCount()
							If: !IsNA(Potential Energy per Unit Mass1)
								Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
									Set Variable: NodeX:= BL_GetColumnNodePosition(ColumnIndex)
									Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
										If: (L_GetFrom3DList(BoundaryTypeArray, ColumnIndex, RowIndex, ElementLayerIndex - 1)!=1)
											Evaluate expression: L_Set3DListItem(BoundaryTypeArray, ColumnIndex, RowIndex, ElementLayerIndex - 1, 3)
											Set Variable: NodeY:= BL_GetRowNodePosition(RowIndex)
											# If: BL_GetCountOfACellList(ListIndex)>0
											If: BL_PointInsideContour(ListIndex, NodeX, NodeY)
												Start a new line
													Export expression: NodeX; [G0]
													Export expression: NodeX; [G0]
													Export expression: NodeY; [G0]
													Export expression: NodeY; [G0]
													Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
													Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
												End line
												Start a new line
													Export expression: IBC; [G0]
												End line
											End if
											# end if BL_PointInsideContour(ListIndex, NodeX, NodeY)
											# End if
											# end If: BL_GetCountOfCellLists()>0
										End if
									End loop
									# end Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
								End loop
								# end Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
							End if
						End if
						If: BL_GetCountOfACellList(ListIndex)>0
							Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACellList(ListIndex)-1 step: 1
								Set Variable: AColumn:= BL_GetCellColumn(ListIndex, CellIndex)
								Set Variable: ARow:= BL_GetCellRow(ListIndex, CellIndex)
								If: (L_GetFrom3DList(BoundaryTypeArray, AColumn - 1, ARow - 1, ElementLayerIndex - 1)!=1)
									Evaluate expression: L_Set3DListItem(BoundaryTypeArray, AColumn - 1, ARow - 1, ElementLayerIndex - 1, 3)
									Start a new line
										Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
										Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
										Export expression: L_GetFromList(RowList, ARow - 1); [G0]
										Export expression: L_GetFromList(RowList, ARow - 1); [G0]
										Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
										Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
									End line
									Start a new line
										Export expression: IBC [G0]
									End line
								End if
							End loop
							# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
						End if
					End loop
					# End Loop for: Objects in layer: Horizontal Aquifer Leakage Boundary NL[ElementLayerIndex]
				End loop
				# end Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
			End if
			# If: NLBC>0&UseRiverLeakage
			# Set Variable: IBC:= "300300"
			# Evaluate expression: ProgressBarAdvance()
			# Clear Lines
			# Evaluate expression: BL_FreeVertexList()
			# Read River information
			# If: !BL_AddVertexLayer("River Leakage")
			# Alert: "Out of Memory. Abort this process, free up memory and try again."
			# End if
			# Set Variable: ListCount:= BL_GetCountOfCellLists()
			# Set Variable: ListIndex:= -1
			# Loop for: Objects in layer: River Leakage
			# Set Variable: ListIndex:= ListIndex + 1
			# If: River Bed Top Elevation - River Bed Thickness>HST3D_GetZ(1)
			# Set Variable: RiverElevation:= HST3D_GetZ(1)
			# Else
			# If: River Bed Top Elevation - River Bed Thickness<HST3D_GetZ(NZ)
			# Set Variable: RiverElevation:= HST3D_GetZ(NZ)
			# Else
			# Loop for: Variable ElementLayerIndex from: 1 to: NZ-1 step: 1
			# If: (River Bed Top Elevation - River Bed Thickness<=HST3D_CellTop(ElementLayerIndex))&(River Bed Top Elevation - River Bed Thickness>=HST3D_CellBottom(ElementLayerIndex))
			# Set Variable: RiverElevation:= HST3D_GetZ(ElementLayerIndex)
			# End if
			# End loop
			# End if
			# End if
			# Set Variable: CellCount:= BL_GetCountOfACellList(ListIndex)
			# Loop for: Variable CellIndex from: 0 to: CellCount-1 step: 1
			# Set Variable: AColumn:= BL_GetCellColumn(ListIndex, CellIndex)
			# Set Variable: ARow:= BL_GetCellRow(ListIndex, CellIndex)
			# If: (L_GetFrom3DList(BoundaryTypeArray, AColumn - 1, ARow - 1, ElementLayerIndex - 1)!=1)
			# Evaluate expression: L_Set3DListItem(BoundaryTypeArray, AColumn - 1, ARow - 1, ElementLayerIndex - 1, 3)
			# Start a new line
			# Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
			# Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
			# Export expression: L_GetFromList(RowList, ARow - 1); [G0]
			# Export expression: L_GetFromList(RowList, ARow - 1); [G0]
			# Export expression: RiverElevation; [G0]
			# Export expression: RiverElevation; [G0]
			# End line
			# Start a new line
			# Export expression: IBC; [G0]
			# End line
			# End if
			# End loop
			# end Loop for: Variable CellIndex from: 0 to: CellCount-1 step: 1
			# End loop
			# end Loop for: Variable ListIndex from: 0 to: ListCount-1 step: 1
			# End if
			If: NLBC>0
				Start a new line
					Export expression: "END" [G0]
				End line
			End if
			# 2.16.2
			Start a new line
				Export expression: "C.2.16.2 .. KLBC,BBLBC,ZELBC by x,y,z range {0.1-0.3};(O) - NLBC [1.7] >0" [G0]
			End line
			If: NLBC>0&UseLeakageBoundary
				# Loop over Geological Units
				Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
					Evaluate expression: ProgressBarAdvance()
					# Clear Line information
					Evaluate expression: BL_FreeVertexList()
					# Read Line information for current Unit
					If: !BL_AddVertexLayer("Vertical Aquifer Leakage Boundary NL" + ElementLayerIndex)
						Alert: "Out of Memory. Abort this process, free up memory and try again."
					End if
					Set Variable: ListIndex:= -1
					Loop for: Objects in layer: Vertical Aquifer Leakage Boundary NL[ElementLayerIndex]
						Set Variable: ListIndex:= ListIndex + 1
						# Set Variable: IBC:= "100300"
						If: BL_GetCountOfACrossRowList(ListIndex)>0
							If: !IsNA(Potential Energy per Unit Mass1)
								Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossRowList(ListIndex)-1 step: 1
									Set Variable: AColumn:= BL_GetCrossRowColumn(ListIndex, CellIndex)
									Set Variable: ARow:= BL_GetCrossRowRow(ListIndex, CellIndex)
									Start a new line
										Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
										Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
										Export expression: L_GetFromList(RowList, ARow - 1); [G0]
										Export expression: L_GetFromList(RowList, ARow - 1); [G0]
										Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
										Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
									End line
									Start a new line
										Export expression: Confining Unit Permeability; [G0]
										Export expression: 1; [G0]
										Export expression: Confining Unit Thickness; [G0]
										Export expression: 1; [G0]
										Export expression: Elevation of Opposite Side of Confining Unit; [G0]
										Export expression: 1; [G0]
									End line
								End loop
								# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossRowList(ListIndex)-1 step: 1
							End if
						End if
						# If: BL_GetCountOfACrossRowList(ListIndex)>0
					End loop
					# Loop for: Objects in layer: Vertical Aquifer Leakage Boundary NL[ElementLayerIndex]
					Set Variable: ListIndex:= -1
					Loop for: Objects in layer: Vertical Aquifer Leakage Boundary NL[ElementLayerIndex]
						Set Variable: ListIndex:= ListIndex + 1
						# Set Variable: IBC:= "200300"
						If: BL_GetCountOfACrossColumnList(ListIndex)>0
							If: !IsNA(Potential Energy per Unit Mass1)
								Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
									Set Variable: AColumn:= BL_GetCrossColumnColumn(ListIndex, CellIndex)
									Set Variable: ARow:= BL_GetCrossColumnRow(ListIndex, CellIndex)
									Start a new line
										Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
										Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
										Export expression: L_GetFromList(RowList, ARow - 1); [G0]
										Export expression: L_GetFromList(RowList, ARow - 1); [G0]
										Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
										Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
									End line
									Start a new line
										Export expression: Confining Unit Permeability; [G0]
										Export expression: 1; [G0]
										Export expression: Confining Unit Thickness; [G0]
										Export expression: 1; [G0]
										Export expression: Elevation of Opposite Side of Confining Unit; [G0]
										Export expression: 1; [G0]
									End line
								End loop
								# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
							End if
						End if
						# If: BL_GetCountOfACrossColumnList(ListIndex)>0
					End loop
					# end Loop for: Objects in layer: Vertical Aquifer Leakage Boundary NL[ElementLayerIndex]
					# Clear Line information
					Evaluate expression: BL_FreeVertexList()
					# Read Line information for current Unit
					If: !BL_AddVertexLayer("Horizontal Aquifer Leakage Boundary NL" + ElementLayerIndex)
						Alert: "Out of Memory. Abort this process, free up memory and try again."
					End if
					Set Variable: ListIndex:= -1
					Loop for: Objects in layer: Horizontal Aquifer Leakage Boundary NL[ElementLayerIndex]
						Set Variable: ListIndex:= ListIndex + 1
						# Set Variable: IBC:= "300300"
						If: ContourType()=3
							Set Variable: RowCount:= BL_GetRowNodeCount()
							Set Variable: ColumnCount:= BL_GetColumnNodeCount()
							If: !IsNA(Potential Energy per Unit Mass1)
								Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
									Set Variable: NodeX:= BL_GetColumnNodePosition(ColumnIndex)
									Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
										Set Variable: NodeY:= BL_GetRowNodePosition(RowIndex)
										# If: BL_GetCountOfCellLists()>0
										# Loop for: Variable ListIndex from: 0 to: BL_GetCountOfCellLists()-1 step: 1
										If: BL_PointInsideContour(ListIndex, NodeX, NodeY)
											Start a new line
												Export expression: NodeX; [G0]
												Export expression: NodeX; [G0]
												Export expression: NodeY; [G0]
												Export expression: NodeY; [G0]
												Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
												Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
											End line
											Start a new line
												Export expression: Confining Unit Permeability; [G0]
												Export expression: 1; [G0]
												Export expression: Confining Unit Thickness; [G0]
												Export expression: 1; [G0]
												Export expression: Elevation of Opposite Side of Confining Unit; [G0]
												Export expression: 1; [G0]
											End line
										End if
										# end if BL_PointInsideContour(ListIndex, NodeX, NodeY)
										# End loop
										# end Loop for: Variable ListIndex from: 0 to: BL_GetCountOfCellLists()-1 step: 1
										# End if
										# end If: BL_GetCountOfCellLists()>0
									End loop
									# end Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
								End loop
								# end Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
							End if
						End if
						If: BL_GetCountOfACellList(ListIndex)>0
							Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACellList(ListIndex)-1 step: 1
								Set Variable: AColumn:= BL_GetCellColumn(ListIndex, CellIndex)
								Set Variable: ARow:= BL_GetCellRow(ListIndex, CellIndex)
								If: (L_GetFrom3DList(BoundaryTypeArray, AColumn - 1, ARow - 1, ElementLayerIndex - 1)!=1)
									Start a new line
										Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
										Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
										Export expression: L_GetFromList(RowList, ARow - 1); [G0]
										Export expression: L_GetFromList(RowList, ARow - 1); [G0]
										Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
										Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
									End line
									Start a new line
										Export expression: Confining Unit Permeability; [G0]
										Export expression: 1; [G0]
										Export expression: Confining Unit Thickness; [G0]
										Export expression: 1; [G0]
										Export expression: Elevation of Opposite Side of Confining Unit; [G0]
										Export expression: 1; [G0]
									End line
								End if
							End loop
							# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
						End if
					End loop
					# End Loop for: Objects in layer: Horizontal Aquifer Leakage Boundary NL[ElementLayerIndex]
				End loop
				# end Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
			End if
			If: NLBC>0
				Start a new line
					Export expression: "END" [G0]
				End line
			End if
			# 2.16.3
			Start a new line
				Export expression: "C.....          River leakage b.c." [G0]
			End line
			Start a new line
				Export expression: "C.2.16.3 .. XR1,YR1,XR2,YR2,KRBC,BBRBC,ZERBC;(O) - NLBC [1.7] > 0" [G0]
			End line
			If: NLBC>0&UseRiverLeakage
				Evaluate expression: ProgressBarAdvance()
				# Clear Lines
				Evaluate expression: BL_FreeVertexList()
				# Read River information
				If: !BL_AddVertexLayer("River Leakage")
					Alert: "Out of Memory. Abort this process, free up memory and try again."
				End if
				Set Variable: ListCount:= BL_GetCountOfCellLists()
				Set Variable: ListIndex:= -1
				Loop for: Objects in layer: River Leakage
					Set Variable: ListIndex:= ListIndex + 1
					Set Variable: CellCount:= BL_GetCountOfACellList(ListIndex)
					Loop for: Variable CellIndex from: 0 to: CellCount-1 step: 1
						Set Variable: AColumn:= BL_GetCellColumn(ListIndex, CellIndex)
						Set Variable: ARow:= BL_GetCellRow(ListIndex, CellIndex)
						Start a new line
							Export expression: BL_SegmentFirstX(ListIndex, CellIndex, 0); [G0]
							Export expression: BL_SegmentFirstY(ListIndex, CellIndex, 0); [G0]
							Export expression: BL_SegmentSecondX(ListIndex, CellIndex, BL_SegmentCount(ListIndex, CellIndex) - 1); [G0]
							Export expression: BL_SegmentSecondY(ListIndex, CellIndex, BL_SegmentCount(ListIndex, CellIndex) - 1); [G0]
							Export expression: River Bed Permeability * River Bed Width * BL_SumSegmentLengths(ListIndex, CellIndex) / BL_GetCellArea(AColumn, ARow); [G0]
							Export expression: River Bed Thickness; [G0]
							Export expression: River Bed Top Elevation; [G0]
						End line
					End loop
					# end Loop for: Variable CellIndex from: 0 to: CellCount-1 step: 1
				End loop
				# end Loop for: Variable ListIndex from: 0 to: ListCount-1 step: 1
			End if
			# 2.16.4
			Start a new line
				Export expression: "C.2.16.4 .. End with END" [G0]
			End line
			If: NLBC>0
				Start a new line
					Export expression: "END" [G0]
				End line
			End if
			Start a new line
				Export expression: "C------------------------------------------------------------------------------" [G0]
			End line
			# 2.17.1
			Start a new line
				Export expression: "C.....     Evapotranspiration b.c." [G0]
			End line
			Evaluate expression: ProgressBarSetMessage(Message + "2.17")
			Start a new line
				Export expression: "C.2.17.1 .. IBC by x,y,z range {0.1-0.3} with no IMOD parameter;(O) -" [G0]
			End line
			Start a new line
				Export expression: "C..          NETBC [1.7] >0" [G0]
			End line
			If: NETBC>0
				# Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
				Evaluate expression: ProgressBarAdvance()
				# Clear Line information
				Evaluate expression: BL_FreeVertexList()
				# Read Line information for current Unit
				If: !BL_AddVertexLayer("Horizontal Evapotranspiration Boundary")
					Alert: "Out of Memory. Abort this process, free up memory and try again."
				End if
				Set Variable: ListIndex:= -1
				Loop for: Objects in layer: Horizontal Evapotranspiration Boundary
					Set Variable: ElementLayerIndex:= Node Layer
					Set Variable: ListIndex:= ListIndex + 1
					Set Variable: IBC:= "300700"
					If: !IsNA(Max Evapotranspiration1)
						If: ContourType()=3
							Set Variable: RowCount:= BL_GetRowNodeCount()
							Set Variable: ColumnCount:= BL_GetColumnNodeCount()
							Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
								Set Variable: NodeX:= BL_GetColumnNodePosition(ColumnIndex)
								Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
									If: (L_GetFrom3DList(BoundaryTypeArray, ColumnIndex, RowIndex, ElementLayerIndex - 1)!=1)
										Evaluate expression: L_Set3DListItem(BoundaryTypeArray, ColumnIndex, RowIndex, ElementLayerIndex - 1, 7)
										Set Variable: NodeY:= BL_GetRowNodePosition(RowIndex)
										# If: BL_GetCountOfCellLists()>0
										# Loop for: Variable ListIndex from: 0 to: BL_GetCountOfCellLists()-1 step: 1
										If: BL_PointInsideContour(ListIndex, NodeX, NodeY)
											Start a new line
												Export expression: NodeX; [G0]
												Export expression: NodeX; [G0]
												Export expression: NodeY; [G0]
												Export expression: NodeY; [G0]
												Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
												Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
											End line
											Start a new line
												Export expression: IBC [G0]
											End line
										End if
										# end if BL_PointInsideContour(ListIndex, NodeX, NodeY)
										# End loop
										# end Loop for: Variable ListIndex from: 0 to: BL_GetCountOfCellLists()-1 step: 1
										# End if
										# end If: BL_GetCountOfCellLists()>0
									End if
								End loop
								# end Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
							End loop
							# end Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
						End if
						If: BL_GetCountOfACellList(ListIndex)>0
							Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACellList(ListIndex)-1 step: 1
								Set Variable: AColumn:= BL_GetCellColumn(ListIndex, CellIndex)
								Set Variable: ARow:= BL_GetCellRow(ListIndex, CellIndex)
								If: (L_GetFrom3DList(BoundaryTypeArray, AColumn - 1, ARow - 1, ElementLayerIndex - 1)!=1)
									Evaluate expression: L_Set3DListItem(BoundaryTypeArray, AColumn - 1, ARow - 1, ElementLayerIndex - 1, 7)
									Start a new line
										Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
										Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
										Export expression: L_GetFromList(RowList, ARow - 1); [G0]
										Export expression: L_GetFromList(RowList, ARow - 1); [G0]
										Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
										Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
									End line
									Start a new line
										Export expression: IBC [G0]
									End line
								End if
							End loop
							# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
						End if
					End if
				End loop
				# end Loop for: Objects in layer: Horizontal Evapotranspiration Boundary
				# End loop
				# End Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
				Start a new line
					Export expression: "END" [G0]
				End line
			End if
			# 2.17.2
			Start a new line
				Export expression: "C.2.17.2 .. ZLSETB,BETBC by x,y,z range {0.1-0.3};(O) - NETBC [1.7] >0" [G0]
			End line
			If: NETBC>0
				# Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
				Evaluate expression: ProgressBarAdvance()
				# Clear Line information
				Evaluate expression: BL_FreeVertexList()
				# Read Line information for current Unit
				If: !BL_AddVertexLayer("Horizontal Evapotranspiration Boundary")
					Alert: "Out of Memory. Abort this process, free up memory and try again."
				End if
				Set Variable: ListIndex:= -1
				Loop for: Objects in layer: Horizontal Evapotranspiration Boundary
					Set Variable: ElementLayerIndex:= Node Layer
					Set Variable: ListIndex:= ListIndex + 1
					Set Variable: IBC:= "300700"
					If: ContourType()=3
						Set Variable: RowCount:= BL_GetRowNodeCount()
						Set Variable: ColumnCount:= BL_GetColumnNodeCount()
						If: !IsNA(Max Evapotranspiration1)
							Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
								Set Variable: NodeX:= BL_GetColumnNodePosition(ColumnIndex)
								Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
									Set Variable: NodeY:= BL_GetRowNodePosition(RowIndex)
									# If: BL_GetCountOfCellLists()>0
									# Loop for: Variable ListIndex from: 0 to: BL_GetCountOfCellLists()-1 step: 1
									If: BL_PointInsideContour(ListIndex, NodeX, NodeY)
										Start a new line
											Export expression: NodeX; [G0]
											Export expression: NodeX; [G0]
											Export expression: NodeY; [G0]
											Export expression: NodeY; [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
										End line
										Start a new line
											Export expression: Land Surface Elevation; [G0]
											Export expression: 1; [G0]
											Export expression: Evapotranspiration Extinction Depth; [G0]
											Export expression: "1 0 0"; [G0]
										End line
									End if
									# end if BL_PointInsideContour(ListIndex, NodeX, NodeY)
									# End loop
									# end Loop for: Variable ListIndex from: 0 to: BL_GetCountOfCellLists()-1 step: 1
									# End if
									# end If: BL_GetCountOfCellLists()>0
								End loop
								# end Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
							End loop
							# end Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
						End if
						If: BL_GetCountOfACellList(ListIndex)>0
							Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACellList(ListIndex)-1 step: 1
								Set Variable: AColumn:= BL_GetCellColumn(ListIndex, CellIndex)
								Set Variable: ARow:= BL_GetCellRow(ListIndex, CellIndex)
								If: (L_GetFrom3DList(BoundaryTypeArray, AColumn - 1, ARow - 1, ElementLayerIndex - 1)!=1)
									Start a new line
										Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
										Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
										Export expression: L_GetFromList(RowList, ARow - 1); [G0]
										Export expression: L_GetFromList(RowList, ARow - 1); [G0]
										Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
										Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
									End line
									Start a new line
										Export expression: Land Surface Elevation; [G0]
										Export expression: 1; [G0]
										Export expression: Evapotranspiration Extinction Depth; [G0]
										Export expression: "1 0 0"; [G0]
									End line
								End if
							End loop
							# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
						End if
					End if
				End loop
				# end Loop for: Objects in layer: Horizontal Evapotranspiration Boundary
				# End loop
				# End Loop over Geological units
				Start a new line
					Export expression: "END" [G0]
				End line
			End if
			Start a new line
				Export expression: "C------------------------------------------------------------------------------" [G0]
			End line
			# 2.18.1
			Start a new line
				Export expression: "C.....     Aquifer influence functions" [G0]
			End line
			Evaluate expression: ProgressBarSetMessage(Message + "2.18")
			Start a new line
				Export expression: "C.2.18.1 .. IBC by x,y,z range {0.1-0.3} with no IMOD parameter;(O) -" [G0]
			End line
			Start a new line
				Export expression: "C..          NAIFC [1.7] > 0" [G0]
			End line
			If: NAIFC>0
				Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
					Evaluate expression: ProgressBarAdvance()
					# Clear Line information
					Evaluate expression: BL_FreeVertexList()
					# Read Line information for current Unit
					If: !BL_AddVertexLayer("Vertical Aquifer Influence Boundary NL" + ElementLayerIndex)
						Alert: "Out of Memory. Abort this process, free up memory and try again."
					End if
					Set Variable: ListIndex:= -1
					Loop for: Objects in layer: Vertical Aquifer Influence Boundary NL[ElementLayerIndex]
						Set Variable: ListIndex:= ListIndex + 1
						Set Variable: IBC:= "100400"
						If: !IsNA(Density1)
							If: BL_GetCountOfACrossRowList(ListIndex)>0
								Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossRowList(ListIndex)-1 step: 1
									Set Variable: AColumn:= BL_GetCrossRowColumn(ListIndex, CellIndex)
									Set Variable: ARow:= BL_GetCrossRowRow(ListIndex, CellIndex)
									If: (L_GetFrom3DList(BoundaryTypeArray, AColumn - 1, ARow - 1, ElementLayerIndex - 1)!=1)
										Evaluate expression: L_Set3DListItem(BoundaryTypeArray, AColumn - 1, ARow - 1, ElementLayerIndex - 1, 4)
										Start a new line
											Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
											Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
											Export expression: L_GetFromList(RowList, ARow - 1); [G0]
											Export expression: L_GetFromList(RowList, ARow - 1); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
										End line
										Start a new line
											Export expression: IBC [G0]
										End line
									End if
								End loop
								# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossRowList(ListIndex)-1 step: 1
							End if
							# If: BL_GetCountOfACrossRowList(ListIndex)>0
						End if
					End loop
					# Loop for: Objects in layer: Vertical Aquifer Influence Boundary NL[ElementLayerIndex]
					Set Variable: ListIndex:= -1
					Loop for: Objects in layer: Vertical Aquifer Influence Boundary NL[ElementLayerIndex]
						Set Variable: ListIndex:= ListIndex + 1
						Set Variable: IBC:= "200400"
						If: !IsNA(Density1)
							If: BL_GetCountOfACrossColumnList(ListIndex)>0
								Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
									Set Variable: AColumn:= BL_GetCrossColumnColumn(ListIndex, CellIndex)
									Set Variable: ARow:= BL_GetCrossColumnRow(ListIndex, CellIndex)
									If: (L_GetFrom3DList(BoundaryTypeArray, AColumn - 1, ARow - 1, ElementLayerIndex - 1)!=1)
										Evaluate expression: L_Set3DListItem(BoundaryTypeArray, AColumn - 1, ARow - 1, ElementLayerIndex - 1, 4)
										Start a new line
											Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
											Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
											Export expression: L_GetFromList(RowList, ARow - 1); [G0]
											Export expression: L_GetFromList(RowList, ARow - 1); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
										End line
										Start a new line
											Export expression: IBC [G0]
										End line
									End if
								End loop
								# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
							End if
							# If: BL_GetCountOfACrossColumnList(ListIndex)>0
						End if
					End loop
					# Loop for: Objects in layer: Vertical Aquifer Influence Boundary NL[ElementLayerIndex]
					# Clear Line information
					Evaluate expression: BL_FreeVertexList()
					# Read Line information for current Unit
					If: !BL_AddVertexLayer("Horizontal Aquifer Influence Boundary NL" + ElementLayerIndex)
						Alert: "Out of Memory. Abort this process, free up memory and try again."
					End if
					Set Variable: ListIndex:= -1
					Loop for: Objects in layer: Horizontal Aquifer Influence Boundary NL[ElementLayerIndex]
						Set Variable: ListIndex:= ListIndex + 1
						Set Variable: IBC:= "300400"
						If: !IsNA(Density1)
							If: ContourType()=3
								Set Variable: RowCount:= BL_GetRowNodeCount()
								Set Variable: ColumnCount:= BL_GetColumnNodeCount()
								Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
									Set Variable: NodeX:= BL_GetColumnNodePosition(ColumnIndex)
									Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
										If: (L_GetFrom3DList(BoundaryTypeArray, ColumnIndex, RowIndex, ElementLayerIndex - 1)!=1)
											Evaluate expression: L_Set3DListItem(BoundaryTypeArray, ColumnIndex, RowIndex, ElementLayerIndex - 1, 4)
											Set Variable: NodeY:= BL_GetRowNodePosition(RowIndex)
											# If: BL_GetCountOfCellLists()>0
											# Loop for: Variable ListIndex from: 0 to: BL_GetCountOfCellLists()-1 step: 1
											If: BL_PointInsideContour(ListIndex, NodeX, NodeY)
												Start a new line
													Export expression: NodeX; [G0]
													Export expression: NodeX; [G0]
													Export expression: NodeY; [G0]
													Export expression: NodeY; [G0]
													Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
													Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
												End line
												Start a new line
													Export expression: IBC [G0]
												End line
											End if
											# end if BL_PointInsideContour(ListIndex, NodeX, NodeY)
											# End loop
											# end Loop for: Variable ListIndex from: 0 to: BL_GetCountOfCellLists()-1 step: 1
											# End if
											# end If: BL_GetCountOfCellLists()>0
										End if
									End loop
									# end Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
								End loop
								# end Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
							End if
							If: BL_GetCountOfACellList(ListIndex)>0
								Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACellList(ListIndex)-1 step: 1
									Set Variable: AColumn:= BL_GetCellColumn(ListIndex, CellIndex)
									Set Variable: ARow:= BL_GetCellRow(ListIndex, CellIndex)
									If: (L_GetFrom3DList(BoundaryTypeArray, AColumn - 1, ARow - 1, ElementLayerIndex - 1)!=1)
										Evaluate expression: L_Set3DListItem(BoundaryTypeArray, AColumn - 1, ARow - 1, ElementLayerIndex - 1, 4)
										Start a new line
											Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
											Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
											Export expression: L_GetFromList(RowList, ARow - 1); [G0]
											Export expression: L_GetFromList(RowList, ARow - 1); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
										End line
										Start a new line
											Export expression: IBC [G0]
										End line
									End if
								End loop
								# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
							End if
						End if
					End loop
					# end Loop for: Objects in layer: Horizontal Aquifer Influence Boundary NL[ElementLayerIndex]
				End loop
				# End Loop over Geological units
				Start a new line
					Export expression: "END" [G0]
				End line
			End if
			# 2.18.2
			Start a new line
				Export expression: "C.2.18.2 .. UVAIFC by x,y,z range {0.1-0.3};(O) - NAIFC [1.7] > 0" [G0]
			End line
			If: NAIFC>0
				If: UseAquifInflWeighting
					Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
						Evaluate expression: ProgressBarAdvance()
						# Clear Line information
						Evaluate expression: BL_FreeVertexList()
						# Read Line information for current Unit
						If: !BL_AddVertexLayer("Vertical Aquifer Influence Boundary NL" + ElementLayerIndex)
							Alert: "Out of Memory. Abort this process, free up memory and try again."
						End if
						Set Variable: ListIndex:= -1
						Loop for: Objects in layer: Vertical Aquifer Influence Boundary NL[ElementLayerIndex]
							Set Variable: ListIndex:= ListIndex + 1
							If: !IsNA(Weighting Factor)
								If: BL_GetCountOfACrossRowList(ListIndex)>0
									Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossRowList(ListIndex)-1 step: 1
										Set Variable: AColumn:= BL_GetCrossRowColumn(ListIndex, CellIndex)
										Set Variable: ARow:= BL_GetCrossRowRow(ListIndex, CellIndex)
										Start a new line
											Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
											Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
											Export expression: L_GetFromList(RowList, ARow - 1); [G0]
											Export expression: L_GetFromList(RowList, ARow - 1); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
										End line
										Start a new line
											Export expression: Weighting Factor; [G0]
											Export expression: 1; [G0]
										End line
									End loop
									# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossRowList(ListIndex)-1 step: 1
								End if
								# If: BL_GetCountOfACrossRowList(ListIndex)>0
							End if
						End loop
						# Loop for: Objects in layer: Vertical Aquifer Influence Boundary NL[ElementLayerIndex]
						Set Variable: ListIndex:= -1
						Loop for: Objects in layer: Vertical Aquifer Influence Boundary NL[ElementLayerIndex]
							Set Variable: ListIndex:= ListIndex + 1
							If: !IsNA(Weighting Factor)
								If: BL_GetCountOfACrossColumnList(ListIndex)>0
									Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
										Set Variable: AColumn:= BL_GetCrossColumnColumn(ListIndex, CellIndex)
										Set Variable: ARow:= BL_GetCrossColumnRow(ListIndex, CellIndex)
										Start a new line
											Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
											Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
											Export expression: L_GetFromList(RowList, ARow - 1); [G0]
											Export expression: L_GetFromList(RowList, ARow - 1); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
										End line
										Start a new line
											Export expression: Weighting Factor; [G0]
											Export expression: 1; [G0]
										End line
									End loop
									# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
								End if
								# If: BL_GetCountOfACrossColumnList(ListIndex)>0
							End if
						End loop
						# Loop for: Objects in layer: Vertical Aquifer Influence Boundary NL[ElementLayerIndex]
						# Clear Line information
						Evaluate expression: BL_FreeVertexList()
						# Read Line information for current Unit
						If: !BL_AddVertexLayer("Horizontal Aquifer Influence Boundary NL" + ElementLayerIndex)
							Alert: "Out of Memory. Abort this process, free up memory and try again."
						End if
						Set Variable: ListIndex:= -1
						Loop for: Objects in layer: Horizontal Aquifer Influence Boundary NL[ElementLayerIndex]
							Set Variable: ListIndex:= ListIndex + 1
							If: !IsNA(Weighting Factor)
								If: ContourType()=3
									Set Variable: RowCount:= BL_GetRowNodeCount()
									Set Variable: ColumnCount:= BL_GetColumnNodeCount()
									Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
										Set Variable: NodeX:= BL_GetColumnNodePosition(ColumnIndex)
										Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
											Set Variable: NodeY:= BL_GetRowNodePosition(RowIndex)
											# If: BL_GetCountOfCellLists()>0
											# Loop for: Variable ListIndex from: 0 to: BL_GetCountOfCellLists()-1 step: 1
											If: BL_PointInsideContour(ListIndex, NodeX, NodeY)
												Start a new line
													Export expression: NodeX; [G0]
													Export expression: NodeX; [G0]
													Export expression: NodeY; [G0]
													Export expression: NodeY; [G0]
													Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
													Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
												End line
												Start a new line
													Export expression: Weighting Factor; [G0]
													Export expression: 1; [G0]
												End line
											End if
											# end if BL_PointInsideContour(ListIndex, NodeX, NodeY)
											# End loop
											# end Loop for: Variable ListIndex from: 0 to: BL_GetCountOfCellLists()-1 step: 1
											# End if
											# end If: BL_GetCountOfCellLists()>0
										End loop
										# end Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
									End loop
									# end Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
								End if
								If: BL_GetCountOfACrossColumnList(ListIndex)>0
									Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACellList(ListIndex)-1 step: 1
										Set Variable: AColumn:= BL_GetCellColumn(ListIndex, CellIndex)
										Set Variable: ARow:= BL_GetCellRow(ListIndex, CellIndex)
										If: (L_GetFrom3DList(BoundaryTypeArray, AColumn - 1, ARow - 1, ElementLayerIndex - 1)!=1)
											Start a new line
												Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
												Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
												Export expression: L_GetFromList(RowList, ARow - 1); [G0]
												Export expression: L_GetFromList(RowList, ARow - 1); [G0]
												Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
												Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
											End line
											Start a new line
												Export expression: Weighting Factor; [G0]
												Export expression: 1; [G0]
											End line
										End if
									End loop
									# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
								End if
							End if
						End loop
						# end Loop for: Objects in layer: Horizontal Aquifer Influence Boundary NL[ElementLayerIndex]
					End loop
					# End Loop over Geological units
				End if
				Start a new line
					Export expression: "END" [G0]
				End line
			End if
			# 2.18.3
			Start a new line
				Export expression: "C.2.18.3 .. IAIF;(O) - NAIFC [1.7] > 0" [G0]
			End line
			If: NAIFC>0
				Start a new line
					Export expression: IAIF [G0]
				End line
			End if
			# 2.18.4
			If: NAIFC>0
				If: IAIF=1
					# 2.18.4a
					Start a new line
						Export expression: "C.....          Pot  a.i.f." [G0]
					End line
					Start a new line
						Export expression: "C.2.18.4A .. ABOAR,POROAR,VOAR;(O) - IAIF [2.18.3] = 1" [G0]
					End line
					Start a new line
						Export expression: ABOAR; [G0]
						Export expression: POROAR; [G0]
						Export expression: VOAR; [G0]
					End line
				Else
					Start a new line
						Export expression: "C.....          Transient, Carter-Tracy a.i.f." [G0]
					End line
					Start a new line
						Export expression: "C.2.18.4B .. KOAR,ABOAR,VISOAR,POROAR,BOAR,RIOAR,ANGOAR;(O) - IAIF [2.18.3] = 2; VISOAR Pa-s or cP" [G0]
					End line
					Start a new line
						# 2.18.4B
						Export expression: KOAR; [G0]
						Export expression: ABOAR; [G0]
						Export expression: VISOAR; [G0]
						Export expression: POROAR; [G0]
						Export expression: BOAR; [G0]
						Export expression: RIOAR; [G0]
						Export expression: ANGOAR; [G0]
					End line
				End if
			End if
			Start a new line
				Export expression: "C------------------------------------------------------------------------------" [G0]
			End line
			Start a new line
				Export expression: "C.....     Heat conduction b.c." [G0]
			End line
			# 2.19.1
			Evaluate expression: ProgressBarSetMessage(Message + "2.19")
			Start a new line
				Export expression: "C.2.19.1 .. ZHCBC(K);(O) - HEAT [1.4] and NHCBC [1.7] > 0" [G0]
			End line
			If: HEAT&(NHCBC>0)
				Loop for: Variable BoundaryIndex from: 1 to: NHCN step: 1
					Start a new line
						Export expression: HST3D_HeatNodeLoc(BoundaryIndex); [G0]
					End line
				End loop
			End if
			# 2.19.2
			Start a new line
				Export expression: "C.2.19.2 .. IBC by x,y,z range {0.1-0.3} with no IMOD parameter;(O) - " [G0]
			End line
			Start a new line
				Export expression: "C..          HEAT [1.4] and NHCBC [1.7] > 0" [G0]
			End line
			If: HEAT&(NHCBC>0)
				Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
					Evaluate expression: ProgressBarAdvance()
					# Clear Line information
					Evaluate expression: BL_FreeVertexList()
					# Read Line information for current Unit
					If: !BL_AddVertexLayer("Vertical Heat Conduction Boundary NL" + ElementLayerIndex)
						Alert: "Out of Memory. Abort this process, free up memory and try again."
					End if
					Set Variable: ListIndex:= -1
					Loop for: Objects in layer: Vertical Heat Conduction Boundary NL[ElementLayerIndex]
						Set Variable: ListIndex:= ListIndex + 1
						Set Variable: IBC:= "100040"
						If: BL_GetCountOfACrossRowList(ListIndex)>0
							Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossRowList(ListIndex)-1 step: 1
								Set Variable: AColumn:= BL_GetCrossRowColumn(ListIndex, CellIndex)
								Set Variable: ARow:= BL_GetCrossRowRow(ListIndex, CellIndex)
								If: (L_GetFrom3DList(BoundaryTypeArray, AColumn - 1, ARow - 1, ElementLayerIndex - 1)!=1)
									Evaluate expression: L_Set3DListItem(BoundaryTypeArray, AColumn - 1, ARow - 1, ElementLayerIndex - 1, 5)
									Start a new line
										Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
										Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
										Export expression: L_GetFromList(RowList, ARow - 1); [G0]
										Export expression: L_GetFromList(RowList, ARow - 1); [G0]
										Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
										Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
									End line
									Start a new line
										Export expression: IBC [G0]
									End line
								End if
							End loop
							# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossRowList(ListIndex)-1 step: 1
						End if
						# If: BL_GetCountOfACrossRowList(ListIndex)>0
					End loop
					# Loop for: Objects in layer: Vertical Heat Conduction Boundary NL[ElementLayerIndex]
					Set Variable: ListIndex:= -1
					Loop for: Objects in layer: Vertical Heat Conduction Boundary NL[ElementLayerIndex]
						Set Variable: ListIndex:= ListIndex + 1
						Set Variable: IBC:= "200040"
						If: BL_GetCountOfACrossColumnList(ListIndex)>0
							Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
								Set Variable: AColumn:= BL_GetCrossColumnColumn(ListIndex, CellIndex)
								Set Variable: ARow:= BL_GetCrossColumnRow(ListIndex, CellIndex)
								If: (L_GetFrom3DList(BoundaryTypeArray, AColumn - 1, ARow - 1, ElementLayerIndex - 1)!=1)
									Evaluate expression: L_Set3DListItem(BoundaryTypeArray, AColumn - 1, ARow - 1, ElementLayerIndex - 1, 5)
									Start a new line
										Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
										Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
										Export expression: L_GetFromList(RowList, ARow - 1); [G0]
										Export expression: L_GetFromList(RowList, ARow - 1); [G0]
										Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
										Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
									End line
									Start a new line
										Export expression: IBC [G0]
									End line
								End if
							End loop
							# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
						End if
						# If: BL_GetCountOfACrossColumnList(ListIndex)>0
					End loop
					# end Loop for: Objects in layer: Vertical Heat Conduction Boundary NL[ElementLayerIndex]
					# Clear Line information
					Evaluate expression: BL_FreeVertexList()
					# Read Line information for current Unit
					If: !BL_AddVertexLayer("Horizontal Heat Conduction Boundary NL" + ElementLayerIndex)
						Alert: "Out of Memory. Abort this process, free up memory and try again."
					End if
					Set Variable: ListIndex:= -1
					Loop for: Objects in layer: Horizontal Heat Conduction Boundary NL[ElementLayerIndex]
						Set Variable: ListIndex:= ListIndex + 1
						Set Variable: IBC:= "300040"
						If: ContourType()=3
							Set Variable: RowCount:= BL_GetRowNodeCount()
							Set Variable: ColumnCount:= BL_GetColumnNodeCount()
							Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
								Set Variable: NodeX:= BL_GetColumnNodePosition(ColumnIndex)
								Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
									If: (L_GetFrom3DList(BoundaryTypeArray, ColumnIndex, RowIndex, ElementLayerIndex - 1)!=1)
										Evaluate expression: L_Set3DListItem(BoundaryTypeArray, ColumnIndex, RowIndex, ElementLayerIndex - 1, 5)
										Set Variable: NodeY:= BL_GetRowNodePosition(RowIndex)
										# If: BL_GetCountOfCellLists()>0
										# Loop for: Variable ListIndex from: 0 to: BL_GetCountOfCellLists()-1 step: 1
										If: BL_PointInsideContour(ListIndex, NodeX, NodeY)
											Start a new line
												Export expression: NodeX; [G0]
												Export expression: NodeX; [G0]
												Export expression: NodeY; [G0]
												Export expression: NodeY; [G0]
												Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
												Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
											End line
											Start a new line
												Export expression: IBC [G0]
											End line
										End if
										# end if BL_PointInsideContour(ListIndex, NodeX, NodeY)
										# End loop
										# end Loop for: Variable ListIndex from: 0 to: BL_GetCountOfCellLists()-1 step: 1
										# End if
										# end If: BL_GetCountOfCellLists()>0
									End if
								End loop
								# end Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
							End loop
							# end Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
						End if
						If: BL_GetCountOfACellList(ListIndex)>0
							Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACellList(ListIndex)-1 step: 1
								Set Variable: AColumn:= BL_GetCellColumn(ListIndex, CellIndex)
								Set Variable: ARow:= BL_GetCellRow(ListIndex, CellIndex)
								If: (L_GetFrom3DList(BoundaryTypeArray, AColumn - 1, ARow - 1, ElementLayerIndex - 1)!=1)
									Evaluate expression: L_Set3DListItem(BoundaryTypeArray, AColumn - 1, ARow - 1, ElementLayerIndex - 1, 5)
									Start a new line
										Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
										Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
										Export expression: L_GetFromList(RowList, ARow - 1); [G0]
										Export expression: L_GetFromList(RowList, ARow - 1); [G0]
										Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
										Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
									End line
									Start a new line
										Export expression: IBC [G0]
									End line
								End if
							End loop
							# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
						End if
					End loop
					# end Loop for: Objects in layer: Horizontal Heat Conduction Boundary NL[ElementLayerIndex]
				End loop
				# End Loop over Geological units
				Start a new line
					Export expression: "END" [G0]
				End line
			End if
			# 2.19.3
			Start a new line
				Export expression: "C.2.19.3 .. DTHHC by x,y,z range {0.1-0.3} for HCBC nodes;(O) -" [G0]
			End line
			Start a new line
				Export expression: "C..          HEAT [1.4] and NHCBC [1.7] > 0; DTHHC generic time units" [G0]
			End line
			If: HEAT&(NHCBC>0)
				# Clear Line information
				Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
					Evaluate expression: ProgressBarAdvance()
					Evaluate expression: BL_FreeVertexList()
					# Read Line information for current Unit
					If: !BL_AddVertexLayer("Vertical Heat Conduction Boundary NL" + ElementLayerIndex)
						Alert: "Out of Memory. Abort this process, free up memory and try again."
					End if
					Set Variable: ListIndex:= -1
					Loop for: Objects in layer: Vertical Heat Conduction Boundary NL[ElementLayerIndex]
						Set Variable: ListIndex:= ListIndex + 1
						If: BL_GetCountOfACrossRowList(ListIndex)>0
							Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossRowList(ListIndex)-1 step: 1
								Set Variable: AColumn:= BL_GetCrossRowColumn(ListIndex, CellIndex)
								Set Variable: ARow:= BL_GetCrossRowRow(ListIndex, CellIndex)
								Start a new line
									Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
									Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
									Export expression: L_GetFromList(RowList, ARow - 1); [G0]
									Export expression: L_GetFromList(RowList, ARow - 1); [G0]
									Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
									Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
								End line
								Start a new line
									Export expression: Thermal Diffusivity; [G0]
									Export expression: 1; [G0]
								End line
							End loop
							# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossRowList(ListIndex)-1 step: 1
						End if
						# If: BL_GetCountOfACrossRowList(ListIndex)>0
					End loop
					# Loop for: Objects in layer: Vertical Heat Conduction Boundary NL[ElementLayerIndex]
					Set Variable: ListIndex:= -1
					Loop for: Objects in layer: Vertical Heat Conduction Boundary NL[ElementLayerIndex]
						Set Variable: ListIndex:= ListIndex + 1
						If: BL_GetCountOfACrossColumnList(ListIndex)>0
							Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
								Set Variable: AColumn:= BL_GetCrossColumnColumn(ListIndex, CellIndex)
								Set Variable: ARow:= BL_GetCrossColumnRow(ListIndex, CellIndex)
								Start a new line
									Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
									Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
									Export expression: L_GetFromList(RowList, ARow - 1); [G0]
									Export expression: L_GetFromList(RowList, ARow - 1); [G0]
									Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
									Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
								End line
								Start a new line
									Export expression: Thermal Diffusivity; [G0]
									Export expression: 1; [G0]
								End line
							End loop
							# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
						End if
						# If: BL_GetCountOfACrossColumnList(ListIndex)>0
					End loop
					# Loop for: Objects in layer: Vertical Heat Conduction Boundary NL[ElementLayerIndex]
					# Clear Line information
					Evaluate expression: BL_FreeVertexList()
					# Read Line information for current Unit
					If: !BL_AddVertexLayer("Horizontal Heat Conduction Boundary NL" + ElementLayerIndex)
						Alert: "Out of Memory. Abort this process, free up memory and try again."
					End if
					Set Variable: ListIndex:= -1
					Loop for: Objects in layer: Horizontal Heat Conduction Boundary NL[ElementLayerIndex]
						Set Variable: ListIndex:= ListIndex + 1
						If: ContourType()=3
							Set Variable: RowCount:= BL_GetRowNodeCount()
							Set Variable: ColumnCount:= BL_GetColumnNodeCount()
							Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
								Set Variable: NodeX:= BL_GetColumnNodePosition(ColumnIndex)
								Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
									Set Variable: NodeY:= BL_GetRowNodePosition(RowIndex)
									# If: BL_GetCountOfCellLists()>0
									# Loop for: Variable ListIndex from: 0 to: BL_GetCountOfCellLists()-1 step: 1
									If: BL_PointInsideContour(ListIndex, NodeX, NodeY)
										Start a new line
											Export expression: NodeX; [G0]
											Export expression: NodeX; [G0]
											Export expression: NodeY; [G0]
											Export expression: NodeY; [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
										End line
										Start a new line
											Export expression: Thermal Diffusivity; [G0]
											Export expression: 1; [G0]
										End line
									End if
									# end if BL_PointInsideContour(ListIndex, NodeX, NodeY)
									# End loop
									# end Loop for: Variable ListIndex from: 0 to: BL_GetCountOfCellLists()-1 step: 1
									# End if
									# end If: BL_GetCountOfCellLists()>0
								End loop
								# end Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
							End loop
							# end Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
						End if
						If: BL_GetCountOfACellList(ListIndex)>0
							Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACellList(ListIndex)-1 step: 1
								Set Variable: AColumn:= BL_GetCellColumn(ListIndex, CellIndex)
								Set Variable: ARow:= BL_GetCellRow(ListIndex, CellIndex)
								If: (L_GetFrom3DList(BoundaryTypeArray, AColumn - 1, ARow - 1, ElementLayerIndex - 1)!=1)
									Start a new line
										Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
										Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
										Export expression: L_GetFromList(RowList, ARow - 1); [G0]
										Export expression: L_GetFromList(RowList, ARow - 1); [G0]
										Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
										Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
									End line
									Start a new line
										Export expression: Thermal Diffusivity; [G0]
										Export expression: 1; [G0]
									End line
								End if
							End loop
							# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
						End if
					End loop
					# end Loop for: Objects in layer: Horizontal Heat Conduction Boundary NL[ElementLayerIndex]
				End loop
				# End Loop over Geological units
				Start a new line
					Export expression: "END" [G0]
				End line
			End if
			# 2.19.4
			Start a new line
				Export expression: "C.2.19.4 .. KHCBC by x,y,z range {0.1-0.3} for HCBC nodes;(O) -" [G0]
			End line
			Start a new line
				Export expression: "C..          HEAT [1.4] and NHCBC [1.7] > 0; KHCBC specific units  W/m-degC or BTU/h-ft-degF" [G0]
			End line
			If: HEAT&(NHCBC>0)
				# Clear Line information
				Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
					Evaluate expression: ProgressBarAdvance()
					Evaluate expression: BL_FreeVertexList()
					# Read Line information for current Unit
					If: !BL_AddVertexLayer("Vertical Heat Conduction Boundary NL" + ElementLayerIndex)
						Alert: "Out of Memory. Abort this process, free up memory and try again."
					End if
					Set Variable: ListIndex:= -1
					Loop for: Objects in layer: Vertical Heat Conduction Boundary NL[ElementLayerIndex]
						Set Variable: ListIndex:= ListIndex + 1
						If: BL_GetCountOfACrossRowList(ListIndex)>0
							Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossRowList(ListIndex)-1 step: 1
								Set Variable: AColumn:= BL_GetCrossRowColumn(ListIndex, CellIndex)
								Set Variable: ARow:= BL_GetCrossRowRow(ListIndex, CellIndex)
								Start a new line
									Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
									Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
									Export expression: L_GetFromList(RowList, ARow - 1); [G0]
									Export expression: L_GetFromList(RowList, ARow - 1); [G0]
									Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
									Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
								End line
								Start a new line
									Export expression: Thermal conductivity; [G0]
									Export expression: 1; [G0]
								End line
							End loop
							# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossRowList(ListIndex)-1 step: 1
						End if
						# If: BL_GetCountOfACrossRowList(ListIndex)>0
					End loop
					# Loop for: Objects in layer: Vertical Heat Conduction Boundary NL[ElementLayerIndex]
					Set Variable: ListIndex:= -1
					Loop for: Objects in layer: Vertical Heat Conduction Boundary NL[ElementLayerIndex]
						Set Variable: ListIndex:= ListIndex + 1
						If: BL_GetCountOfACrossColumnList(ListIndex)>0
							Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
								Set Variable: AColumn:= BL_GetCrossColumnColumn(ListIndex, CellIndex)
								Set Variable: ARow:= BL_GetCrossColumnRow(ListIndex, CellIndex)
								Start a new line
									Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
									Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
									Export expression: L_GetFromList(RowList, ARow - 1); [G0]
									Export expression: L_GetFromList(RowList, ARow - 1); [G0]
									Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
									Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
								End line
								Start a new line
									Export expression: Thermal conductivity; [G0]
									Export expression: 1; [G0]
								End line
							End loop
							# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
						End if
						# If: BL_GetCountOfACrossColumnList(ListIndex)>0
					End loop
					# Loop for: Objects in layer: Vertical Heat Conduction Boundary NL[ElementLayerIndex]
					# Clear Line information
					Evaluate expression: BL_FreeVertexList()
					# Read Line information for current Unit
					If: !BL_AddVertexLayer("Horizontal Heat Conduction Boundary NL" + ElementLayerIndex)
						Alert: "Out of Memory. Abort this process, free up memory and try again."
					End if
					Set Variable: ListIndex:= -1
					Loop for: Objects in layer: Horizontal Heat Conduction Boundary NL[ElementLayerIndex]
						Set Variable: ListIndex:= ListIndex + 1
						If: ContourType()=3
							Set Variable: RowCount:= BL_GetRowNodeCount()
							Set Variable: ColumnCount:= BL_GetColumnNodeCount()
							Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
								Set Variable: NodeX:= BL_GetColumnNodePosition(ColumnIndex)
								Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
									Set Variable: NodeY:= BL_GetRowNodePosition(RowIndex)
									# If: BL_GetCountOfCellLists()>0
									# Loop for: Variable ListIndex from: 0 to: BL_GetCountOfCellLists()-1 step: 1
									If: BL_PointInsideContour(ListIndex, NodeX, NodeY)
										Start a new line
											Export expression: NodeX; [G0]
											Export expression: NodeX; [G0]
											Export expression: NodeY; [G0]
											Export expression: NodeY; [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
										End line
										Start a new line
											Export expression: Thermal conductivity; [G0]
											Export expression: 1; [G0]
										End line
									End if
									# end if BL_PointInsideContour(ListIndex, NodeX, NodeY)
									# End loop
									# end Loop for: Variable ListIndex from: 0 to: BL_GetCountOfCellLists()-1 step: 1
									# End if
									# end If: BL_GetCountOfCellLists()>0
								End loop
								# end Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
							End loop
							# end Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
						End if
						If: BL_GetCountOfACellList(ListIndex)>0
							Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACellList(ListIndex)-1 step: 1
								Set Variable: AColumn:= BL_GetCellColumn(ListIndex, CellIndex)
								Set Variable: ARow:= BL_GetCellRow(ListIndex, CellIndex)
								If: (L_GetFrom3DList(BoundaryTypeArray, AColumn - 1, ARow - 1, ElementLayerIndex - 1)!=1)
									Start a new line
										Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
										Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
										Export expression: L_GetFromList(RowList, ARow - 1); [G0]
										Export expression: L_GetFromList(RowList, ARow - 1); [G0]
										Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
										Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
									End line
									Start a new line
										Export expression: Thermal conductivity; [G0]
										Export expression: 1; [G0]
									End line
								End if
							End loop
							# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
						End if
					End loop
					# end Loop for: Objects in layer: Horizontal Heat Conduction Boundary NL[ElementLayerIndex]
				End loop
				# End Loop over Geological units
				Start a new line
					Export expression: "END" [G0]
				End line
			End if
			Start a new line
				Export expression: "C------------------------------------------------------------------------------" [G0]
			End line
			# 2.20
			Start a new line
				Export expression: "C.....Free surface b.c." [G0]
			End line
			Evaluate expression: ProgressBarAdvance()
			Evaluate expression: ProgressBarSetMessage(Message + "2.20")
			Start a new line
				Export expression: "C.2.20 .. FRESUR[T/F]" [G0]
			End line
			Start a new line
				If: FRESUR
					Export expression: "T"; [G0]
				Else
					Export expression: "F" [G0]
				End if
			End line
			Start a new line
				Export expression: "C------------------------------------------------------------------------------" [G0]
			End line
			Start a new line
				Export expression: "C.....Initial condition information" [G0]
			End line
			# 2.21
			Evaluate expression: ProgressBarAdvance()
			Evaluate expression: ProgressBarSetMessage(Message + "2.21")
			Start a new line
				Export expression: "C.2.21.1 .. ICHYDP[T/F]" [G0]
			End line
			Start a new line
				If: ICHYDP
					Export expression: "T"; [G0]
				Else
					Export expression: "F"; [G0]
				End if
			End line
			Start a new line
				Export expression: "C.2.21.2 .. ICHWT[T/F];(O) - FRESUR [2.20]" [G0]
			End line
			If: FRESUR
				Start a new line
					If: ICHWT
						Export expression: "T" [G0]
					Else
						Export expression: "F" [G0]
					End if
				End line
			End if
			Start a new line
				Export expression: "C.2.21.3A .. ZPINIT,PINIT;(O) - ICHYDP [2.21.1] and NOT ICHWT [2.21.2]" [G0]
			End line
			If: ICHYDP&!ICHWT
				Start a new line
					Export expression: ZPINIT; [G0]
					Export expression: PINIT; [G0]
				End line
			End if
			# 2.21.3B
			Start a new line
				Export expression: "C.2.21.3B .. P by x,y,z range {0.1-0.3};(O) - NOT ICHYDP [2.21.1] and" [G0]
			End line
			Start a new line
				Export expression: "C..          NOT ICHWT [2.21.2]" [G0]
			End line
			If: !ICHYDP&!ICHWT
				Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
					Evaluate expression: ProgressBarAdvance()
					# Clear Line information
					Evaluate expression: BL_FreeVertexList()
					# Read Line information for current Unit
					If: !BL_AddVertexLayer("Initial Pressure NL" + ElementLayerIndex)
						Alert: "Out of Memory. Abort this process, free up memory and try again."
					End if
					Set Variable: ListIndex:= -1
					Loop for: Objects in layer: Initial Pressure NL[ElementLayerIndex]
						Set Variable: CurrentContourType:= ContourType()
						Set Variable: ListIndex:= ListIndex + 1
						If: ContourType()=3
							Set Variable: RowCount:= BL_GetRowNodeCount()
							Set Variable: ColumnCount:= BL_GetColumnNodeCount()
							Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
								Set Variable: NodeX:= BL_GetColumnNodePosition(ColumnIndex)
								Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
									Set Variable: NodeY:= BL_GetRowNodePosition(RowIndex)
									# If: BL_GetCountOfCellLists()>0
									# Loop for: Variable ListIndex from: 0 to: BL_GetCountOfCellLists()-1 step: 1
									If: BL_PointInsideContour(ListIndex, NodeX, NodeY)
										Start a new line
											Export expression: NodeX; [G0]
											Export expression: NodeX; [G0]
											Export expression: NodeY; [G0]
											Export expression: NodeY; [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
										End line
										Start a new line
											Export expression: Initial Pressure NL[ElementLayerIndex]; [G0]
											Export expression: 1; [G0]
										End line
									End if
									# end if BL_PointInsideContour(ListIndex, NodeX, NodeY)
									# End loop
									# end Loop for: Variable ListIndex from: 0 to: BL_GetCountOfCellLists()-1 step: 1
									# End if
									# end If: BL_GetCountOfCellLists()>0
								End loop
								# end Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
							End loop
							# end Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
						End if
						Set Variable: CurrentContourType:= ContourType()
						Set Variable: P:= Initial Pressure NL[ElementLayerIndex]
						If: InterpInitPres&(CurrentContourType=2)
							Set Variable: P_End:= End Initial Pressure NL[ElementLayerIndex]
						Else
							Set Variable: P_End:= $N/A
						End if
						If: IsNumber(P)&(BL_GetCountOfACellList(ListIndex)>0)
							Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACellList(ListIndex)-1 step: 1
								Set Variable: AColumn:= BL_GetCellColumn(ListIndex, CellIndex)
								Set Variable: ARow:= BL_GetCellRow(ListIndex, CellIndex)
								Start a new line
									Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
									Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
									Export expression: L_GetFromList(RowList, ARow - 1); [G0]
									Export expression: L_GetFromList(RowList, ARow - 1); [G0]
									Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
									Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
								End line
								Start a new line
									If: InterpInitPres&(CurrentContourType=2)&IsNumber(P_End)
										Export expression: P + (P_End - P) * BL_FractionOfLine(ListIndex, CellIndex); [G0]
									Else
										Export expression: P; [G0]
									End if
									Export expression: 1; [G0]
								End line
							End loop
							# end Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACellList(ListIndex)-1 step: 1
						End if
					End loop
					# end Loop for: Objects in layer: Initial Pressure NL[ElementLayerIndex]
				End loop
				# End Loop over Geological units
				Start a new line
					Export expression: "END" [G0]
				End line
			End if
			# 2.21.3C
			Start a new line
				Export expression: "C.2.21.3C .. HWT by x,y,z range {0.1-0.3};(O) - FRESUR [2.20] and" [G0]
			End line
			Start a new line
				Export expression: "C..          ICHWT [2.21.2]" [G0]
			End line
			If: FRESUR&ICHWT
				Evaluate expression: ProgressBarAdvance()
				# Clear Line information
				Evaluate expression: BL_FreeVertexList()
				# Read Line information for current Unit
				If: !BL_AddVertexLayer("Initial Water Table")
					Alert: "Out of Memory. Abort this process, free up memory and try again."
				End if
				Set Variable: ListIndex:= -1
				Loop for: Objects in layer: Initial Water Table
					Set Variable: CurrentContourType:= ContourType()
					Set Variable: ListIndex:= ListIndex + 1
					If: ContourType()=3
						Set Variable: RowCount:= BL_GetRowNodeCount()
						Set Variable: ColumnCount:= BL_GetColumnNodeCount()
						Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
							Set Variable: NodeX:= BL_GetColumnNodePosition(ColumnIndex)
							Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
								Set Variable: NodeY:= BL_GetRowNodePosition(RowIndex)
								# If: BL_GetCountOfCellLists()>0
								# Loop for: Variable ListIndex from: 0 to: BL_GetCountOfCellLists()-1 step: 1
								If: BL_PointInsideContour(ListIndex, NodeX, NodeY)
									Start a new line
										Export expression: NodeX; [G0]
										Export expression: NodeX; [G0]
										Export expression: NodeY; [G0]
										Export expression: NodeY; [G0]
										Export expression: HST3D_GetZ(1); [G0]
										Export expression: HST3D_GetZ(1); [G0]
									End line
									Start a new line
										Export expression: Initial Water Table; [G0]
										Export expression: 1; [G0]
									End line
								End if
								# end if BL_PointInsideContour(ListIndex, NodeX, NodeY)
								# End loop
								# end Loop for: Variable ListIndex from: 0 to: BL_GetCountOfCellLists()-1 step: 1
								# End if
								# end If: BL_GetCountOfCellLists()>0
							End loop
							# end Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
						End loop
						# end Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
					End if
					Set Variable: CurrentContourType:= ContourType()
					Set Variable: HWT:= Initial Water Table.Initial Water Table
					If: InterpInitWaterTable&(CurrentContourType=2)
						Set Variable: HWT_End:= Initial Water Table.End Initial Water Table
					Else
						Set Variable: HWT_End:= $N/A
					End if
					Set Variable: CellCount:= BL_GetCountOfACellList(ListIndex)
					If: CellCount
						Loop for: Variable CellIndex from: 0 to: CellCount-1 step: 1
							Set Variable: AColumn:= BL_GetCellColumn(ListIndex, CellIndex)
							Set Variable: ARow:= BL_GetCellRow(ListIndex, CellIndex)
							Start a new line
								Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
								Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
								Export expression: L_GetFromList(RowList, ARow - 1); [G0]
								Export expression: L_GetFromList(RowList, ARow - 1); [G0]
								Export expression: HST3D_GetZ(1); [G0]
								Export expression: HST3D_GetZ(1); [G0]
							End line
							Start a new line
								If: InterpInitWaterTable&(CurrentContourType=2)&IsNumber(HWT_End)
									Export expression: HWT + (HWT_End - HWT) * BL_FractionOfLine(ListIndex, CellIndex); [G0]
								Else
									Export expression: HWT; [G0]
								End if
								# Export expression: HWT; [G0]
								Export expression: 1; [G0]
							End line
						End loop
					End if
					# end Loop for: Variable CellIndex from: 0 to: CellCount-1 step: 1
				End loop
				# end Loop for: Objects in layer: Initial Water Table
				Start a new line
					Export expression: "END" [G0]
				End line
			End if
			# 2.21.4
			Start a new line
				Export expression: "C.2.21.4 .. T by x,y,z range {0.1-0.3};(O) - HEAT [1.4] " [G0]
			End line
			If: HEAT
				# Clear Line information
				Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
					Evaluate expression: ProgressBarAdvance()
					Evaluate expression: BL_FreeVertexList()
					# Read Line information for current Unit
					If: !BL_AddVertexLayer("Initial Temperature NL" + ElementLayerIndex)
						Alert: "Out of Memory. Abort this process, free up memory and try again."
					End if
					Set Variable: ListIndex:= -1
					Loop for: Objects in layer: Initial Temperature NL[ElementLayerIndex]
						Set Variable: ListIndex:= ListIndex + 1
						If: ContourType()=3
							Set Variable: RowCount:= BL_GetRowNodeCount()
							Set Variable: ColumnCount:= BL_GetColumnNodeCount()
							Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
								Set Variable: NodeX:= BL_GetColumnNodePosition(ColumnIndex)
								Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
									Set Variable: NodeY:= BL_GetRowNodePosition(RowIndex)
									# If: BL_GetCountOfCellLists()>0
									# Loop for: Variable ListIndex from: 0 to: BL_GetCountOfCellLists()-1 step: 1
									If: BL_PointInsideContour(ListIndex, NodeX, NodeY)
										Start a new line
											Export expression: NodeX; [G0]
											Export expression: NodeX; [G0]
											Export expression: NodeY; [G0]
											Export expression: NodeY; [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
										End line
										Start a new line
											Export expression: Initial Temperature NL[ElementLayerIndex]; [G0]
											Export expression: 1; [G0]
										End line
									End if
									# end if BL_PointInsideContour(ListIndex, NodeX, NodeY)
									# End loop
									# end Loop for: Variable ListIndex from: 0 to: BL_GetCountOfCellLists()-1 step: 1
									# End if
									# end If: BL_GetCountOfCellLists()>0
								End loop
								# end Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
							End loop
							# end Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
						End if
						If: BL_GetCountOfACellList(ListIndex)>0
							Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACellList(ListIndex)-1 step: 1
								Set Variable: AColumn:= BL_GetCellColumn(ListIndex, CellIndex)
								Set Variable: ARow:= BL_GetCellRow(ListIndex, CellIndex)
								# If: (L_GetFrom3DList(BoundaryTypeArray, AColumn - 1, ARow - 1, ElementLayerIndex - 1)!=1)
								Start a new line
									Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
									Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
									Export expression: L_GetFromList(RowList, ARow - 1); [G0]
									Export expression: L_GetFromList(RowList, ARow - 1); [G0]
									Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
									Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
								End line
								Start a new line
									Export expression: Initial Temperature NL[ElementLayerIndex]; [G0]
									Export expression: 1; [G0]
								End line
								# End if
							End loop
							# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
						End if
					End loop
					# end Loop for: Objects in layer: Initial Temperature NL[ElementLayerIndex]
				End loop
				# End Loop over Geological units
				Start a new line
					Export expression: "END" [G0]
				End line
			End if
			# 2.21.5
			Start a new line
				Export expression: "C.2.21.5 .. NZTPHC, ZTHC(I),TVZHC(I);(O) - HEAT [1.4] and NHCBC [1.7] >0," [G0]
			End line
			Start a new line
				Export expression: "C..          limit of 10" [G0]
			End line
			If: HEAT&(NHCBC>0)
				Start a new line
					Export expression: NZTPHC [G0]
				End line
				Loop for: Variable BoundaryIndex from: 1 to: NZTPHC step: 1
					Start a new line
						Export expression: HST3D_InitHeatNodeLoc(BoundaryIndex); [G0]
						Export expression: HST3D_InitHeatNodeTemp(BoundaryIndex); [G0]
					End line
				End loop
			End if
			# 2.21.6
			Start a new line
				Export expression: "C.2.21.6 .. C by x,y,z range {0.1-0.3};(O) - SOLUTE [1.4]" [G0]
			End line
			If: SOLUTE
				# Clear Line information
				Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
					Evaluate expression: ProgressBarAdvance()
					Evaluate expression: BL_FreeVertexList()
					# Read Line information for current Unit
					If: !BL_AddVertexLayer("Initial Mass Fraction NL" + ElementLayerIndex)
						Alert: "Out of Memory. Abort this process, free up memory and try again."
					End if
					Set Variable: ListIndex:= -1
					Loop for: Objects in layer: Initial Mass Fraction NL[ElementLayerIndex]
						Set Variable: ListIndex:= ListIndex + 1
						If: ContourType()=3
							Set Variable: RowCount:= BL_GetRowNodeCount()
							Set Variable: ColumnCount:= BL_GetColumnNodeCount()
							Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
								Set Variable: NodeX:= BL_GetColumnNodePosition(ColumnIndex)
								Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
									Set Variable: NodeY:= BL_GetRowNodePosition(RowIndex)
									# If: BL_GetCountOfCellLists()>0
									# Loop for: Variable ListIndex from: 0 to: BL_GetCountOfCellLists()-1 step: 1
									If: BL_PointInsideContour(ListIndex, NodeX, NodeY)
										Start a new line
											Export expression: NodeX; [G0]
											Export expression: NodeX; [G0]
											Export expression: NodeY; [G0]
											Export expression: NodeY; [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
										End line
										Start a new line
											If: SCALMF
												Export expression: Initial Scaled Mass Fraction; [G0]
											Else
												Export expression: Initial Mass Fraction; [G0]
											End if
											Export expression: 1; [G0]
										End line
									End if
									# end if BL_PointInsideContour(ListIndex, NodeX, NodeY)
									# End loop
									# end Loop for: Variable ListIndex from: 0 to: BL_GetCountOfCellLists()-1 step: 1
									# End if
									# end If: BL_GetCountOfCellLists()>0
								End loop
								# end Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
							End loop
							# end Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
						End if
						If: BL_GetCountOfACellList(ListIndex)>0
							Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACellList(ListIndex)-1 step: 1
								Set Variable: AColumn:= BL_GetCellColumn(ListIndex, CellIndex)
								Set Variable: ARow:= BL_GetCellRow(ListIndex, CellIndex)
								If: (L_GetFrom3DList(BoundaryTypeArray, AColumn - 1, ARow - 1, ElementLayerIndex - 1)!=1)
									Start a new line
										Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
										Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
										Export expression: L_GetFromList(RowList, ARow - 1); [G0]
										Export expression: L_GetFromList(RowList, ARow - 1); [G0]
										Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
										Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
									End line
									Start a new line
										If: SCALMF
											Export expression: Initial Scaled Mass Fraction; [G0]
										Else
											Export expression: Initial Mass Fraction; [G0]
										End if
										Export expression: 1; [G0]
									End line
								End if
							End loop
							# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
						End if
					End loop
					# end Loop for: Objects in layer: Initial Mass Fraction NL[ElementLayerIndex]
				End loop
				# End Loop over Geological units
				Start a new line
					Export expression: "END" [G0]
				End line
			End if
			Start a new line
				Export expression: "C------------------------------------------------------------------------------" [G0]
			End line
			# 2.22.1
			Start a new line
				Export expression: "C.....Calculation information" [G0]
			End line
			Evaluate expression: ProgressBarAdvance()
			Evaluate expression: ProgressBarSetMessage(Message + "2.22")
			Start a new line
				Export expression: "C.2.22.1 .. FDSMTH,FDTMTH" [G0]
			End line
			Start a new line
				Export expression: FDSMTH; [G0]
				Export expression: FDTMTH; [G0]
			End line
			# 2.22.2
			Start a new line
				Export expression: "C.2.22.2 .. TOLDEN{.001},MAXITN{5}" [G0]
			End line
			Start a new line
				Export expression: TOLDEN; [G0]
				Export expression: MAXITN; [G0]
			End line
			# 2.22.3
			Start a new line
				Export expression: "C.....     Two-line s.o.r. solver" [G0]
			End line
			Start a new line
				Export expression: "C.2.22.3 .. NTSOPT{5},EPSSLV{1.e-7},EPSOMG{.2},MAXIT1{50},MAXIT2{100};" [G0]
			End line
			Start a new line
				Export expression: "C..          (O) - SLMETH [1.8] = 2" [G0]
			End line
			If: SLMETH=2
				Start a new line
					Export expression: NTSOPT; [G0]
					Export expression: EPSSLV; [G0]
					Export expression: EPSOMG; [G0]
					Export expression: MAXIT1; [G0]
					Export expression: MAXIT2; [G0]
				End line
			End if
			# 2.22.4
			Start a new line
				Export expression: "C.....     Generalized, restarted conjugate-gradient solver" [G0]
			End line
			Start a new line
				Export expression: "C.2.22.4 .. IDIR,IORDER,NSDR,EPSSLV{1.e-5},MAXIT2{100};" [G0]
			End line
			Start a new line
				Export expression: "C..          (O) - SLMETH [1.8] = 3 or 5" [G0]
			End line
			If: (SLMETH=3)|(SLMETH=5)
				Start a new line
					Export expression: IDIR; [G0]
					Export expression: IORDER; [G0]
					Export expression: NSDR; [G0]
					Export expression: EPSSLV; [G0]
					Export expression: MAXIT2; [G0]
				End line
			End if
			Start a new line
				Export expression: "C------------------------------------------------------------------------------" [G0]
			End line
			Start a new line
				Export expression: "C.....Output information" [G0]
			End line
			# 2.23.1
			Evaluate expression: ProgressBarAdvance()
			Evaluate expression: ProgressBarSetMessage(Message + "2.23")
			Start a new line
				Export expression: "C.2.23.1 .. PRTPMP,PRTFP,PRTIC,PRTBC,PRTSLM,PRTWEL; all [T/F]" [G0]
			End line
			Start a new line
				If: PRTPMP
					Export expression: "T"; [G0]
				Else
					Export expression: "F"; [G0]
				End if
				If: PRTFP
					Export expression: "T"; [G0]
				Else
					Export expression: "F"; [G0]
				End if
				If: PRTIC
					Export expression: "T"; [G0]
				Else
					Export expression: "F"; [G0]
				End if
				If: PRTBC
					Export expression: "T"; [G0]
				Else
					Export expression: "F"; [G0]
				End if
				If: PRTSLM
					Export expression: "T"; [G0]
				Else
					Export expression: "F"; [G0]
				End if
				If: PRTWEL
					Export expression: "T"; [G0]
				Else
					Export expression: "F"; [G0]
				End if
			End line
			# 2.23.2
			Start a new line
				Export expression: "C.2.23.2 .. IPRPTC,PRTDV[T/F];(O) - PRTIC [2.23.1]" [G0]
			End line
			If: PRTIC
				Start a new line
					Export expression: IPRPTC; [G0]
					If: PRTDV
						Export expression: "T"; [G0]
					Else
						Export expression: "F"; [G0]
					End if
				End line
			End if
			# 2.23.3
			Start a new line
				Export expression: "C.2.23.3 .. ORENPR[I];(O) - NOT CYLIND [1.4]" [G0]
			End line
			If: !CYLIND
				Start a new line
					Export expression: ORENPR [G0]
				End line
			End if
			# 2.23.4
			Start a new line
				Export expression: "C.2.23.4 .. PLTZON[T/F];(O) - PRTPMP [2.23.1]" [G0]
			End line
			If: PRTPMP
				Start a new line
					If: PLTZON
						Export expression: "T"; [G0]
					Else
						Export expression: "F"; [G0]
					End if
				End line
			End if
			# 2.23.5
			Start a new line
				Export expression: "C.2.23.5 .. PLTTEM[T/F]" [G0]
			End line
			Start a new line
				If: PLTTEM
					Export expression: "T"; [G0]
				Else
					Export expression: "F"; [G0]
				End if
			End line
		End if
		Start a new line
			Export expression: "C------------------------------------------------------------------------------" [G0]
		End line
		Start a new line
			Export expression: "C------------------------------------------------------------------------------" [G0]
		End line
		Start a new line
			Export expression: "C..... TRANSIENT DATA - READ3" [G0]
		End line
		Evaluate expression: ProgressBarSetMessage("Phase 2: Evaluating Stress Periods")
		# Make Lists of all the starting times for each package.
		# Overall List
		Set Variable: TimeList:= L_CreateNewList()
		Set Variable: WellList:= L_CreateNewList()
		If: UseWells
			Evaluate expression: ProgressBarAdvance()
			Loop for: Objects in layer: Wells
				Loop for: Variable TimeIndex from: 1 to: HST3D_NPer step: 1
					Evaluate expression: L_AddToList(TimeList, Time[TimeIndex])
					Evaluate expression: L_AddToList(WellList, Time[TimeIndex])
				End loop
			End loop
			Evaluate expression: L_SortList(TimeList)
			Evaluate expression: L_EliminateDuplicates(TimeList)
			Evaluate expression: L_SortList(WellList)
			Evaluate expression: L_EliminateDuplicates(WellList)
		End if
		Set Variable: RiverList:= L_CreateNewList()
		If: UseRiverLeakage
			Evaluate expression: ProgressBarAdvance()
			Loop for: Objects in layer: River Leakage
				Loop for: Variable TimeIndex from: 1 to: HST3D_NPer step: 1
					Evaluate expression: L_AddToList(TimeList, Time[TimeIndex])
					Evaluate expression: L_AddToList(RiverList, Time[TimeIndex])
				End loop
			End loop
			Evaluate expression: L_SortList(TimeList)
			Evaluate expression: L_EliminateDuplicates(TimeList)
			Evaluate expression: L_SortList(RiverList)
			Evaluate expression: L_EliminateDuplicates(RiverList)
		End if
		Set Variable: SpecifiedStateList:= L_CreateNewList()
		If: UseSpecPres|UseSpecTemp|UseSpecMassFrac
			Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
				Evaluate expression: ProgressBarAdvance()
				Loop for: Objects in layer: Specified State NL[ElementLayerIndex]
					Loop for: Variable TimeIndex from: 1 to: HST3D_NPer step: 1
						Evaluate expression: L_AddToList(TimeList, Time[TimeIndex])
						Evaluate expression: L_AddToList(SpecifiedStateList, Time[TimeIndex])
					End loop
				End loop
			End loop
			Evaluate expression: L_SortList(TimeList)
			Evaluate expression: L_EliminateDuplicates(TimeList)
			Evaluate expression: L_SortList(SpecifiedStateList)
			Evaluate expression: L_EliminateDuplicates(SpecifiedStateList)
		End if
		Set Variable: SpecifiedFluxList:= L_CreateNewList()
		If: UseSpecFlux|UseSpecHeatFlux|UseSpecSoluteFlux
			Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
				Evaluate expression: ProgressBarAdvance()
				Loop for: Objects in layer: Horizontal Specified Flux Boundary NL[ElementLayerIndex]
					Loop for: Variable TimeIndex from: 1 to: HST3D_NPer step: 1
						Evaluate expression: L_AddToList(TimeList, Time[TimeIndex])
						Evaluate expression: L_AddToList(SpecifiedFluxList, Time[TimeIndex])
					End loop
				End loop
			End loop
			Evaluate expression: L_SortList(TimeList)
			Evaluate expression: L_EliminateDuplicates(TimeList)
			Evaluate expression: L_SortList(SpecifiedFluxList)
			Evaluate expression: L_EliminateDuplicates(SpecifiedFluxList)
			Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
				Evaluate expression: ProgressBarAdvance()
				Loop for: Objects in layer: Vertical Specified Flux Boundary NL[ElementLayerIndex]
					Loop for: Variable TimeIndex from: 1 to: HST3D_NPer step: 1
						Evaluate expression: L_AddToList(TimeList, Time[TimeIndex])
						Evaluate expression: L_AddToList(SpecifiedFluxList, Time[TimeIndex])
					End loop
				End loop
			End loop
			Evaluate expression: L_SortList(TimeList)
			Evaluate expression: L_EliminateDuplicates(TimeList)
			Evaluate expression: L_SortList(SpecifiedFluxList)
			Evaluate expression: L_EliminateDuplicates(SpecifiedFluxList)
		End if
		Set Variable: LeakageList:= L_CreateNewList()
		If: UseLeakageBoundary
			Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
				Evaluate expression: ProgressBarAdvance()
				Loop for: Objects in layer: Horizontal Aquifer Leakage Boundary NL[ElementLayerIndex]
					Loop for: Variable TimeIndex from: 1 to: HST3D_NPer step: 1
						Evaluate expression: L_AddToList(TimeList, Time[TimeIndex])
						Evaluate expression: L_AddToList(LeakageList, Time[TimeIndex])
					End loop
				End loop
			End loop
			Evaluate expression: L_SortList(TimeList)
			Evaluate expression: L_EliminateDuplicates(TimeList)
			Evaluate expression: L_SortList(LeakageList)
			Evaluate expression: L_EliminateDuplicates(LeakageList)
			Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
				Evaluate expression: ProgressBarAdvance()
				Loop for: Objects in layer: Vertical Aquifer Leakage Boundary NL[ElementLayerIndex]
					Loop for: Variable TimeIndex from: 1 to: HST3D_NPer step: 1
						Evaluate expression: L_AddToList(TimeList, Time[TimeIndex])
						Evaluate expression: L_AddToList(LeakageList, Time[TimeIndex])
					End loop
				End loop
			End loop
			Evaluate expression: L_SortList(TimeList)
			Evaluate expression: L_EliminateDuplicates(TimeList)
			Evaluate expression: L_SortList(LeakageList)
			Evaluate expression: L_EliminateDuplicates(LeakageList)
		End if
		Set Variable: EvapotranspirationList:= L_CreateNewList()
		If: UseEvapotranspiration
			# Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
			Evaluate expression: ProgressBarAdvance()
			Loop for: Objects in layer: Horizontal Evapotranspiration Boundary
				Loop for: Variable TimeIndex from: 1 to: HST3D_NPer step: 1
					Evaluate expression: L_AddToList(TimeList, Time[TimeIndex])
					Evaluate expression: L_AddToList(EvapotranspirationList, Time[TimeIndex])
				End loop
			End loop
			# End loop
			Evaluate expression: L_SortList(TimeList)
			Evaluate expression: L_EliminateDuplicates(TimeList)
			Evaluate expression: L_SortList(EvapotranspirationList)
			Evaluate expression: L_EliminateDuplicates(EvapotranspirationList)
		End if
		Set Variable: AqInflList:= L_CreateNewList()
		If: UseAquiferInfluence
			Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
				Evaluate expression: ProgressBarAdvance()
				Loop for: Objects in layer: Horizontal Aquifer Influence Boundary NL[ElementLayerIndex]
					Loop for: Variable TimeIndex from: 1 to: HST3D_NPer step: 1
						Evaluate expression: L_AddToList(TimeList, Time[TimeIndex])
						Evaluate expression: L_AddToList(AqInflList, Time[TimeIndex])
					End loop
				End loop
			End loop
			Evaluate expression: L_SortList(TimeList)
			Evaluate expression: L_EliminateDuplicates(TimeList)
			Evaluate expression: L_SortList(AqInflList)
			Evaluate expression: L_EliminateDuplicates(AqInflList)
			Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
				Evaluate expression: ProgressBarAdvance()
				Loop for: Objects in layer: Vertical Aquifer Influence Boundary NL[ElementLayerIndex]
					Loop for: Variable TimeIndex from: 1 to: HST3D_NPer step: 1
						Evaluate expression: L_AddToList(TimeList, Time[TimeIndex])
						Evaluate expression: L_AddToList(AqInflList, Time[TimeIndex])
					End loop
				End loop
			End loop
			Evaluate expression: L_SortList(TimeList)
			Evaluate expression: L_EliminateDuplicates(TimeList)
			Evaluate expression: L_SortList(AqInflList)
			Evaluate expression: L_EliminateDuplicates(AqInflList)
		End if
		Set Variable: SolverList:= L_CreateNewList()
		Loop for: Variable TimeIndex from: 1 to: HST3D_NPer+1 step: 1
			Evaluate expression: L_AddToList(TimeList, HST3D_Timchg(TimeIndex))
			Evaluate expression: L_AddToList(SolverList, HST3D_Timchg(TimeIndex))
		End loop
		Evaluate expression: L_SortList(TimeList)
		Evaluate expression: L_EliminateDuplicates(TimeList)
		Evaluate expression: L_SortList(SolverList)
		Evaluate expression: L_EliminateDuplicates(SolverList)
		Evaluate expression: ProgressBarFree()
		Set Variable: ObjectTimeList:= L_CreateNewList()
		Set Variable: ProgressMax:= 0
		If: NWEL>0
			Set Variable: ProgressMax:= ProgressMax + L_GetListSize(WellList)
		End if
		If: (NSBC>0)
			If: UseSpecMassFrac
				Set Variable: ProgressMax:= ProgressMax + L_GetListSize(SpecifiedStateList)*2 * NZ
			End if
			If: UseSpecPres
				Set Variable: ProgressMax:= ProgressMax + L_GetListSize(SpecifiedStateList) * NZ
			End if
			If: UseSpecTemp
				Set Variable: ProgressMax:= ProgressMax + L_GetListSize(SpecifiedStateList)*2 * NZ
			End if
		End if
		If: (NFBC>0)
			If: UseSpecFlux
				Set Variable: ProgressMax:= ProgressMax + L_GetListSize(SpecifiedFluxList)*2* NZ
				If: HEAT
					Set Variable: ProgressMax:= ProgressMax + L_GetListSize(SpecifiedFluxList) * NZ
				End if
				If: SOLUTE
					Set Variable: ProgressMax:= ProgressMax + L_GetListSize(SpecifiedFluxList) * NZ
				End if
			End if
			If: UseSpecHeatFlux
				Set Variable: ProgressMax:= ProgressMax + L_GetListSize(SpecifiedFluxList) * NZ
			End if
			If: UseSpecSoluteFlux
				Set Variable: ProgressMax:= ProgressMax + L_GetListSize(SpecifiedFluxList) * NZ
			End if
		End if
		If: UseLeakageBoundary|UseRiverLeakage
			Set Variable: ProgressMax:= ProgressMax + L_GetListSize(LeakageList) * NZ + L_GetListSize(RiverList)
			If: HEAT
				Set Variable: ProgressMax:= ProgressMax + L_GetListSize(LeakageList) * NZ
			End if
			If: SOLUTE
				Set Variable: ProgressMax:= ProgressMax + L_GetListSize(LeakageList) * NZ
			End if
		End if
		If: (NETBC>0)
			Set Variable: ProgressMax:= ProgressMax + L_GetListSize(EvapotranspirationList) * NZ
		End if
		If: (NAIFC>0)
			Set Variable: ProgressMax:= ProgressMax + L_GetListSize(AqInflList) * NZ
			If: HEAT
				Set Variable: ProgressMax:= ProgressMax + L_GetListSize(AqInflList) * NZ
			End if
			If: SOLUTE
				Set Variable: ProgressMax:= ProgressMax + L_GetListSize(AqInflList) * NZ
			End if
		End if
		Set Variable: MaxStressPeriods:= L_GetListSize(TimeList)-1
		Evaluate expression: ProgressBarInitialize(ProgressMax)
		Loop for: Variable TimeIndex from: 0 to: L_GetListSize(TimeList)-2 step: 1
			Set Variable: Message:= "Phase 3: Exporting Stress Period " + (TimeIndex + 1) + " of " + MaxStressPeriods + " Stress Periods: Data Set "
			Set Variable: CurrentTime:= L_GetFromList(TimeList, TimeIndex)
			If: !RESTRT|CurrentTime>=TIMRST
				# 3.1
				Evaluate expression: ProgressBarSetMessage(Message + "3.1")
				Start a new line
					Export expression: "C.3.1 .. THRU[T/F]" [G0]
				End line
				Start a new line
					Export expression: "C.....If THRU is true, proceed to record 3.99" [G0]
				End line
				Start a new line
					Export expression: "F" [G0]
				End line
				# 3.2.1
				Start a new line
					Export expression: "C------------------------------------------------------------------------------" [G0]
				End line
				Start a new line
					Export expression: "C.....The following is for NOT THRU" [G0]
				End line
				Start a new line
					Export expression: "C------------------------------------------------------------------------------" [G0]
				End line
				Start a new line
					Export expression: "C.....Source-sink well information" [G0]
				End line
				Evaluate expression: ProgressBarSetMessage(Message + "3.2")
				Start a new line
					Export expression: "C.3.2.1 .. RDWTD[T/F];(O) - NWEL [1.6] > 0" [G0]
				End line
				If: NWEL>0
					Set Variable: AString:= "F"
					Loop for: Variable InnerTimeIndex from: 0 to: L_GetListSize(WellList)-1 step: 1
						Set Variable: InnerCurrentTime:= L_GetFromList(WellList, InnerTimeIndex)
						If: CurrentTime=InnerCurrentTime
							Set Variable: AString:= "T"
						End if
					End loop
					# end Loop for: Variable InnerTimeIndex from: 0 to: L_GetListSize(WellList)-1 step: 1
					Start a new line
						Export expression: AString [G0]
					End line
				End if
				# 3.2.2
				Start a new line
					Export expression: "C.3.2.2 .. IWEL,QWV,PWSUR,PWKT,TWSRKT,CWKT;(O) - RDWTD [3.2.1] " [G0]
				End line
				Start a new line
					Export expression: "C..... 3.2.2 QWV generic time units" [G0]
				End line
				Start a new line
					Export expression: "C.....Use as many 3.2.2 lines as necessary" [G0]
				End line
				If: AString="T"
					Set Variable: IWEL:= 0
					Evaluate expression: ProgressBarAdvance()
					Loop for: Objects in layer: Wells
						Set Variable: IWEL:= IWEL + 1
						Set Variable: ATime:= 0
						Evaluate expression: L_FreeAList(ObjectTimeList)
						Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
							If: IsNumber(Time[InnerTimeIndex])
								Set Variable: ATime:= Time[InnerTimeIndex]
							End if
							Evaluate expression: L_AddToList(ObjectTimeList, ATime)
						End loop
						Set Variable: InnerTimeIndex:= L_IndexOf(ObjectTimeList, CurrentTime)+1
						# Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
						# If: CurrentTime<=Time[InnerTimeIndex]
						Set Variable: QWV:= Flow Rate[InnerTimeIndex]
						If: WellRiser
							Set Variable: PWSUR:= Land Surface Pressure[InnerTimeIndex]
						Else
							Set Variable: PWSUR:= 0
						End if
						If: !WellRiser
							Set Variable: PWKT:= Datum Pressure[InnerTimeIndex]
						Else
							Set Variable: PWKT:= 0
						End if
						If: HEAT
							Set Variable: TWSRKT:= Fluid Temperature[InnerTimeIndex]
						Else
							Set Variable: TWSRKT:= 0
						End if
						If: SOLUTE
							Set Variable: MassFractionTest:= 0
							If: SCALMF
								If: !IsNA(Scaled Mass Fraction[InnerTimeIndex])
									Set Variable: MassFractionTest:= 1
								End if
							Else
								If: !IsNA(Mass Fraction[InnerTimeIndex])
									Set Variable: MassFractionTest:= 1
								End if
							End if
							If: MassFractionTest
								If: SCALMF
									Set Variable: CWKT:= Scaled Mass Fraction[InnerTimeIndex]
								Else
									Set Variable: CWKT:= Mass Fraction[InnerTimeIndex]
								End if
							End if
						Else
							Set Variable: CWKT:= 0
						End if
						# end If: (!SCALMF&IsNA(Mass Fraction[InnerTimeIndex]))|(SCALMF&IsNA(Scaled Mass Fraction[InnerTimeIndex]))
						# End if
						# end If: CurrentTime<=Time[InnerTimeIndex]
						# End loop
						# end Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
						Start a new line
							Export expression: IWEL; [G0]
							Export expression: QWV; [G0]
							Export expression: PWSUR; [G0]
							Export expression: PWKT; [G0]
							Export expression: TWSRKT; [G0]
							Export expression: CWKT; [G0]
						End line
					End loop
					# end Loop for: Objects in layer: Wells
					Start a new line
						Export expression: "C.3.2.3 .. End with END" [G0]
					End line
					Start a new line
						Export expression: "END" [G0]
					End line
				End if
				Start a new line
					Export expression: "C------------------------------------------------------------------------------" [G0]
				End line
				Start a new line
					Export expression: "C.....Boundary condition information" [G0]
				End line
				Start a new line
					Export expression: "C------------------------------------------------------------------------------" [G0]
				End line
				Start a new line
					Export expression: "C.....     Specified value b.c." [G0]
				End line
				# 3.3.1
				Evaluate expression: ProgressBarSetMessage(Message + "3.3")
				Start a new line
					Export expression: "C.3.3.1 .. RDSPBC,RDSTBC,RDSCBC; all [T/F];(O) - NSBC [1.6] > 0" [G0]
				End line
				If: NSBC>0
					Set Variable: RDSPBC:= 0
					Set Variable: RDSTBC:= 0
					Set Variable: RDSCBC:= 0
					If: UseSpecMassFrac|UseSpecPres|UseSpecTemp
						Set Variable: InnerTimeIndex:= L_IndexOf(SpecifiedStateList, CurrentTime)
						Set Variable: InnerCurrentTime:= L_GetFromList(SpecifiedStateList, InnerTimeIndex)
						If: CurrentTime=InnerCurrentTime
							Set Variable: RDSPBC:= UseSpecPres
							Set Variable: RDSTBC:= UseSpecTemp
							Set Variable: RDSCBC:= UseSpecMassFrac
						End if
						# end Loop for: Variable InnerTimeIndex from: 0 to: L_GetListSize(SpecifiedStateList)-1 step: 1
					End if
					Start a new line
						If: RDSPBC
							Export expression: "T"; [G0]
						Else
							Export expression: "F"; [G0]
						End if
						If: RDSTBC
							Export expression: "T"; [G0]
						Else
							Export expression: "F"; [G0]
						End if
						If: RDSCBC
							Export expression: "T"; [G0]
						Else
							Export expression: "F"; [G0]
						End if
					End line
				End if
				# 3.3.2
				Start a new line
					Export expression: "C.3.3.2 .. PNP B.C. by x,y,z range {0.1-0.3};(O) - RDSPBC [3.3.1]" [G0]
				End line
				If: RDSPBC&(NSBC>0)
					# Loop over Geological Units
					Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
						Evaluate expression: ProgressBarAdvance()
						Evaluate expression: ProgressBarSetMessage(Message + "3.3.2, Layer " + ElementLayerIndex)
						# Clear Line information
						Evaluate expression: BL_FreeVertexList()
						# Read Line information for current Unit
						If: !BL_AddVertexLayer("Specified State NL" + ElementLayerIndex)
							Alert: "Out of Memory. Abort this process, free up memory and try again."
						End if
						Set Variable: ListIndex:= -1
						Loop for: Objects in layer: Specified State NL[ElementLayerIndex]
							Set Variable: CurrentContourType:= ContourType()
							Set Variable: ListIndex:= ListIndex + 1
							Set Variable: ATime:= 0
							Evaluate expression: L_FreeAList(ObjectTimeList)
							Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
								If: IsNumber(Time[InnerTimeIndex])
									Set Variable: ATime:= Time[InnerTimeIndex]
								End if
								Evaluate expression: L_AddToList(ObjectTimeList, ATime)
							End loop
							Set Variable: InnerTimeIndex:= L_IndexOf(ObjectTimeList, CurrentTime)+1
							# Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
							# If: CurrentTime<=Time[InnerTimeIndex]
							Set Variable: PNP:= Specified Pressure[InnerTimeIndex]
							If: InterpSpecPres&(CurrentContourType=2)
								Set Variable: PNP_End:= End Specified Pressure[InnerTimeIndex]
							Else
								Set Variable: PNP_End:= $N/A
							End if
							# End if
							# end If: CurrentTime<=Time[InnerTimeIndex]
							# End loop
							# end Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
							If: IsNumber(PNP)
								Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACellList(ListIndex)-1 step: 1
									Set Variable: AColumn:= BL_GetCellColumn(ListIndex, CellIndex)
									Set Variable: ARow:= BL_GetCellRow(ListIndex, CellIndex)
									Start a new line
										Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
										Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
										Export expression: L_GetFromList(RowList, ARow - 1); [G0]
										Export expression: L_GetFromList(RowList, ARow - 1); [G0]
										Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
										Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
									End line
									Start a new line
										If: InterpSpecPres&(CurrentContourType=2)&IsNumber(PNP_End)
											Export expression: PNP + (PNP_End - PNP) * BL_FractionOfLine(ListIndex, CellIndex); [G0]
										Else
											Export expression: PNP; [G0]
										End if
										Export expression: 1; [G0]
									End line
								End loop
								# end Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACellList(ListIndex)-1 step: 1
								If: ContourType()=3
									Set Variable: RowCount:= BL_GetRowNodeCount()
									Set Variable: ColumnCount:= BL_GetColumnNodeCount()
									Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
										Set Variable: NodeX:= BL_GetColumnNodePosition(ColumnIndex)
										Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
											Set Variable: NodeY:= BL_GetRowNodePosition(RowIndex)
											# If: BL_GetCountOfCellLists()>0
											If: BL_PointInsideContour(ListIndex, NodeX, NodeY)
												Start a new line
													Export expression: NodeX; [G0]
													Export expression: NodeX; [G0]
													Export expression: NodeY; [G0]
													Export expression: NodeY; [G0]
													Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
													Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
												End line
												Start a new line
													Export expression: PNP; [G0]
													Export expression: 1; [G0]
												End line
											End if
											# end if BL_PointInsideContour(ListIndex, NodeX, NodeY)
											# End if
											# end If: BL_GetCountOfCellLists()>0
										End loop
										# end Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
									End loop
									# end Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
								End if
							End if
						End loop
						# end Loop for: Objects in layer: Specified State NL[ElementLayerIndex]
					End loop
					# End Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
					Start a new line
						Export expression: "END" [G0]
					End line
				End if
				# 3.3.3
				Start a new line
					Export expression: "C.3.3.3 .. TSBC by x,y,z range {0.1-0.3};(O) - RDSPBC [3.3.1] and" [G0]
				End line
				Start a new line
					Export expression: "C..          HEAT [1.4]" [G0]
				End line
				If: RDSPBC&HEAT&(NSBC>0)
					# Loop over Geological Units
					Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
						Evaluate expression: ProgressBarAdvance()
						Evaluate expression: ProgressBarSetMessage(Message + "3.3.3, Layer " + ElementLayerIndex)
						# Clear Line information
						Evaluate expression: BL_FreeVertexList()
						# Read Line information for current Unit
						If: !BL_AddVertexLayer("Specified State NL" + ElementLayerIndex)
							Alert: "Out of Memory. Abort this process, free up memory and try again."
						End if
						Set Variable: ListIndex:= -1
						Loop for: Objects in layer: Specified State NL[ElementLayerIndex]
							Set Variable: ListIndex:= ListIndex + 1
							Set Variable: ATime:= 0
							Evaluate expression: L_FreeAList(ObjectTimeList)
							Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
								If: IsNumber(Time[InnerTimeIndex])
									Set Variable: ATime:= Time[InnerTimeIndex]
								End if
								Evaluate expression: L_AddToList(ObjectTimeList, ATime)
							End loop
							Set Variable: InnerTimeIndex:= L_IndexOf(ObjectTimeList, CurrentTime)+1
							# Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
							# If: CurrentTime<=Time[InnerTimeIndex]
							Set Variable: TSBC:= Temp at Spec Pres[InnerTimeIndex]
							If: InterpTempAtSpecPres&(CurrentContourType=2)
								Set Variable: TSBC_End:= End Temp at Spec Pres[InnerTimeIndex]
							Else
								Set Variable: TSBC_End:= $N/A
							End if
							# End if
							# end If: CurrentTime<=Time[InnerTimeIndex]
							# End loop
							# end Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
							If: IsNumber(TSBC)
								Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACellList(ListIndex)-1 step: 1
									Set Variable: AColumn:= BL_GetCellColumn(ListIndex, CellIndex)
									Set Variable: ARow:= BL_GetCellRow(ListIndex, CellIndex)
									Start a new line
										Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
										Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
										Export expression: L_GetFromList(RowList, ARow - 1); [G0]
										Export expression: L_GetFromList(RowList, ARow - 1); [G0]
										Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
										Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
									End line
									Start a new line
										If: InterpTempAtSpecPres&(CurrentContourType=2)&IsNumber(TSBC_End)
											Export expression: TSBC + (TSBC_End - TSBC) * BL_FractionOfLine(ListIndex, CellIndex); [G0]
										Else
											Export expression: TSBC; [G0]
										End if
										Export expression: 1; [G0]
									End line
								End loop
								# end Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACellList(ListIndex)-1 step: 1
								If: ContourType()=3
									Set Variable: RowCount:= BL_GetRowNodeCount()
									Set Variable: ColumnCount:= BL_GetColumnNodeCount()
									Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
										Set Variable: NodeX:= BL_GetColumnNodePosition(ColumnIndex)
										Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
											Set Variable: NodeY:= BL_GetRowNodePosition(RowIndex)
											# If: BL_GetCountOfCellLists()>0
											If: BL_PointInsideContour(ListIndex, NodeX, NodeY)
												Start a new line
													Export expression: NodeX; [G0]
													Export expression: NodeX; [G0]
													Export expression: NodeY; [G0]
													Export expression: NodeY; [G0]
													Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
													Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
												End line
												Start a new line
													Export expression: TSBC; [G0]
													Export expression: 1; [G0]
												End line
											End if
											# end if BL_PointInsideContour(ListIndex, NodeX, NodeY)
											# End if
											# end If: BL_GetCountOfCellLists()>0
										End loop
										# end Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
									End loop
									# end Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
								End if
							End if
						End loop
						# end Loop for: Objects in layer: Specified State NL[ElementLayerIndex]
					End loop
					# End Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
					Start a new line
						Export expression: "END" [G0]
					End line
				End if
				# 3.3.4
				Start a new line
					Export expression: "C.3.3.4 .. CSBC by x,y,z range {0.1-0.3}; (O) - RDSPBC [3.3.1] and" [G0]
				End line
				Start a new line
					Export expression: "C..          SOLUTE [1.4]" [G0]
				End line
				If: RDSPBC&SOLUTE&(NSBC>0)
					# Loop over Geological Units
					Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
						Evaluate expression: ProgressBarAdvance()
						Evaluate expression: ProgressBarSetMessage(Message + "3.3.4, Layer " + ElementLayerIndex)
						# Clear Line information
						Evaluate expression: BL_FreeVertexList()
						# Read Line information for current Unit
						If: !BL_AddVertexLayer("Specified State NL" + ElementLayerIndex)
							Alert: "Out of Memory. Abort this process, free up memory and try again."
						End if
						Set Variable: ListIndex:= -1
						Loop for: Objects in layer: Specified State NL[ElementLayerIndex]
							Set Variable: ListIndex:= ListIndex + 1
							Set Variable: CSBC:= $N/A
							Set Variable: ATime:= 0
							Evaluate expression: L_FreeAList(ObjectTimeList)
							Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
								If: IsNumber(Time[InnerTimeIndex])
									Set Variable: ATime:= Time[InnerTimeIndex]
								End if
								Evaluate expression: L_AddToList(ObjectTimeList, ATime)
							End loop
							Set Variable: InnerTimeIndex:= L_IndexOf(ObjectTimeList, CurrentTime)+1
							# Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
							# If: CurrentTime<=Time[InnerTimeIndex]
							If: SCALMF
								If: !IsNA(Scaled Mass Frac at Spec Pres[InnerTimeIndex])
									Set Variable: CSBC:= Scaled Mass Frac at Spec Pres[InnerTimeIndex]
									If: (InterpScMassFracAtSpecPres)&(CurrentContourType=2)
										Set Variable: CSBC_End:= End Scaled Mass Frac at Spec Pres[InnerTimeIndex]
									Else
										Set Variable: CSBC_End:= $N/A
									End if
								End if
							Else
								If: !IsNA(Mass Frac at Spec Pres[InnerTimeIndex])
									Set Variable: CSBC:= Mass Frac at Spec Pres[InnerTimeIndex]
									If: (InterpMassFracAtSpecPres)&(CurrentContourType=2)
										Set Variable: CSBC_End:= End Mass Frac at Spec Pres[InnerTimeIndex]
									Else
										Set Variable: CSBC_End:= $N/A
									End if
								End if
							End if
							# End if
							# end If: CurrentTime<=Time[InnerTimeIndex]
							# End loop
							# end Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
							If: IsNumber(CSBC)
								Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACellList(ListIndex)-1 step: 1
									Set Variable: AColumn:= BL_GetCellColumn(ListIndex, CellIndex)
									Set Variable: ARow:= BL_GetCellRow(ListIndex, CellIndex)
									Start a new line
										Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
										Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
										Export expression: L_GetFromList(RowList, ARow - 1); [G0]
										Export expression: L_GetFromList(RowList, ARow - 1); [G0]
										Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
										Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
									End line
									Start a new line
										If: ((SCALMF&InterpScMassFracAtSpecPres)|(!SCALMF&InterpMassFracAtSpecPres))&(CurrentContourType=2)&IsNumber(CSBC_End)
											Export expression: CSBC + (CSBC_End - CSBC) * BL_FractionOfLine(ListIndex, CellIndex); [G0]
										Else
											Export expression: CSBC; [G0]
										End if
										Export expression: 1; [G0]
									End line
								End loop
								# end Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACellList(ListIndex)-1 step: 1
								If: ContourType()=3
									Set Variable: RowCount:= BL_GetRowNodeCount()
									Set Variable: ColumnCount:= BL_GetColumnNodeCount()
									Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
										Set Variable: NodeX:= BL_GetColumnNodePosition(ColumnIndex)
										Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
											Set Variable: NodeY:= BL_GetRowNodePosition(RowIndex)
											# If: BL_GetCountOfCellLists()>0
											If: BL_PointInsideContour(ListIndex, NodeX, NodeY)
												Start a new line
													Export expression: NodeX; [G0]
													Export expression: NodeX; [G0]
													Export expression: NodeY; [G0]
													Export expression: NodeY; [G0]
													Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
													Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
												End line
												Start a new line
													Export expression: CSBC; [G0]
													Export expression: 1; [G0]
												End line
											End if
											# end if BL_PointInsideContour(ListIndex, NodeX, NodeY)
											# End if
											# end If: BL_GetCountOfCellLists()>0
										End loop
										# end Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
									End loop
									# end Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
								End if
							End if
						End loop
						# end Loop for: Objects in layer: Specified State NL[ElementLayerIndex]
					End loop
					# End Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
					Start a new line
						Export expression: "END" [G0]
					End line
				End if
				# 3.3.5
				Start a new line
					Export expression: "C.3.3.5 .. TNP B.C. by x,y,z range {0.1-0.3};(O) - RDSTBC [3.3.1] and" [G0]
				End line
				Start a new line
					Export expression: "C..          HEAT [1.4]" [G0]
				End line
				If: RDSTBC&HEAT&(NSBC>0)
					# Loop over Geological Units
					Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
						Evaluate expression: ProgressBarAdvance()
						Evaluate expression: ProgressBarSetMessage(Message + "3.3.5, Layer " + ElementLayerIndex)
						# Clear Line information
						Evaluate expression: BL_FreeVertexList()
						# Read Line information for current Unit
						If: !BL_AddVertexLayer("Specified State NL" + ElementLayerIndex)
							Alert: "Out of Memory. Abort this process, free up memory and try again."
						End if
						Set Variable: ListIndex:= -1
						Loop for: Objects in layer: Specified State NL[ElementLayerIndex]
							Set Variable: ListIndex:= ListIndex + 1
							Set Variable: ATime:= 0
							Evaluate expression: L_FreeAList(ObjectTimeList)
							Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
								If: IsNumber(Time[InnerTimeIndex])
									Set Variable: ATime:= Time[InnerTimeIndex]
								End if
								Evaluate expression: L_AddToList(ObjectTimeList, ATime)
							End loop
							Set Variable: InnerTimeIndex:= L_IndexOf(ObjectTimeList, CurrentTime)+1
							# Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
							# If: CurrentTime<=Time[InnerTimeIndex]
							Set Variable: TNP:= Specified Temperature[InnerTimeIndex]
							If: InterpSpecifiedTemp&(CurrentContourType=2)
								Set Variable: TNP_End:= End Specified Temperature[InnerTimeIndex]
							Else
								Set Variable: TNP_End:= $N/A
							End if
							# End if
							# end If: CurrentTime<=Time[InnerTimeIndex]
							# End loop
							# end Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
							If: IsNumber(TNP)
								Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACellList(ListIndex)-1 step: 1
									Set Variable: AColumn:= BL_GetCellColumn(ListIndex, CellIndex)
									Set Variable: ARow:= BL_GetCellRow(ListIndex, CellIndex)
									Start a new line
										Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
										Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
										Export expression: L_GetFromList(RowList, ARow - 1); [G0]
										Export expression: L_GetFromList(RowList, ARow - 1); [G0]
										Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
										Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
									End line
									Start a new line
										If: InterpSpecifiedTemp&(CurrentContourType=2)&IsNumber(TNP_End)
											Export expression: TNP + (TNP_End - TNP) * BL_FractionOfLine(ListIndex, CellIndex); [G0]
										Else
											Export expression: TNP; [G0]
										End if
										Export expression: 1 [G0]
									End line
								End loop
								# end Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACellList(ListIndex)-1 step: 1
								If: ContourType()=3
									Set Variable: RowCount:= BL_GetRowNodeCount()
									Set Variable: ColumnCount:= BL_GetColumnNodeCount()
									Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
										Set Variable: NodeX:= BL_GetColumnNodePosition(ColumnIndex)
										Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
											Set Variable: NodeY:= BL_GetRowNodePosition(RowIndex)
											# If: BL_GetCountOfCellLists()>0
											If: BL_PointInsideContour(ListIndex, NodeX, NodeY)
												Start a new line
													Export expression: NodeX; [G0]
													Export expression: NodeX; [G0]
													Export expression: NodeY; [G0]
													Export expression: NodeY; [G0]
													Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
													Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
												End line
												Start a new line
													Export expression: TNP; [G0]
													Export expression: 1; [G0]
												End line
											End if
											# end if BL_PointInsideContour(ListIndex, NodeX, NodeY)
											# End if
											# end If: BL_GetCountOfCellLists()>0
										End loop
										# end Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
									End loop
									# end Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
								End if
							End if
						End loop
						# end Loop for: Objects in layer: Specified State NL[ElementLayerIndex]
					End loop
					# End Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
					Start a new line
						Export expression: "END" [G0]
					End line
				End if
				# 3.3.6
				Start a new line
					Export expression: "C.3.3.6 .. CNP B.C. by x,y,z range {0.1-0.3};(O) - RDSCBC [3.3.1] and" [G0]
				End line
				Start a new line
					Export expression: "C..          SOLUTE [1.4]" [G0]
				End line
				If: RDSCBC&SOLUTE&(NSBC>0)
					# Loop over Geological Units
					Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
						Evaluate expression: ProgressBarAdvance()
						Evaluate expression: ProgressBarSetMessage(Message + "3.3.6, Layer " + ElementLayerIndex)
						# Clear Line information
						Evaluate expression: BL_FreeVertexList()
						# Read Line information for current Unit
						If: !BL_AddVertexLayer("Specified State NL" + ElementLayerIndex)
							Alert: "Out of Memory. Abort this process, free up memory and try again."
						End if
						Set Variable: ListIndex:= -1
						Loop for: Objects in layer: Specified State NL[ElementLayerIndex]
							Set Variable: ListIndex:= ListIndex + 1
							Set Variable: ATime:= 0
							Evaluate expression: L_FreeAList(ObjectTimeList)
							Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
								If: IsNumber(Time[InnerTimeIndex])
									Set Variable: ATime:= Time[InnerTimeIndex]
								End if
								Evaluate expression: L_AddToList(ObjectTimeList, ATime)
							End loop
							Set Variable: InnerTimeIndex:= L_IndexOf(ObjectTimeList, CurrentTime)+1
							# Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
							# If: CurrentTime<=Time[InnerTimeIndex]
							If: SCALMF
								Set Variable: CNP:= Specified Scaled Mass Fraction[InnerTimeIndex]
								If: InterpSpecifiedMassFrac&(CurrentContourType=2)
									Set Variable: CNP_End:= End Specified Scaled Mass Fraction[InnerTimeIndex]
								Else
									Set Variable: CNP_End:= $N/A
								End if
							Else
								Set Variable: CNP:= Specified Mass Fraction[InnerTimeIndex]
								If: InterpSpecifiedMassFrac&(CurrentContourType=2)
									Set Variable: CNP_End:= End Specified Mass Fraction[InnerTimeIndex]
								Else
									Set Variable: CNP_End:= $N/A
								End if
							End if
							# End if
							# end If: CurrentTime<=Time[InnerTimeIndex]
							# End loop
							# end Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
							If: IsNumber(CNP)
								Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACellList(ListIndex)-1 step: 1
									Set Variable: AColumn:= BL_GetCellColumn(ListIndex, CellIndex)
									Set Variable: ARow:= BL_GetCellRow(ListIndex, CellIndex)
									Start a new line
										Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
										Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
										Export expression: L_GetFromList(RowList, ARow - 1); [G0]
										Export expression: L_GetFromList(RowList, ARow - 1); [G0]
										Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
										Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
									End line
									Start a new line
										If: InterpSpecifiedMassFrac&(CurrentContourType=2)&IsNumber(CNP_End)
											Export expression: CNP + (CNP_End - CNP) * BL_FractionOfLine(ListIndex, CellIndex); [G0]
										Else
											Export expression: CNP; [G0]
										End if
										Export expression: 1 [G0]
									End line
								End loop
								# end Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACellList(ListIndex)-1 step: 1
								If: ContourType()=3
									Set Variable: RowCount:= BL_GetRowNodeCount()
									Set Variable: ColumnCount:= BL_GetColumnNodeCount()
									Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
										Set Variable: NodeX:= BL_GetColumnNodePosition(ColumnIndex)
										Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
											Set Variable: NodeY:= BL_GetRowNodePosition(RowIndex)
											# If: BL_GetCountOfCellLists()>0
											If: BL_PointInsideContour(ListIndex, NodeX, NodeY)
												Start a new line
													Export expression: NodeX; [G0]
													Export expression: NodeX; [G0]
													Export expression: NodeY; [G0]
													Export expression: NodeY; [G0]
													Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
													Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
												End line
												Start a new line
													Export expression: CNP; [G0]
													Export expression: 1; [G0]
												End line
											End if
											# end if BL_PointInsideContour(ListIndex, NodeX, NodeY)
											# End if
											# end If: BL_GetCountOfCellLists()>0
										End loop
										# end Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
									End loop
									# end Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
								End if
							End if
						End loop
						# end Loop for: Objects in layer: Specified State NL[ElementLayerIndex]
					End loop
					# End Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
					Start a new line
						Export expression: "END" [G0]
					End line
				End if
				Start a new line
					Export expression: "C------------------------------------------------------------------------------" [G0]
				End line
				Start a new line
					Export expression: "C.....     Specified flux b.c." [G0]
				End line
				# 3.4.1
				Evaluate expression: ProgressBarSetMessage(Message + "3.4")
				Start a new line
					Export expression: "C.3.4.1 .. RDFLXQ,RDFLXH,RDFLXS; all [T/F];(O) - NFBC [1.6] > 0" [G0]
				End line
				If: NFBC>0
					Set Variable: RDFLXQ:= 0
					Set Variable: RDFLXH:= 0
					Set Variable: RDFLXS:= 0
					If: UseSpecFlux|UseSpecHeatFlux|UseSpecSoluteFlux
						Loop for: Variable InnerTimeIndex from: 0 to: L_GetListSize(SpecifiedFluxList)-1 step: 1
							Set Variable: InnerCurrentTime:= L_GetFromList(SpecifiedFluxList, InnerTimeIndex)
							If: CurrentTime=InnerCurrentTime
								Set Variable: RDFLXQ:= UseSpecFlux
								Set Variable: RDFLXH:= UseSpecHeatFlux
								Set Variable: RDFLXS:= UseSpecSoluteFlux
							End if
						End loop
						# end Loop for: Variable InnerTimeIndex from: 0 to: L_GetListSize(SpecifiedFluxList)-1 step: 1
					End if
					Start a new line
						If: RDFLXQ
							Export expression: "T"; [G0]
						Else
							Export expression: "F"; [G0]
						End if
						If: RDFLXH
							Export expression: "T"; [G0]
						Else
							Export expression: "F"; [G0]
						End if
						If: RDFLXS
							Export expression: "T"; [G0]
						Else
							Export expression: "F"; [G0]
						End if
					End line
				End if
				# 3.4.2
				Start a new line
					Export expression: "C.3.4.2 .. QFFX,QFFY,QFFZ B.C. by x,y,z range {0.1-0.3};(O) -" [G0]
				End line
				Start a new line
					Export expression: "C..          RDFLXQ [3.4.1]; QFFX,QFFY,QFFZ  generic time units" [G0]
				End line
				If: RDFLXQ&(NFBC>0)
					Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
						# If ObjectPresent = 1, then something has to be exported for this element layer.
						Set Variable: ObjectPresent:= 0
						# Advance the progress bar by one position
						Evaluate expression: ProgressBarAdvance()
						# The BlockList PIE has a copy of the contours for some other layer.
						# Remove that copy.
						Evaluate expression: BL_FreeVertexList()
						# Read contour information for the current Unit into the BlockList PIE
						If: !BL_AddVertexLayer("Vertical Specified Flux Boundary NL" + ElementLayerIndex)
							Alert: "Out of Memory. Abort this process, free up memory and try again."
						End if
						# Initialize ListIndex
						Set Variable: ListIndex:= -1
						Loop for: Objects in layer: Vertical Specified Flux Boundary NL[ElementLayerIndex]
							# If ObjectPresent = 1, then something has to be exported for this element layer.
							Set Variable: ObjectPresent:= 1
							Set Variable: CurrentContourType:= ContourType()
							# Update ListIndex
							Set Variable: ListIndex:= ListIndex + 1
							If: !IsNA(Fluid Flux1)
								Set Variable: ATime:= 0
								# clear all data from ObjectTimeList
								Evaluate expression: L_FreeAList(ObjectTimeList)
								# store the times that are not $N/A in ObjectTimeList
								Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
									If: IsNumber(Time[InnerTimeIndex])
										Set Variable: ATime:= Time[InnerTimeIndex]
									End if
									Evaluate expression: L_AddToList(ObjectTimeList, ATime)
								End loop
								# determine the index number of the current time in ObjectTimeList
								Set Variable: InnerTimeIndex:= L_IndexOf(ObjectTimeList, CurrentTime)+1
								# Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
								# If: CurrentTime<=Time[InnerTimeIndex]
								# Set QFFX and QFFX_End for the current stress period.
								If: XFlux Positive[InnerTimeIndex]
									Set Variable: QFFX:= Fluid Flux[InnerTimeIndex]
									If: InterpFluidFlux&(CurrentContourType=2)
										Set Variable: QFFX_End:= End Fluid Flux[InnerTimeIndex]
									Else
										Set Variable: QFFX_End:= $N/A
									End if
								Else
									Set Variable: QFFX:= -Fluid Flux[InnerTimeIndex]
									If: InterpFluidFlux&(CurrentContourType=2)
										Set Variable: QFFX_End:= -End Fluid Flux[InnerTimeIndex]
									Else
										Set Variable: QFFX_End:= $N/A
									End if
								End if
								# End if
								# end If: CurrentTime<=Time[InnerTimeIndex]
								# End loop
								# Set the vlaue of CurrentVariable based on QFFX, QFFX_End and the position
								# along a contour.
								# The BlockList PIE is used here to determine where the contour crosses a row boundary.
								If: BL_GetCountOfACrossRowList(ListIndex)>0
									Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossRowList(ListIndex)-1 step: 1
										Set Variable: AColumn:= BL_GetCrossRowColumn(ListIndex, CellIndex)
										Set Variable: ARow:= BL_GetCrossRowRow(ListIndex, CellIndex)
										If: InterpFluidFlux&(CurrentContourType=2)&IsNumber(QFFX_End)
											Set Variable: CurrentVariable:= QFFX + (QFFX_End - QFFX) * BL_FractionOfLine(ListIndex, CellIndex)
										Else
											Set Variable: CurrentVariable:= QFFX
										End if
										# Store CurrentVariable in a zero-based 3D array.
										# VarXList identifies which 3D array.
										# AColumn - 1, ARow - 1, and 0 identify the position in the 3D array.
										Evaluate expression: L_Set3DListItem(VarXList, AColumn - 1, ARow - 1, 0, CurrentVariable)
										# Mark the current cell as having a value to export.
										Evaluate expression: L_Set3DListItem(VarPresentList, AColumn - 1, ARow - 1, 0, 1)
									End loop
									# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossRowList(ListIndex)-1 step: 1
								End if
								# If: BL_GetCountOfACrossRowList(ListIndex)>0
							End if
						End loop
						# Loop for: Objects in layer: Vertical Specified Flux Boundary NL[ElementLayerIndex]
						Set Variable: ListIndex:= -1
						Loop for: Objects in layer: Vertical Specified Flux Boundary NL[ElementLayerIndex]
							Set Variable: CurrentContourType:= ContourType()
							Set Variable: ListIndex:= ListIndex + 1
							# If ObjectPresent = 1, then something has to be exported for this element layer.
							Set Variable: ObjectPresent:= 1
							If: !IsNA(Fluid Flux1)
								Set Variable: ATime:= 0
								Evaluate expression: L_FreeAList(ObjectTimeList)
								Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
									If: IsNumber(Time[InnerTimeIndex])
										Set Variable: ATime:= Time[InnerTimeIndex]
									End if
									Evaluate expression: L_AddToList(ObjectTimeList, ATime)
								End loop
								Set Variable: InnerTimeIndex:= L_IndexOf(ObjectTimeList, CurrentTime)+1
								If: YFlux Positive[InnerTimeIndex]
									Set Variable: QFFY:= Fluid Flux[InnerTimeIndex]
									If: InterpFluidFlux&(CurrentContourType=2)
										Set Variable: QFFY_End:= End Fluid Flux[InnerTimeIndex]
									Else
										Set Variable: QFFY_End:= $N/A
									End if
								Else
									Set Variable: QFFY:= -Fluid Flux[InnerTimeIndex]
									If: InterpFluidFlux&(CurrentContourType=2)
										Set Variable: QFFY_End:= -End Fluid Flux[InnerTimeIndex]
									Else
										Set Variable: QFFY_End:= $N/A
									End if
								End if
								# End if
								If: BL_GetCountOfACrossColumnList(ListIndex)>0
									Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
										Set Variable: AColumn:= BL_GetCrossColumnColumn(ListIndex, CellIndex)
										Set Variable: ARow:= BL_GetCrossColumnRow(ListIndex, CellIndex)
										If: InterpFluidFlux&(CurrentContourType=2)&IsNumber(QFFY_End)
											Set Variable: CurrentVariable:= QFFY + (QFFY_End - QFFY) * BL_FractionOfLine(ListIndex, CellIndex)
										Else
											Set Variable: CurrentVariable:= QFFY
										End if
										Evaluate expression: L_Set3DListItem(VarYList, AColumn - 1, ARow - 1, 0, CurrentVariable)
										# Mark the current cell as having a value to export.
										Evaluate expression: L_Set3DListItem(VarPresentList, AColumn - 1, ARow - 1, 0, 1)
									End loop
									# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
								End if
								# If: BL_GetCountOfACrossColumnList(ListIndex)>0
							End if
						End loop
						# Loop for: Objects in layer: Vertical Specified Flux Boundary NL[ElementLayerIndex]
						# Clear Line information
						Evaluate expression: BL_FreeVertexList()
						# Read Line information for current Unit
						If: !BL_AddVertexLayer("Horizontal Specified Flux Boundary NL" + ElementLayerIndex)
							Alert: "Out of Memory. Abort this process, free up memory and try again."
						End if
						Set Variable: ListIndex:= -1
						Loop for: Objects in layer: Horizontal Specified Flux Boundary NL[ElementLayerIndex]
							# If ObjectPresent = 1, then something has to be exported for this element layer.
							Set Variable: ObjectPresent:= 1
							Set Variable: ListIndex:= ListIndex + 1
							If: !IsNA(Upward Fluid Flux1)
								Set Variable: CurrentContourType:= ContourType()
								Set Variable: ATime:= 0
								Evaluate expression: L_FreeAList(ObjectTimeList)
								Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
									If: IsNumber(Time[InnerTimeIndex])
										Set Variable: ATime:= Time[InnerTimeIndex]
									End if
									Evaluate expression: L_AddToList(ObjectTimeList, ATime)
								End loop
								Set Variable: InnerTimeIndex:= L_IndexOf(ObjectTimeList, CurrentTime)+1
								Set Variable: QFFZ:= Upward Fluid Flux[InnerTimeIndex]
								If: InterpFluidFlux&(CurrentContourType=2)
									Set Variable: QFFZ_End:= End Upward Fluid Flux[InnerTimeIndex]
								Else
									Set Variable: QFFZ_End:= $N/A
								End if
								If: ContourType()=3
									Set Variable: RowCount:= BL_GetRowNodeCount()
									Set Variable: ColumnCount:= BL_GetColumnNodeCount()
									Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
										Set Variable: NodeX:= BL_GetColumnNodePosition(ColumnIndex)
										Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
											Set Variable: NodeY:= BL_GetRowNodePosition(RowIndex)
											If: BL_PointInsideContour(ListIndex, NodeX, NodeY)
												Set Variable: CurrentVariable:= QFFZ
												Evaluate expression: L_Set3DListItem(VarZList, ColumnIndex, RowIndex, 0, CurrentVariable)
												# Mark the current cell as having a value to export.
												Evaluate expression: L_Set3DListItem(VarPresentList, ColumnIndex, RowIndex, 0, 1)
											End if
											# end if BL_PointInsideContour(ListIndex, NodeX, NodeY)
										End loop
										# end Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
									End loop
									# end Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
								End if
								If: BL_GetCountOfACellList(ListIndex)>0
									Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACellList(ListIndex)-1 step: 1
										Set Variable: AColumn:= BL_GetCellColumn(ListIndex, CellIndex)
										Set Variable: ARow:= BL_GetCellRow(ListIndex, CellIndex)
										If: (L_GetFrom3DList(BoundaryTypeArray, AColumn - 1, ARow - 1, ElementLayerIndex - 1)!=1)
											If: InterpFluidFlux&(CurrentContourType=2)&IsNumber(QFFZ_End)
												Set Variable: CurrentVariable:= QFFZ + (QFFZ_End - QFFZ) * BL_FractionOfLine(ListIndex, CellIndex)
											Else
												Set Variable: CurrentVariable:= QFFZ
											End if
											Evaluate expression: L_Set3DListItem(VarZList, AColumn - 1, ARow - 1, 0, CurrentVariable)
											# Mark the current cell as having a value to export.
											Evaluate expression: L_Set3DListItem(VarPresentList, AColumn - 1, ARow - 1, 0, 1)
										End if
									End loop
									# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
								End if
							End if
						End loop
						# end Loop for: Objects in layer: Horizontal Specified Flux Boundary NL[ElementLayerIndex]
						# If ObjectPresent = 1, then something has to be exported for this element layer.
						If: ObjectPresent
							Loop for: Variable YIndex from: 0 to: NY-1 step: 1
								Loop for: Variable XIndex from: 0 to: NX-1 step: 1
									# If the current cell is marked as having a value, export it.
									If: L_GetFrom3DList(VarPresentList, XIndex, YIndex, 0)=1
										Start a new line
											Export expression: L_GetFromList(ColumnList, XIndex); [G0]
											Export expression: L_GetFromList(ColumnList, XIndex); [G0]
											Export expression: L_GetFromList(RowList, YIndex); [G0]
											Export expression: L_GetFromList(RowList, YIndex); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
										End line
										Start a new line
											Export expression: L_GetFrom3DList(VarXList, XIndex, YIndex, 0); [G0]
											Export expression: 1; [G0]
											Export expression: L_GetFrom3DList(VarYList, XIndex, YIndex, 0); [G0]
											Export expression: 1; [G0]
											Export expression: L_GetFrom3DList(VarZList, XIndex, YIndex, 0); [G0]
											Export expression: 1; [G0]
										End line
									End if
								End loop
							End loop
							# Start a new line
							# 	Export expression: NthColumnPos(0); [G0]
							# 	Export expression: NthColumnPos(NumColumns()); [G0]
							# 	Export expression: NthRowPos(0); [G0]
							# 	Export expression: NthRowPos(NumRows()); [G0]
							# 	Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
							# 	Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
							# End line
							# Start a new line
							# 	Export expression: 0; [G0]
							# 	Export expression: 4; [G0]
							# 	Export expression: 0; [G0]
							# 	Export expression: 4; [G0]
							# 	Export expression: 0; [G0]
							# 	Export expression: 4; [G0]
							# End line
							# Loop for: Variable YIndex from: 0 to: NY-1 step: 1
							# 	Loop for: Variable XIndex from: 0 to: NX-1 step: 1
							# 		Start a new line
							# 			Export expression: L_GetFrom3DList(VarXList, XIndex, YIndex, 0) [G0]
							# 		End line
							# 	End loop
							# End loop
							# Loop for: Variable YIndex from: 0 to: NY-1 step: 1
							# 		Loop for: Variable XIndex from: 0 to: NX-1 step: 1
							# 			Start a new line
							# 				Export expression: L_GetFrom3DList(VarYList, XIndex, YIndex, 0) [G0]
							# 			End line
							# 		End loop
							# 	End loop
							# 	Loop for: Variable YIndex from: 0 to: NY-1 step: 1
							# 		Loop for: Variable XIndex from: 0 to: NX-1 step: 1
							# 			Start a new line
							# 				Export expression: L_GetFrom3DList(VarZList, XIndex, YIndex, 0) [G0]
							# 			End line
							# 		End loop
							# 	End loop
							# Set the contents of the 3D arrays to 0.
							Evaluate expression: L_ResetA3DList(VarXList)
							Evaluate expression: L_ResetA3DList(VarYList)
							Evaluate expression: L_ResetA3DList(VarZList)
							Evaluate expression: L_ResetA3DList(VarPresentList)
						End if
					End loop
					# End Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
					Start a new line
						Export expression: "END" [G0]
					End line
				End if
				# 3.4.3
				Start a new line
					Export expression: "C.3.4.3 .. UDENBC  by x,y,z range {0.1-0.3};(O) - RDFLXQ [3.4.1]" [G0]
				End line
				If: RDFLXQ&(NFBC>0)
					Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
						Evaluate expression: ProgressBarAdvance()
						Evaluate expression: BL_FreeVertexList()
						# Read Line information for current Unit
						If: !BL_AddVertexLayer("Vertical Specified Flux Boundary NL" + ElementLayerIndex)
							Alert: "Out of Memory. Abort this process, free up memory and try again."
						End if
						Set Variable: ListIndex:= -1
						Loop for: Objects in layer: Vertical Specified Flux Boundary NL[ElementLayerIndex]
							Set Variable: CurrentContourType:= ContourType()
							Set Variable: ListIndex:= ListIndex + 1
							If: !IsNA(Fluid Flux1)
								Set Variable: ATime:= 0
								Evaluate expression: L_FreeAList(ObjectTimeList)
								Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
									If: IsNumber(Time[InnerTimeIndex])
										Set Variable: ATime:= Time[InnerTimeIndex]
									End if
									Evaluate expression: L_AddToList(ObjectTimeList, ATime)
								End loop
								Set Variable: InnerTimeIndex:= L_IndexOf(ObjectTimeList, CurrentTime)+1
								# Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
								# If: CurrentTime<=Time[InnerTimeIndex]
								Set Variable: UDENBC:= Density[InnerTimeIndex]
								If: InterpFluxDensity&(CurrentContourType=2)
									Set Variable: UDENBC_End:= End Density[InnerTimeIndex]
								Else
									Set Variable: UDENBC_End:= $N/A
								End if
								# End if
								# end If: CurrentTime<=Time[InnerTimeIndex]
								# End loop
								If: BL_GetCountOfACrossRowList(ListIndex)>0
									Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossRowList(ListIndex)-1 step: 1
										Set Variable: AColumn:= BL_GetCrossRowColumn(ListIndex, CellIndex)
										Set Variable: ARow:= BL_GetCrossRowRow(ListIndex, CellIndex)
										Start a new line
											Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
											Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
											Export expression: L_GetFromList(RowList, ARow - 1); [G0]
											Export expression: L_GetFromList(RowList, ARow - 1); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
										End line
										Start a new line
											If: InterpFluxDensity&(CurrentContourType=2)&IsNumber(UDENBC_End)
												Export expression: UDENBC + (UDENBC_End - UDENBC) * BL_FractionOfLine(ListIndex, CellIndex); [G0]
											Else
												Export expression: UDENBC; [G0]
											End if
											# Export expression: UDENBC; [G0]
											Export expression: 1; [G0]
										End line
									End loop
									# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossRowList(ListIndex)-1 step: 1
								End if
								# If: BL_GetCountOfACrossRowList(ListIndex)>0
							End if
						End loop
						# Loop for: Objects in layer: Vertical Specified Flux Boundary NL[ElementLayerIndex]
						Set Variable: ListIndex:= -1
						Loop for: Objects in layer: Vertical Specified Flux Boundary NL[ElementLayerIndex]
							Set Variable: CurrentContourType:= ContourType()
							Set Variable: ListIndex:= ListIndex + 1
							If: !IsNA(Fluid Flux1)
								Set Variable: ATime:= 0
								Evaluate expression: L_FreeAList(ObjectTimeList)
								Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
									If: IsNumber(Time[InnerTimeIndex])
										Set Variable: ATime:= Time[InnerTimeIndex]
									End if
									Evaluate expression: L_AddToList(ObjectTimeList, ATime)
								End loop
								Set Variable: InnerTimeIndex:= L_IndexOf(ObjectTimeList, CurrentTime)+1
								# Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
								# If: CurrentTime<=Time[InnerTimeIndex]
								Set Variable: UDENBC:= Density[InnerTimeIndex]
								If: InterpFluxDensity&(CurrentContourType=2)
									Set Variable: UDENBC_End:= End Density[InnerTimeIndex]
								Else
									Set Variable: UDENBC_End:= $N/A
								End if
								# End if
								# end If: CurrentTime<=Time[InnerTimeIndex]
								# End loop
								If: BL_GetCountOfACrossColumnList(ListIndex)>0
									Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
										Set Variable: AColumn:= BL_GetCrossColumnColumn(ListIndex, CellIndex)
										Set Variable: ARow:= BL_GetCrossColumnRow(ListIndex, CellIndex)
										Start a new line
											Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
											Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
											Export expression: L_GetFromList(RowList, ARow - 1); [G0]
											Export expression: L_GetFromList(RowList, ARow - 1); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
										End line
										Start a new line
											If: InterpFluxDensity&(CurrentContourType=2)&IsNumber(UDENBC_End)
												Export expression: UDENBC + (UDENBC_End - UDENBC) * BL_FractionOfLine(ListIndex, CellIndex); [G0]
											Else
												Export expression: UDENBC; [G0]
											End if
											# Export expression: UDENBC; [G0]
											Export expression: 1; [G0]
										End line
									End loop
									# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
								End if
								# If: BL_GetCountOfACrossColumnList(ListIndex)>0
							End if
						End loop
						# Loop for: Objects in layer: Vertical Specified Flux Boundary NL[ElementLayerIndex]
						# Clear Line information
						Evaluate expression: BL_FreeVertexList()
						# Read Line information for current Unit
						If: !BL_AddVertexLayer("Horizontal Specified Flux Boundary NL" + ElementLayerIndex)
							Alert: "Out of Memory. Abort this process, free up memory and try again."
						End if
						Set Variable: ListIndex:= -1
						Loop for: Objects in layer: Horizontal Specified Flux Boundary NL[ElementLayerIndex]
							Set Variable: ListIndex:= ListIndex + 1
							If: !IsNA(Upward Fluid Flux1)
								Set Variable: ATime:= 0
								Evaluate expression: L_FreeAList(ObjectTimeList)
								Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
									If: IsNumber(Time[InnerTimeIndex])
										Set Variable: ATime:= Time[InnerTimeIndex]
									End if
									Evaluate expression: L_AddToList(ObjectTimeList, ATime)
								End loop
								Set Variable: InnerTimeIndex:= L_IndexOf(ObjectTimeList, CurrentTime)+1
								# Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
								# If: CurrentTime<=Time[InnerTimeIndex]
								Set Variable: UDENBC:= Density[InnerTimeIndex]
								If: InterpFluxDensity&(CurrentContourType=2)
									Set Variable: UDENBC_End:= End Density[InnerTimeIndex]
								Else
									Set Variable: UDENBC_End:= $N/A
								End if
								# End if
								# end If: CurrentTime<=Time[InnerTimeIndex]
								# End loop
								If: ContourType()=3
									Set Variable: RowCount:= BL_GetRowNodeCount()
									Set Variable: ColumnCount:= BL_GetColumnNodeCount()
									Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
										Set Variable: NodeX:= BL_GetColumnNodePosition(ColumnIndex)
										Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
											Set Variable: NodeY:= BL_GetRowNodePosition(RowIndex)
											# If: BL_GetCountOfCellLists()>0
											# Loop for: Variable ListIndex from: 0 to: BL_GetCountOfCellLists()-1 step: 1
											If: BL_PointInsideContour(ListIndex, NodeX, NodeY)
												Start a new line
													Export expression: NodeX; [G0]
													Export expression: NodeX; [G0]
													Export expression: NodeY; [G0]
													Export expression: NodeY; [G0]
													Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
													Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
												End line
												Start a new line
													Export expression: UDENBC; [G0]
													Export expression: 1; [G0]
												End line
											End if
											# end if BL_PointInsideContour(ListIndex, NodeX, NodeY)
											# End loop
											# end Loop for: Variable ListIndex from: 0 to: BL_GetCountOfCellLists()-1 step: 1
											# End if
											# end If: BL_GetCountOfCellLists()>0
										End loop
										# end Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
									End loop
									# end Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
								End if
								If: BL_GetCountOfACellList(ListIndex)>0
									Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACellList(ListIndex)-1 step: 1
										Set Variable: AColumn:= BL_GetCellColumn(ListIndex, CellIndex)
										Set Variable: ARow:= BL_GetCellRow(ListIndex, CellIndex)
										If: (L_GetFrom3DList(BoundaryTypeArray, AColumn - 1, ARow - 1, ElementLayerIndex - 1)!=1)
											Start a new line
												Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
												Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
												Export expression: L_GetFromList(RowList, ARow - 1); [G0]
												Export expression: L_GetFromList(RowList, ARow - 1); [G0]
												Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
												Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
											End line
											Start a new line
												If: InterpFluxDensity&(CurrentContourType=2)&IsNumber(UDENBC_End)
													Export expression: UDENBC + (UDENBC_End - UDENBC) * BL_FractionOfLine(ListIndex, CellIndex); [G0]
												Else
													Export expression: UDENBC; [G0]
												End if
												# Export expression: UDENBC; [G0]
												Export expression: 1; [G0]
											End line
										End if
									End loop
									# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
								End if
							End if
						End loop
						# end Loop for: Objects in layer: Horizontal Specified Flux Boundary NL[ElementLayerIndex]
					End loop
					# End Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
					Start a new line
						Export expression: "END" [G0]
					End line
				End if
				# 3.4.4
				Start a new line
					Export expression: "C.3.4.4 .. TFLX B.C. by x,y,z range {0.1-0.3};(O) - RDFLXQ [3.4.1] and" [G0]
				End line
				Start a new line
					Export expression: "C..          HEAT [1.4]" [G0]
				End line
				If: RDFLXQ&HEAT&(NFBC>0)
					Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
						Evaluate expression: ProgressBarAdvance()
						Evaluate expression: BL_FreeVertexList()
						# Read Line information for current Unit
						If: !BL_AddVertexLayer("Vertical Specified Flux Boundary NL" + ElementLayerIndex)
							Alert: "Out of Memory. Abort this process, free up memory and try again."
						End if
						Set Variable: ListIndex:= -1
						Loop for: Objects in layer: Vertical Specified Flux Boundary NL[ElementLayerIndex]
							Set Variable: CurrentContourType:= ContourType()
							Set Variable: ListIndex:= ListIndex + 1
							If: !IsNA(Fluid Flux1)
								Set Variable: ATime:= 0
								Evaluate expression: L_FreeAList(ObjectTimeList)
								Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
									If: IsNumber(Time[InnerTimeIndex])
										Set Variable: ATime:= Time[InnerTimeIndex]
									End if
									Evaluate expression: L_AddToList(ObjectTimeList, ATime)
								End loop
								Set Variable: InnerTimeIndex:= L_IndexOf(ObjectTimeList, CurrentTime)+1
								# Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
								# If: CurrentTime<=Time[InnerTimeIndex]
								Set Variable: TFLX:= Temperature[InnerTimeIndex]
								If: InterpFluxTemperature&(CurrentContourType=2)
									Set Variable: TFLX_End:= End Temperature[InnerTimeIndex]
								Else
									Set Variable: TFLX_End:= $N/A
								End if
								# End if
								# end If: CurrentTime<=Time[InnerTimeIndex]
								# End loop
								If: BL_GetCountOfACrossRowList(ListIndex)>0
									Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossRowList(ListIndex)-1 step: 1
										Set Variable: AColumn:= BL_GetCrossRowColumn(ListIndex, CellIndex)
										Set Variable: ARow:= BL_GetCrossRowRow(ListIndex, CellIndex)
										Start a new line
											Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
											Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
											Export expression: L_GetFromList(RowList, ARow - 1); [G0]
											Export expression: L_GetFromList(RowList, ARow - 1); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
										End line
										Start a new line
											If: InterpFluxTemperature&(CurrentContourType=2)&IsNumber(TFLX_End)
												Export expression: TFLX + (TFLX_End - TFLX) * BL_FractionOfLine(ListIndex, CellIndex); [G0]
											Else
												Export expression: TFLX; [G0]
											End if
											# Export expression: TFLX; [G0]
											Export expression: 1; [G0]
										End line
									End loop
									# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossRowList(ListIndex)-1 step: 1
								End if
								# If: BL_GetCountOfACrossRowList(ListIndex)>0
							End if
						End loop
						# Loop for: Objects in layer: Vertical Specified Flux Boundary NL[ElementLayerIndex]
						Set Variable: ListIndex:= -1
						Loop for: Objects in layer: Vertical Specified Flux Boundary NL[ElementLayerIndex]
							Set Variable: CurrentContourType:= ContourType()
							Set Variable: ListIndex:= ListIndex + 1
							If: !IsNA(Fluid Flux1)
								Set Variable: ATime:= 0
								Evaluate expression: L_FreeAList(ObjectTimeList)
								Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
									If: IsNumber(Time[InnerTimeIndex])
										Set Variable: ATime:= Time[InnerTimeIndex]
									End if
									Evaluate expression: L_AddToList(ObjectTimeList, ATime)
								End loop
								Set Variable: InnerTimeIndex:= L_IndexOf(ObjectTimeList, CurrentTime)+1
								# Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
								# If: CurrentTime<=Time[InnerTimeIndex]
								Set Variable: TFLX:= Temperature[InnerTimeIndex]
								If: InterpFluxTemperature&(CurrentContourType=2)
									Set Variable: TFLX_End:= End Temperature[InnerTimeIndex]
								Else
									Set Variable: TFLX_End:= $N/A
								End if
								# End if
								# end If: CurrentTime<=Time[InnerTimeIndex]
								# End loop
								If: BL_GetCountOfACrossColumnList(ListIndex)>0
									Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
										Set Variable: AColumn:= BL_GetCrossColumnColumn(ListIndex, CellIndex)
										Set Variable: ARow:= BL_GetCrossColumnRow(ListIndex, CellIndex)
										Start a new line
											Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
											Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
											Export expression: L_GetFromList(RowList, ARow - 1); [G0]
											Export expression: L_GetFromList(RowList, ARow - 1); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
										End line
										Start a new line
											If: InterpFluxTemperature&(CurrentContourType=2)&IsNumber(TFLX_End)
												Export expression: TFLX + (TFLX_End - TFLX) * BL_FractionOfLine(ListIndex, CellIndex); [G0]
											Else
												Export expression: TFLX; [G0]
											End if
											# Export expression: TFLX; [G0]
											Export expression: 1; [G0]
										End line
									End loop
									# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
								End if
								# If: BL_GetCountOfACrossColumnList(ListIndex)>0
							End if
						End loop
						# Loop for: Objects in layer: Vertical Specified Flux Boundary NL[ElementLayerIndex]
						# Clear Line information
						Evaluate expression: BL_FreeVertexList()
						# Read Line information for current Unit
						If: !BL_AddVertexLayer("Horizontal Specified Flux Boundary NL" + ElementLayerIndex)
							Alert: "Out of Memory. Abort this process, free up memory and try again."
						End if
						Set Variable: ListIndex:= -1
						Loop for: Objects in layer: Horizontal Specified Flux Boundary NL[ElementLayerIndex]
							Set Variable: ListIndex:= ListIndex + 1
							If: !IsNA(Upward Fluid Flux1)
								Set Variable: ATime:= 0
								Evaluate expression: L_FreeAList(ObjectTimeList)
								Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
									If: IsNumber(Time[InnerTimeIndex])
										Set Variable: ATime:= Time[InnerTimeIndex]
									End if
									Evaluate expression: L_AddToList(ObjectTimeList, ATime)
								End loop
								Set Variable: InnerTimeIndex:= L_IndexOf(ObjectTimeList, CurrentTime)+1
								# Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
								# If: CurrentTime<=Time[InnerTimeIndex]
								Set Variable: TFLX:= Temperature[InnerTimeIndex]
								If: InterpFluxTemperature&(CurrentContourType=2)
									Set Variable: TFLX_End:= End Temperature[InnerTimeIndex]
								Else
									Set Variable: TFLX_End:= $N/A
								End if
								# End if
								# end If: CurrentTime<=Time[InnerTimeIndex]
								# End loop
								If: ContourType()=3
									Set Variable: RowCount:= BL_GetRowNodeCount()
									Set Variable: ColumnCount:= BL_GetColumnNodeCount()
									Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
										Set Variable: NodeX:= BL_GetColumnNodePosition(ColumnIndex)
										Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
											Set Variable: NodeY:= BL_GetRowNodePosition(RowIndex)
											# If: BL_GetCountOfCellLists()>0
											# Loop for: Variable ListIndex from: 0 to: BL_GetCountOfCellLists()-1 step: 1
											If: BL_PointInsideContour(ListIndex, NodeX, NodeY)
												Start a new line
													Export expression: NodeX; [G0]
													Export expression: NodeX; [G0]
													Export expression: NodeY; [G0]
													Export expression: NodeY; [G0]
													Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
													Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
												End line
												Start a new line
													Export expression: TFLX; [G0]
													Export expression: 1; [G0]
												End line
											End if
											# end if BL_PointInsideContour(ListIndex, NodeX, NodeY)
											# End loop
											# end Loop for: Variable ListIndex from: 0 to: BL_GetCountOfCellLists()-1 step: 1
											# End if
											# end If: BL_GetCountOfCellLists()>0
										End loop
										# end Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
									End loop
									# end Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
								End if
								If: BL_GetCountOfACellList(ListIndex)>0
									Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACellList(ListIndex)-1 step: 1
										Set Variable: AColumn:= BL_GetCellColumn(ListIndex, CellIndex)
										Set Variable: ARow:= BL_GetCellRow(ListIndex, CellIndex)
										If: (L_GetFrom3DList(BoundaryTypeArray, AColumn - 1, ARow - 1, ElementLayerIndex - 1)!=1)
											Start a new line
												Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
												Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
												Export expression: L_GetFromList(RowList, ARow - 1); [G0]
												Export expression: L_GetFromList(RowList, ARow - 1); [G0]
												Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
												Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
											End line
											Start a new line
												If: InterpFluxTemperature&(CurrentContourType=2)&IsNumber(TFLX_End)
													Export expression: TFLX + (TFLX_End - TFLX) * BL_FractionOfLine(ListIndex, CellIndex); [G0]
												Else
													Export expression: TFLX; [G0]
												End if
												# Export expression: TFLX; [G0]
												Export expression: 1; [G0]
											End line
										End if
									End loop
									# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
								End if
							End if
						End loop
						# end Loop for: Objects in layer: Horizontal Specified Flux Boundary NL[ElementLayerIndex]
					End loop
					# End Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
					Start a new line
						Export expression: "END" [G0]
					End line
				End if
				# 3.4.5
				Start a new line
					Export expression: "C.3.4.5 .. CFLX B.C. by x,y,z range {0.1-0.3};(O) - RDFLXQ [3.4.1] and" [G0]
				End line
				Start a new line
					Export expression: "C..          SOLUTE [1.4]" [G0]
				End line
				If: RDFLXQ&SOLUTE&(NFBC>0)
					Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
						Evaluate expression: ProgressBarAdvance()
						Evaluate expression: BL_FreeVertexList()
						# Read Line information for current Unit
						If: !BL_AddVertexLayer("Vertical Specified Flux Boundary NL" + ElementLayerIndex)
							Alert: "Out of Memory. Abort this process, free up memory and try again."
						End if
						Set Variable: ListIndex:= -1
						Loop for: Objects in layer: Vertical Specified Flux Boundary NL[ElementLayerIndex]
							Set Variable: CurrentContourType:= ContourType()
							Set Variable: ListIndex:= ListIndex + 1
							Set Variable: MassFractionTest:= 0
							If: SCALMF
								If: !IsNA(Scaled Mass Fraction1)
									Set Variable: MassFractionTest:= 1
								End if
							Else
								If: !IsNA(Mass Fraction1)
									Set Variable: MassFractionTest:= 1
								End if
							End if
							If: MassFractionTest
								Set Variable: ATime:= 0
								Evaluate expression: L_FreeAList(ObjectTimeList)
								Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
									If: IsNumber(Time[InnerTimeIndex])
										Set Variable: ATime:= Time[InnerTimeIndex]
									End if
									Evaluate expression: L_AddToList(ObjectTimeList, ATime)
								End loop
								Set Variable: InnerTimeIndex:= L_IndexOf(ObjectTimeList, CurrentTime)+1
								# Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
								# If: CurrentTime<=Time[InnerTimeIndex]
								If: SCALMF
									Set Variable: CFLX:= Scaled Mass Fraction[InnerTimeIndex]
									If: (InterpFluxScMassFrac)&(CurrentContourType=2)
										Set Variable: CFLX_End:= End Scaled Mass Fraction[InnerTimeIndex]
									Else
										Set Variable: CFLX_End:= $N/A
									End if
								Else
									Set Variable: CFLX:= Mass Fraction[InnerTimeIndex]
									If: (InterpFluxMassFrac)&(CurrentContourType=2)
										Set Variable: CFLX_End:= End Mass Fraction[InnerTimeIndex]
									Else
										Set Variable: CFLX_End:= $N/A
									End if
								End if
								# End if
								# end If: CurrentTime<=Time[InnerTimeIndex]
								# End loop
								If: BL_GetCountOfACrossRowList(ListIndex)>0
									Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossRowList(ListIndex)-1 step: 1
										Set Variable: AColumn:= BL_GetCrossRowColumn(ListIndex, CellIndex)
										Set Variable: ARow:= BL_GetCrossRowRow(ListIndex, CellIndex)
										Start a new line
											Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
											Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
											Export expression: L_GetFromList(RowList, ARow - 1); [G0]
											Export expression: L_GetFromList(RowList, ARow - 1); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
										End line
										Start a new line
											If: ((InterpFluxMassFrac&!SCALMF)|(InterpFluxScMassFrac&SCALMF))&(CurrentContourType=2)&IsNumber(CFLX_End)
												Export expression: CFLX + (CFLX_End - CFLX) * BL_FractionOfLine(ListIndex, CellIndex); [G0]
											Else
												Export expression: CFLX; [G0]
											End if
											# Export expression: CFLX; [G0]
											Export expression: 1; [G0]
										End line
									End loop
									# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossRowList(ListIndex)-1 step: 1
								End if
								# If: BL_GetCountOfACrossRowList(ListIndex)>0
							End if
						End loop
						# Loop for: Objects in layer: Vertical Specified Flux Boundary NL[ElementLayerIndex]
						Set Variable: ListIndex:= -1
						Loop for: Objects in layer: Vertical Specified Flux Boundary NL[ElementLayerIndex]
							Set Variable: CurrentContourType:= ContourType()
							Set Variable: ListIndex:= ListIndex + 1
							Set Variable: MassFractionTest:= 0
							If: SCALMF
								If: !IsNA(Scaled Mass Fraction1)
									Set Variable: MassFractionTest:= 1
								End if
							Else
								If: !IsNA(Mass Fraction1)
									Set Variable: MassFractionTest:= 1
								End if
							End if
							If: MassFractionTest
								Set Variable: ATime:= 0
								Evaluate expression: L_FreeAList(ObjectTimeList)
								Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
									If: IsNumber(Time[InnerTimeIndex])
										Set Variable: ATime:= Time[InnerTimeIndex]
									End if
									Evaluate expression: L_AddToList(ObjectTimeList, ATime)
								End loop
								Set Variable: InnerTimeIndex:= L_IndexOf(ObjectTimeList, CurrentTime)+1
								# Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
								# If: CurrentTime<=Time[InnerTimeIndex]
								If: SCALMF
									Set Variable: CFLX:= Scaled Mass Fraction[InnerTimeIndex]
									If: (InterpFluxScMassFrac)&(CurrentContourType=2)
										Set Variable: CFLX_End:= End Scaled Mass Fraction[InnerTimeIndex]
									Else
										Set Variable: CFLX_End:= $N/A
									End if
								Else
									Set Variable: CFLX:= Mass Fraction[InnerTimeIndex]
									If: (InterpFluxMassFrac)&(CurrentContourType=2)
										Set Variable: CFLX_End:= End Mass Fraction[InnerTimeIndex]
									Else
										Set Variable: CFLX_End:= $N/A
									End if
								End if
								# End if
								# end If: CurrentTime<=Time[InnerTimeIndex]
								# End loop
								If: BL_GetCountOfACrossColumnList(ListIndex)>0
									Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
										Set Variable: 
										Set Variable: AColumn:= BL_GetCrossColumnColumn(ListIndex, CellIndex)
										Set Variable: ARow:= BL_GetCrossColumnRow(ListIndex, CellIndex)
										Start a new line
											Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
											Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
											Export expression: L_GetFromList(RowList, ARow - 1); [G0]
											Export expression: L_GetFromList(RowList, ARow - 1); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
										End line
										Start a new line
											If: ((InterpFluxMassFrac&!SCALMF)|(InterpFluxScMassFrac&SCALMF))&(CurrentContourType=2)&IsNumber(CFLX_End)
												Export expression: CFLX + (CFLX_End - CFLX) * BL_FractionOfLine(ListIndex, CellIndex); [G0]
											Else
												Export expression: CFLX; [G0]
											End if
											# Export expression: CFLX; [G0]
											Export expression: 1; [G0]
										End line
									End loop
									# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
								End if
								# If: BL_GetCountOfACrossColumnList(ListIndex)>0
							End if
						End loop
						# Loop for: Objects in layer: Vertical Specified Flux Boundary NL[ElementLayerIndex]
						# Clear Line information
						Evaluate expression: BL_FreeVertexList()
						# Read Line information for current Unit
						If: !BL_AddVertexLayer("Horizontal Specified Flux Boundary NL" + ElementLayerIndex)
							Alert: "Out of Memory. Abort this process, free up memory and try again."
						End if
						Set Variable: ListIndex:= -1
						Loop for: Objects in layer: Horizontal Specified Flux Boundary NL[ElementLayerIndex]
							Set Variable: ListIndex:= ListIndex + 1
							Set Variable: MassFractionTest:= 0
							If: SCALMF
								If: !IsNA(Scaled Mass Fraction1)
									Set Variable: MassFractionTest:= 1
								End if
							Else
								If: !IsNA(Mass Fraction1)
									Set Variable: MassFractionTest:= 1
								End if
							End if
							If: MassFractionTest
								Set Variable: ATime:= 0
								Evaluate expression: L_FreeAList(ObjectTimeList)
								Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
									If: IsNumber(Time[InnerTimeIndex])
										Set Variable: ATime:= Time[InnerTimeIndex]
									End if
									Evaluate expression: L_AddToList(ObjectTimeList, ATime)
								End loop
								Set Variable: InnerTimeIndex:= L_IndexOf(ObjectTimeList, CurrentTime)+1
								# Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
								# If: CurrentTime<=Time[InnerTimeIndex]
								If: SCALMF
									Set Variable: CFLX:= Scaled Mass Fraction[InnerTimeIndex]
									If: (InterpFluxScMassFrac)&(CurrentContourType=2)
										Set Variable: CFLX_End:= End Scaled Mass Fraction[InnerTimeIndex]
									Else
										Set Variable: CFLX_End:= $N/A
									End if
								Else
									Set Variable: CFLX:= Mass Fraction[InnerTimeIndex]
									If: ((InterpFluxMassFrac))&(CurrentContourType=2)
										Set Variable: CFLX_End:= End Mass Fraction[InnerTimeIndex]
									Else
										Set Variable: CFLX_End:= $N/A
									End if
								End if
								# End if
								# end If: CurrentTime<=Time[InnerTimeIndex]
								# End loop
								If: ContourType()=3
									Set Variable: RowCount:= BL_GetRowNodeCount()
									Set Variable: ColumnCount:= BL_GetColumnNodeCount()
									Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
										Set Variable: NodeX:= BL_GetColumnNodePosition(ColumnIndex)
										Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
											Set Variable: NodeY:= BL_GetRowNodePosition(RowIndex)
											# If: BL_GetCountOfCellLists()>0
											# Loop for: Variable ListIndex from: 0 to: BL_GetCountOfCellLists()-1 step: 1
											If: BL_PointInsideContour(ListIndex, NodeX, NodeY)
												Start a new line
													Export expression: NodeX; [G0]
													Export expression: NodeX; [G0]
													Export expression: NodeY; [G0]
													Export expression: NodeY; [G0]
													Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
													Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
												End line
												Start a new line
													Export expression: CFLX; [G0]
													Export expression: 1; [G0]
												End line
											End if
											# end if BL_PointInsideContour(ListIndex, NodeX, NodeY)
											# End loop
											# end Loop for: Variable ListIndex from: 0 to: BL_GetCountOfCellLists()-1 step: 1
											# End if
											# end If: BL_GetCountOfCellLists()>0
										End loop
										# end Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
									End loop
									# end Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
								End if
								If: BL_GetCountOfACellList(ListIndex)>0
									Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACellList(ListIndex)-1 step: 1
										Set Variable: AColumn:= BL_GetCellColumn(ListIndex, CellIndex)
										Set Variable: ARow:= BL_GetCellRow(ListIndex, CellIndex)
										If: (L_GetFrom3DList(BoundaryTypeArray, AColumn - 1, ARow - 1, ElementLayerIndex - 1)!=1)
											Start a new line
												Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
												Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
												Export expression: L_GetFromList(RowList, ARow - 1); [G0]
												Export expression: L_GetFromList(RowList, ARow - 1); [G0]
												Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
												Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
											End line
											Start a new line
												If: ((InterpFluxMassFrac&!SCALMF)|(InterpFluxScMassFrac&SCALMF))&(CurrentContourType=2)&IsNumber(CFLX_End)
													Export expression: CFLX + (CFLX_End - CFLX) * BL_FractionOfLine(ListIndex, CellIndex); [G0]
												Else
													Export expression: CFLX; [G0]
												End if
												# Export expression: CFLX; [G0]
												Export expression: 1; [G0]
											End line
										End if
									End loop
									# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
								End if
							End if
						End loop
						# end Loop for: Objects in layer: Horizontal Specified Flux Boundary NL[ElementLayerIndex]
					End loop
					# End Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
					Start a new line
						Export expression: "END" [G0]
					End line
				End if
				# 3.4.6
				Start a new line
					Export expression: "C.3.4.6 .. QHFX,QHFY,QHFZ B.C. by x,y,z range {0.1-0.3};(O) - RDFLXH [3.4.1]" [G0]
				End line
				Start a new line
					Export expression: "C.....  QHFX,QHFY,QHFZ specific time units W/m^2 or BTU/hr-ft^2" [G0]
				End line
				If: RDFLXH&(NFBC>0)
					Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
						Set Variable: ObjectPresent:= 0
						Evaluate expression: ProgressBarAdvance()
						Evaluate expression: BL_FreeVertexList()
						# Read Line information for current Unit
						If: !BL_AddVertexLayer("Vertical Specified Flux Boundary NL" + ElementLayerIndex)
							Alert: "Out of Memory. Abort this process, free up memory and try again."
						End if
						Set Variable: ListIndex:= -1
						Loop for: Objects in layer: Vertical Specified Flux Boundary NL[ElementLayerIndex]
							Set Variable: ObjectPresent:= 1
							Set Variable: ListIndex:= ListIndex + 1
							If: !IsNA(Heat Flux1)
								Set Variable: ATime:= 0
								Evaluate expression: L_FreeAList(ObjectTimeList)
								Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
									If: IsNumber(Time[InnerTimeIndex])
										Set Variable: ATime:= Time[InnerTimeIndex]
									End if
									Evaluate expression: L_AddToList(ObjectTimeList, ATime)
								End loop
								Set Variable: InnerTimeIndex:= L_IndexOf(ObjectTimeList, CurrentTime)+1
								# Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
								# If: CurrentTime<=Time[InnerTimeIndex]
								If: XFlux Positive[InnerTimeIndex]
									Set Variable: QHFX:= Heat Flux[InnerTimeIndex]
								Else
									Set Variable: QHFX:= -Heat Flux[InnerTimeIndex]
								End if
								# End if
								# end If: CurrentTime<=Time[InnerTimeIndex]
								# End loop
								If: BL_GetCountOfACrossRowList(ListIndex)>0
									Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossRowList(ListIndex)-1 step: 1
										Set Variable: AColumn:= BL_GetCrossRowColumn(ListIndex, CellIndex)
										Set Variable: ARow:= BL_GetCrossRowRow(ListIndex, CellIndex)
										# Set Variable: CurrentVariable:= QHFX * Abs(BL_GetCrossColumnCompositeX(ListIndex, CellIndex)) / (Abs(BL_GetSumCrossColumnCompositeX(ListIndex)) + Abs(BL_GetSumCrossRowCompositeY(ListIndex))) * (HST3D_CellTop(ElementLayerIndex) - HST3D_CellBottom(ElementLayerIndex))
										Evaluate expression: L_Set3DListItem(VarXList, AColumn - 1, ARow - 1, 0, QHFX)
										Evaluate expression: L_Set3DListItem(VarPresentList, AColumn - 1, ARow - 1, 0, 1)
									End loop
									# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossRowList(ListIndex)-1 step: 1
								End if
								# If: BL_GetCountOfACrossRowList(ListIndex)>0
							End if
						End loop
						# Loop for: Objects in layer: Vertical Specified Flux Boundary NL[ElementLayerIndex]
						Set Variable: ListIndex:= -1
						Loop for: Objects in layer: Vertical Specified Flux Boundary NL[ElementLayerIndex]
							Set Variable: ObjectPresent:= 1
							Set Variable: ListIndex:= ListIndex + 1
							If: !IsNA(Heat Flux1)
								Set Variable: ATime:= 0
								Evaluate expression: L_FreeAList(ObjectTimeList)
								Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
									If: IsNumber(Time[InnerTimeIndex])
										Set Variable: ATime:= Time[InnerTimeIndex]
									End if
									Evaluate expression: L_AddToList(ObjectTimeList, ATime)
								End loop
								Set Variable: InnerTimeIndex:= L_IndexOf(ObjectTimeList, CurrentTime)+1
								# Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
								# If: CurrentTime<=Time[InnerTimeIndex]
								If: YFlux Positive[InnerTimeIndex]
									Set Variable: QHFY:= Heat Flux[InnerTimeIndex]
								Else
									Set Variable: QHFY:= -Heat Flux[InnerTimeIndex]
								End if
								# End if
								# end If: CurrentTime<=Time[InnerTimeIndex]
								# End loop
								If: BL_GetCountOfACrossColumnList(ListIndex)>0
									Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
										Set Variable: AColumn:= BL_GetCrossColumnColumn(ListIndex, CellIndex)
										Set Variable: ARow:= BL_GetCrossColumnRow(ListIndex, CellIndex)
										# Set Variable: CurrentVariable:= QHFY * Abs(BL_GetCrossColumnCompositeX(ListIndex, CellIndex)) / (Abs(BL_GetSumCrossColumnCompositeX(ListIndex)) + Abs(BL_GetSumCrossRowCompositeY(ListIndex))) * (HST3D_CellTop(ElementLayerIndex) - HST3D_CellBottom(ElementLayerIndex))
										Evaluate expression: L_Set3DListItem(VarYList, AColumn - 1, ARow - 1, 0, QHFY)
										Evaluate expression: L_Set3DListItem(VarPresentList, AColumn - 1, ARow - 1, 0, 1)
									End loop
									# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
								End if
								# If: BL_GetCountOfACrossColumnList(ListIndex)>0
							End if
						End loop
						# Loop for: Objects in layer: Vertical Specified Flux Boundary NL[ElementLayerIndex]
						# Clear Line information
						Evaluate expression: BL_FreeVertexList()
						# Read Line information for current Unit
						If: !BL_AddVertexLayer("Horizontal Specified Flux Boundary NL" + ElementLayerIndex)
							Alert: "Out of Memory. Abort this process, free up memory and try again."
						End if
						Set Variable: ListIndex:= -1
						Loop for: Objects in layer: Horizontal Specified Flux Boundary NL[ElementLayerIndex]
							Set Variable: ObjectPresent:= 1
							Set Variable: ListIndex:= ListIndex + 1
							If: !IsNA(Upward Heat Flux1)
								Set Variable: ATime:= 0
								Evaluate expression: L_FreeAList(ObjectTimeList)
								Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
									If: IsNumber(Time[InnerTimeIndex])
										Set Variable: ATime:= Time[InnerTimeIndex]
									End if
									Evaluate expression: L_AddToList(ObjectTimeList, ATime)
								End loop
								Set Variable: InnerTimeIndex:= L_IndexOf(ObjectTimeList, CurrentTime)+1
								Set Variable: QHFZ:= Upward Heat Flux[InnerTimeIndex]
								If: ContourType()=3
									Set Variable: RowCount:= BL_GetRowNodeCount()
									Set Variable: ColumnCount:= BL_GetColumnNodeCount()
									Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
										Set Variable: NodeX:= BL_GetColumnNodePosition(ColumnIndex)
										Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
											Set Variable: NodeY:= BL_GetRowNodePosition(RowIndex)
											If: BL_PointInsideContour(ListIndex, NodeX, NodeY)
												# Set Variable: CurrentVariable:= QHFZ / BL_GetCellArea(ColumnIndex+1, RowIndex+1)
												Evaluate expression: L_Set3DListItem(VarZList, ColumnIndex, RowIndex, 0, QHFZ)
												Evaluate expression: L_Set3DListItem(VarPresentList, ColumnIndex, RowIndex, 0, 1)
											End if
											# end if BL_PointInsideContour(ListIndex, NodeX, NodeY)
										End loop
										# end Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
									End loop
									# end Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
								End if
								If: BL_GetCountOfACellList(ListIndex)>0
									Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACellList(ListIndex)-1 step: 1
										Set Variable: AColumn:= BL_GetCellColumn(ListIndex, CellIndex)
										Set Variable: ARow:= BL_GetCellRow(ListIndex, CellIndex)
										If: (L_GetFrom3DList(BoundaryTypeArray, AColumn - 1, ARow - 1, ElementLayerIndex - 1)!=1)
											# Set Variable: CurrentVariable:= QHFZ / BL_GetCellArea(AColumn, ARow)
											Evaluate expression: L_Set3DListItem(VarZList, AColumn - 1, ARow - 1, 0, QHFZ)
											Evaluate expression: L_Set3DListItem(VarPresentList, AColumn - 1, ARow - 1, 0, 1)
										End if
									End loop
									# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
								End if
							End if
						End loop
						# end Loop for: Objects in layer: Horizontal Specified Flux Boundary NL[ElementLayerIndex]
						If: ObjectPresent
							Loop for: Variable YIndex from: 0 to: NY-1 step: 1
								Loop for: Variable XIndex from: 0 to: NX-1 step: 1
									If: L_GetFrom3DList(VarPresentList, XIndex, YIndex, 0)=1
										Start a new line
											Export expression: L_GetFromList(ColumnList, XIndex); [G0]
											Export expression: L_GetFromList(ColumnList, XIndex); [G0]
											Export expression: L_GetFromList(RowList, YIndex); [G0]
											Export expression: L_GetFromList(RowList, YIndex); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
										End line
										Start a new line
											Export expression: L_GetFrom3DList(VarXList, XIndex, YIndex, 0); [G0]
											Export expression: 1; [G0]
											Export expression: L_GetFrom3DList(VarYList, XIndex, YIndex, 0); [G0]
											Export expression: 1; [G0]
											Export expression: L_GetFrom3DList(VarZList, XIndex, YIndex, 0); [G0]
											Export expression: 1; [G0]
										End line
									End if
								End loop
							End loop
							# 	Start a new line
							# 		Export expression: NthColumnPos(0); [G0]
							# 		Export expression: NthColumnPos(NumColumns()); [G0]
							# 		Export expression: NthRowPos(0); [G0]
							# 		Export expression: NthRowPos(NumRows()); [G0]
							# 		Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
							# 		Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
							# 	End line
							# 	Start a new line
							# 		Export expression: 0; [G0]
							# 		Export expression: 4; [G0]
							# 		Export expression: 0; [G0]
							# 		Export expression: 4; [G0]
							# 		Export expression: 0; [G0]
							# 		Export expression: 4; [G0]
							# 	End line
							# 	Loop for: Variable YIndex from: 0 to: NY-1 step: 1
							# 		Loop for: Variable XIndex from: 0 to: NX-1 step: 1
							# 			Start a new line
							# 				Export expression: L_GetFrom3DList(VarXList, XIndex, YIndex, 0) [G0]
							# 			End line
							# 		End loop
							# 	End loop
							# 	Loop for: Variable YIndex from: 0 to: NY-1 step: 1
							# 		Loop for: Variable XIndex from: 0 to: NX-1 step: 1
							# 			Start a new line
							# 				Export expression: L_GetFrom3DList(VarYList, XIndex, YIndex, 0) [G0]
							# 			End line
							# 		End loop
							# 	End loop
							# 	Loop for: Variable YIndex from: 0 to: NY-1 step: 1
							# 		Loop for: Variable XIndex from: 0 to: NX-1 step: 1
							# 			Start a new line
							# 				Export expression: L_GetFrom3DList(VarZList, XIndex, YIndex, 0) [G0]
							# 			End line
							# 		End loop
							# 	End loop
							Evaluate expression: L_ResetA3DList(VarXList)
							Evaluate expression: L_ResetA3DList(VarYList)
							Evaluate expression: L_ResetA3DList(VarZList)
							Evaluate expression: L_ResetA3DList(VarPresentList)
						End if
					End loop
					# End Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
					Start a new line
						Export expression: "END" [G0]
					End line
				End if
				# 3.4.7
				Start a new line
					Export expression: "C.3.4.7 .. QSFX,QSFY,QSFZ B.C. by x,y,z range {0.1-0.3};(O) - RDFLXS [3.4.1]" [G0]
				End line
				Start a new line
					Export expression: "C.....  QSFX,QSFY,QSFZ generic time units" [G0]
				End line
				If: RDFLXS&(NFBC>0)
					Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
						Set Variable: ObjectPresent:= 0
						Evaluate expression: ProgressBarAdvance()
						Evaluate expression: BL_FreeVertexList()
						# Read Line information for current Unit
						If: !BL_AddVertexLayer("Vertical Specified Flux Boundary NL" + ElementLayerIndex)
							Alert: "Out of Memory. Abort this process, free up memory and try again."
						End if
						Set Variable: ListIndex:= -1
						Loop for: Objects in layer: Vertical Specified Flux Boundary NL[ElementLayerIndex]
							Set Variable: ListIndex:= ListIndex + 1
							Set Variable: ObjectPresent:= 1
							If: !IsNA(Solute Flux1)
								Set Variable: ATime:= 0
								Evaluate expression: L_FreeAList(ObjectTimeList)
								Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
									If: IsNumber(Time[InnerTimeIndex])
										Set Variable: ATime:= Time[InnerTimeIndex]
									End if
									Evaluate expression: L_AddToList(ObjectTimeList, ATime)
								End loop
								Set Variable: InnerTimeIndex:= L_IndexOf(ObjectTimeList, CurrentTime)+1
								If: XFlux Positive[InnerTimeIndex]
									Set Variable: QSFX:= Solute Flux[InnerTimeIndex]
								Else
									Set Variable: QSFX:= -Solute Flux[InnerTimeIndex]
								End if
								# End if
								If: BL_GetCountOfACrossRowList(ListIndex)>0
									Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossRowList(ListIndex)-1 step: 1
										Set Variable: AColumn:= BL_GetCrossRowColumn(ListIndex, CellIndex)
										Set Variable: ARow:= BL_GetCrossRowRow(ListIndex, CellIndex)
										# Set Variable: CurrentVariable:= QSFX * Abs(BL_GetCrossColumnCompositeX(ListIndex, CellIndex)) / (Abs(BL_GetSumCrossColumnCompositeX(ListIndex)) + Abs(BL_GetSumCrossRowCompositeY(ListIndex))) * (HST3D_CellTop(ElementLayerIndex) - HST3D_CellBottom(ElementLayerIndex)) * (HST3D_CellTop(ElementLayerIndex) - HST3D_CellBottom(ElementLayerIndex))
										Evaluate expression: L_Set3DListItem(VarXList, AColumn - 1, ARow - 1, 0, QSFX)
										Evaluate expression: L_Set3DListItem(VarPresentList, AColumn - 1, ARow - 1, 0, 1)
									End loop
									# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossRowList(ListIndex)-1 step: 1
								End if
								# If: BL_GetCountOfACrossRowList(ListIndex)>0
							End if
						End loop
						# Loop for: Objects in layer: Vertical Specified Flux Boundary NL[ElementLayerIndex]
						Set Variable: ListIndex:= -1
						Loop for: Objects in layer: Vertical Specified Flux Boundary NL[ElementLayerIndex]
							Set Variable: ListIndex:= ListIndex + 1
							Set Variable: ObjectPresent:= 1
							If: !IsNA(Solute Flux1)
								Set Variable: ATime:= 0
								Evaluate expression: L_FreeAList(ObjectTimeList)
								Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
									If: IsNumber(Time[InnerTimeIndex])
										Set Variable: ATime:= Time[InnerTimeIndex]
									End if
									Evaluate expression: L_AddToList(ObjectTimeList, ATime)
								End loop
								Set Variable: InnerTimeIndex:= L_IndexOf(ObjectTimeList, CurrentTime)+1
								# Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
								# If: CurrentTime<=Time[InnerTimeIndex]
								If: YFlux Positive[InnerTimeIndex]
									Set Variable: QSFY:= Solute Flux[InnerTimeIndex]
								Else
									Set Variable: QSFY:= -Solute Flux[InnerTimeIndex]
								End if
								# End if
								# end If: CurrentTime<=Time[InnerTimeIndex]
								# End loop
								If: BL_GetCountOfACrossColumnList(ListIndex)>0
									Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
										Set Variable: AColumn:= BL_GetCrossColumnColumn(ListIndex, CellIndex)
										Set Variable: ARow:= BL_GetCrossColumnRow(ListIndex, CellIndex)
										# Set Variable: CurrentVariable:= QSFY * Abs(BL_GetCrossColumnCompositeX(ListIndex, CellIndex)) / (Abs(BL_GetSumCrossColumnCompositeX(ListIndex)) + Abs(BL_GetSumCrossRowCompositeY(ListIndex))) * (HST3D_CellTop(ElementLayerIndex) - HST3D_CellBottom(ElementLayerIndex))
										Evaluate expression: L_Set3DListItem(VarYList, AColumn - 1, ARow - 1, 0, QSFY)
										Evaluate expression: L_Set3DListItem(VarPresentList, AColumn - 1, ARow - 1, 0, 1)
									End loop
									# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
								End if
								# If: BL_GetCountOfACrossColumnList(ListIndex)>0
							End if
						End loop
						# Loop for: Objects in layer: Vertical Specified Flux Boundary NL[ElementLayerIndex]
						# Clear Line information
						Evaluate expression: BL_FreeVertexList()
						# Read Line information for current Unit
						If: !BL_AddVertexLayer("Horizontal Specified Flux Boundary NL" + ElementLayerIndex)
							Alert: "Out of Memory. Abort this process, free up memory and try again."
						End if
						Set Variable: ListIndex:= -1
						Loop for: Objects in layer: Horizontal Specified Flux Boundary NL[ElementLayerIndex]
							Set Variable: ListIndex:= ListIndex + 1
							Set Variable: ObjectPresent:= 1
							If: !IsNA(Upward Solute Flux1)
								Set Variable: ATime:= 0
								Evaluate expression: L_FreeAList(ObjectTimeList)
								Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
									If: IsNumber(Time[InnerTimeIndex])
										Set Variable: ATime:= Time[InnerTimeIndex]
									End if
									Evaluate expression: L_AddToList(ObjectTimeList, ATime)
								End loop
								Set Variable: InnerTimeIndex:= L_IndexOf(ObjectTimeList, CurrentTime)+1
								# Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
								# If: CurrentTime<=Time[InnerTimeIndex]
								Set Variable: QSFZ:= Upward Solute Flux[InnerTimeIndex]
								# End if
								# end If: CurrentTime<=Time[InnerTimeIndex]
								# End loop
								If: ContourType()=3
									Set Variable: RowCount:= BL_GetRowNodeCount()
									Set Variable: ColumnCount:= BL_GetColumnNodeCount()
									Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
										Set Variable: NodeX:= BL_GetColumnNodePosition(ColumnIndex)
										Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
											Set Variable: NodeY:= BL_GetRowNodePosition(RowIndex)
											If: BL_PointInsideContour(ListIndex, NodeX, NodeY)
												# Set Variable: CurrentVariable:= QSFZ / BL_GetCellArea(ColumnIndex+1, RowIndex+1)
												Evaluate expression: L_Set3DListItem(VarZList, ColumnIndex, RowIndex, 0, QSFZ)
												Evaluate expression: L_Set3DListItem(VarPresentList, ColumnIndex, RowIndex, 0, 1)
											End if
											# end if BL_PointInsideContour(ListIndex, NodeX, NodeY)
										End loop
										# end Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
									End loop
									# end Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
								End if
								If: BL_GetCountOfACellList(ListIndex)>0
									Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACellList(ListIndex)-1 step: 1
										Set Variable: AColumn:= BL_GetCellColumn(ListIndex, CellIndex)
										Set Variable: ARow:= BL_GetCellRow(ListIndex, CellIndex)
										If: (L_GetFrom3DList(BoundaryTypeArray, AColumn - 1, ARow - 1, ElementLayerIndex - 1)!=1)
											# Set Variable: CurrentVariable:= QSFZ / BL_GetCellArea(AColumn, ARow)
											Evaluate expression: L_Set3DListItem(VarZList, AColumn-1, ARow-1, 0, QSFZ)
											Evaluate expression: L_Set3DListItem(VarPresentList, AColumn - 1, ARow - 1, 0, 1)
										End if
									End loop
									# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
								End if
							End if
						End loop
						# end Loop for: Objects in layer: Horizontal Specified Flux Boundary NL[ElementLayerIndex]
						If: ObjectPresent
							Loop for: Variable YIndex from: 0 to: NY-1 step: 1
								Loop for: Variable XIndex from: 0 to: NX-1 step: 1
									If: L_GetFrom3DList(VarPresentList, XIndex, YIndex, 0)=1
										Start a new line
											Export expression: L_GetFromList(ColumnList, XIndex); [G0]
											Export expression: L_GetFromList(ColumnList, XIndex); [G0]
											Export expression: L_GetFromList(RowList, YIndex); [G0]
											Export expression: L_GetFromList(RowList, YIndex); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
										End line
										Start a new line
											Export expression: L_GetFrom3DList(VarXList, XIndex, YIndex, 0); [G0]
											Export expression: 1; [G0]
											Export expression: L_GetFrom3DList(VarYList, XIndex, YIndex, 0); [G0]
											Export expression: 1; [G0]
											Export expression: L_GetFrom3DList(VarZList, XIndex, YIndex, 0); [G0]
											Export expression: 1; [G0]
										End line
									End if
								End loop
							End loop
							# 	Start a new line
							# 		Export expression: NthColumnPos(0); [G0]
							# 		Export expression: NthColumnPos(NumColumns()); [G0]
							# 		Export expression: NthRowPos(0); [G0]
							# 		Export expression: NthRowPos(NumRows()); [G0]
							# 		Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
							# 		Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
							# 	End line
							# 	Start a new line
							# 		Export expression: 0; [G0]
							# 		Export expression: 4; [G0]
							# 		Export expression: 0; [G0]
							# 		Export expression: 4; [G0]
							# 		Export expression: 0; [G0]
							# 		Export expression: 4; [G0]
							# 	End line
							# 	Loop for: Variable YIndex from: 0 to: NY-1 step: 1
							# 		Loop for: Variable XIndex from: 0 to: NX-1 step: 1
							# 			Start a new line
							# 				Export expression: L_GetFrom3DList(VarXList, XIndex, YIndex, 0) [G0]
							# 			End line
							# 		End loop
							# 	End loop
							# 	Loop for: Variable YIndex from: 0 to: NY-1 step: 1
							# 		Loop for: Variable XIndex from: 0 to: NX-1 step: 1
							# 			Start a new line
							# 				Export expression: L_GetFrom3DList(VarYList, XIndex, YIndex, 0) [G0]
							# 			End line
							# 		End loop
							# 	End loop
							# 	Loop for: Variable YIndex from: 0 to: NY-1 step: 1
							# 		Loop for: Variable XIndex from: 0 to: NX-1 step: 1
							# 			Start a new line
							# 				Export expression: L_GetFrom3DList(VarZList, XIndex, YIndex, 0) [G0]
							# 			End line
							# 		End loop
							# 	End loop
							Evaluate expression: L_ResetA3DList(VarXList)
							Evaluate expression: L_ResetA3DList(VarYList)
							Evaluate expression: L_ResetA3DList(VarZList)
							Evaluate expression: L_ResetA3DList(VarPresentList)
						End if
					End loop
					# End Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
					Start a new line
						Export expression: "END" [G0]
					End line
				End if
				Start a new line
					Export expression: "C------------------------------------------------------------------------------" [G0]
				End line
				Start a new line
					Export expression: "C.....     Leakage b.c." [G0]
				End line
				# 3.5.1
				Evaluate expression: ProgressBarSetMessage(Message + "3.5")
				Start a new line
					Export expression: "C.3.5.1 .. RDLBC[T/F];(O) - NLBC [1.6] > 0" [G0]
				End line
				Set Variable: RDLBC:= 0
				If: UseLeakageBoundary|UseRiverLeakage
					If: L_GetListSize(LeakageList)>0
						Loop for: Variable InnerTimeIndex from: 0 to: L_GetListSize(LeakageList)-1 step: 1
							Set Variable: InnerCurrentTime:= L_GetFromList(LeakageList, InnerTimeIndex)
							If: CurrentTime=InnerCurrentTime
								Set Variable: RDLBC:= 1
							End if
						End loop
					End if
					# end Loop for: Variable InnerTimeIndex from: 0 to: L_GetListSize(LeakageList)-1 step: 1
					If: L_GetListSize(RiverList)>0
						Loop for: Variable InnerTimeIndex from: 0 to: L_GetListSize(RiverList)-1 step: 1
							Set Variable: InnerCurrentTime:= L_GetFromList(RiverList, InnerTimeIndex)
							If: CurrentTime=InnerCurrentTime
								Set Variable: RDLBC:= 1
							End if
						End loop
					End if
					# end Loop for: Variable InnerTimeIndex from: 0 to: L_GetListSize(RiverList)-1 step: 1
				End if
				If: NLBC>0
					Start a new line
						If: RDLBC
							Export expression: "T"; [G0]
						Else
							Export expression: "F"; [G0]
						End if
					End line
				End if
				# 3.5.2
				Start a new line
					Export expression: "C.3.5.2 .. PHILBC,DENLBC,VISLBC by x,y,z range {0.1-0.3};(O) - RDLBC [3.5.1]; VISLBC  Pa-s or cP" [G0]
				End line
				If: RDLBC&(NLBC>0)&UseLeakageBoundary
					Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
						Evaluate expression: ProgressBarAdvance()
						Evaluate expression: BL_FreeVertexList()
						# Read Line information for current Unit
						If: !BL_AddVertexLayer("Vertical Aquifer Leakage Boundary NL" + ElementLayerIndex)
							Alert: "Out of Memory. Abort this process, free up memory and try again."
						End if
						Set Variable: ListIndex:= -1
						Loop for: Objects in layer: Vertical Aquifer Leakage Boundary NL[ElementLayerIndex]
							Set Variable: ListIndex:= ListIndex + 1
							If: !IsNA(Potential Energy per Unit Mass1)
								Set Variable: ATime:= 0
								Evaluate expression: L_FreeAList(ObjectTimeList)
								Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
									If: IsNumber(Time[InnerTimeIndex])
										Set Variable: ATime:= Time[InnerTimeIndex]
									End if
									Evaluate expression: L_AddToList(ObjectTimeList, ATime)
								End loop
								Set Variable: InnerTimeIndex:= L_IndexOf(ObjectTimeList, CurrentTime)+1
								# Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
								# If: CurrentTime<=Time[InnerTimeIndex]
								Set Variable: PHILBC:= Potential Energy per Unit Mass[InnerTimeIndex]
								Set Variable: DENLBC:= Density[InnerTimeIndex]
								Set Variable: VISLBC:= Viscosity[InnerTimeIndex]
								# End if
								# end If: CurrentTime<=Time[InnerTimeIndex]
								# End loop
								If: BL_GetCountOfACrossRowList(ListIndex)>0
									Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossRowList(ListIndex)-1 step: 1
										Set Variable: AColumn:= BL_GetCrossRowColumn(ListIndex, CellIndex)
										Set Variable: ARow:= BL_GetCrossRowRow(ListIndex, CellIndex)
										Start a new line
											Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
											Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
											Export expression: L_GetFromList(RowList, ARow - 1); [G0]
											Export expression: L_GetFromList(RowList, ARow - 1); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
										End line
										Start a new line
											Export expression: PHILBC; [G0]
											Export expression: 1; [G0]
											Export expression: DENLBC; [G0]
											Export expression: 1; [G0]
											Export expression: VISLBC; [G0]
											Export expression: 1; [G0]
										End line
									End loop
									# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossRowList(ListIndex)-1 step: 1
								End if
								# If: BL_GetCountOfACrossRowList(ListIndex)>0
							End if
						End loop
						# Loop for: Objects in layer: Vertical Aquifer Leakage Boundary NL[ElementLayerIndex]
						Set Variable: ListIndex:= -1
						Loop for: Objects in layer: Vertical Aquifer Leakage Boundary NL[ElementLayerIndex]
							Set Variable: ListIndex:= ListIndex + 1
							If: !IsNA(Potential Energy per Unit Mass1)
								Set Variable: ATime:= 0
								Evaluate expression: L_FreeAList(ObjectTimeList)
								Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
									If: IsNumber(Time[InnerTimeIndex])
										Set Variable: ATime:= Time[InnerTimeIndex]
									End if
									Evaluate expression: L_AddToList(ObjectTimeList, ATime)
								End loop
								Set Variable: InnerTimeIndex:= L_IndexOf(ObjectTimeList, CurrentTime)+1
								# Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
								# If: CurrentTime<=Time[InnerTimeIndex]
								Set Variable: PHILBC:= Potential Energy per Unit Mass[InnerTimeIndex]
								Set Variable: DENLBC:= Density[InnerTimeIndex]
								Set Variable: VISLBC:= Viscosity[InnerTimeIndex]
								# End if
								# end If: CurrentTime<=Time[InnerTimeIndex]
								# End loop
								If: BL_GetCountOfACrossColumnList(ListIndex)>0
									Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
										Set Variable: AColumn:= BL_GetCrossColumnColumn(ListIndex, CellIndex)
										Set Variable: ARow:= BL_GetCrossColumnRow(ListIndex, CellIndex)
										Start a new line
											Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
											Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
											Export expression: L_GetFromList(RowList, ARow - 1); [G0]
											Export expression: L_GetFromList(RowList, ARow - 1); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
										End line
										Start a new line
											Export expression: PHILBC; [G0]
											Export expression: 1; [G0]
											Export expression: DENLBC; [G0]
											Export expression: 1; [G0]
											Export expression: VISLBC; [G0]
											Export expression: 1; [G0]
										End line
									End loop
									# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
								End if
								# If: BL_GetCountOfACrossColumnList(ListIndex)>0
							End if
						End loop
						# Loop for: Objects in layer: Vertical Aquifer Leakage Boundary NL[ElementLayerIndex]
						# Clear Line information
						Evaluate expression: BL_FreeVertexList()
						# Read Line information for current Unit
						If: !BL_AddVertexLayer("Horizontal Aquifer Leakage Boundary NL" + ElementLayerIndex)
							Alert: "Out of Memory. Abort this process, free up memory and try again."
						End if
						Set Variable: ListIndex:= -1
						Loop for: Objects in layer: Horizontal Aquifer Leakage Boundary NL[ElementLayerIndex]
							Set Variable: ListIndex:= ListIndex + 1
							If: !IsNA(Potential Energy per Unit Mass1)
								Set Variable: ATime:= 0
								Evaluate expression: L_FreeAList(ObjectTimeList)
								Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
									If: IsNumber(Time[InnerTimeIndex])
										Set Variable: ATime:= Time[InnerTimeIndex]
									End if
									Evaluate expression: L_AddToList(ObjectTimeList, ATime)
								End loop
								Set Variable: InnerTimeIndex:= L_IndexOf(ObjectTimeList, CurrentTime)+1
								# Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
								# If: CurrentTime<=Time[InnerTimeIndex]
								Set Variable: PHILBC:= Potential Energy per Unit Mass[InnerTimeIndex]
								Set Variable: DENLBC:= Density[InnerTimeIndex]
								Set Variable: VISLBC:= Viscosity[InnerTimeIndex]
								# End if
								# end If: CurrentTime<=Time[InnerTimeIndex]
								# End loop
								If: ContourType()=3
									Set Variable: RowCount:= BL_GetRowNodeCount()
									Set Variable: ColumnCount:= BL_GetColumnNodeCount()
									Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
										Set Variable: NodeX:= BL_GetColumnNodePosition(ColumnIndex)
										Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
											Set Variable: NodeY:= BL_GetRowNodePosition(RowIndex)
											If: BL_PointInsideContour(ListIndex, NodeX, NodeY)
												Start a new line
													Export expression: NodeX; [G0]
													Export expression: NodeX; [G0]
													Export expression: NodeY; [G0]
													Export expression: NodeY; [G0]
													Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
													Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
												End line
												Start a new line
													Export expression: PHILBC; [G0]
													Export expression: 1; [G0]
													Export expression: DENLBC; [G0]
													Export expression: 1; [G0]
													Export expression: VISLBC; [G0]
													Export expression: 1; [G0]
												End line
											End if
											# end if BL_PointInsideContour(ListIndex, NodeX, NodeY)
										End loop
										# end Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
									End loop
									# end Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
								End if
								If: BL_GetCountOfACellList(ListIndex)>0
									Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACellList(ListIndex)-1 step: 1
										Set Variable: AColumn:= BL_GetCellColumn(ListIndex, CellIndex)
										Set Variable: ARow:= BL_GetCellRow(ListIndex, CellIndex)
										If: (L_GetFrom3DList(BoundaryTypeArray, AColumn - 1, ARow - 1, ElementLayerIndex - 1)!=1)
											Start a new line
												Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
												Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
												Export expression: L_GetFromList(RowList, ARow - 1); [G0]
												Export expression: L_GetFromList(RowList, ARow - 1); [G0]
												Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
												Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
											End line
											Start a new line
												Export expression: PHILBC; [G0]
												Export expression: 1; [G0]
												Export expression: DENLBC; [G0]
												Export expression: 1; [G0]
												Export expression: VISLBC; [G0]
												Export expression: 1; [G0]
											End line
										End if
									End loop
									# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
								End if
							End if
						End loop
						# end Loop for: Objects in layer: Horizontal Specified Flux Boundary NL[ElementLayerIndex]
					End loop
					# End Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
				End if
				If: RDLBC&(NLBC>0)&(UseLeakageBoundary|UseRiverLeakage)
					Start a new line
						Export expression: "END" [G0]
					End line
				End if
				# 3.5.3
				Start a new line
					Export expression: "C.3.5.3 .. TLBC by x,y,z range {0.1-0.3};(O) - RDLBC [3.5.1] and HEAT [1.4]" [G0]
				End line
				If: RDLBC&HEAT&(NLBC>0)&UseLeakageBoundary
					Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
						Evaluate expression: ProgressBarAdvance()
						Evaluate expression: BL_FreeVertexList()
						# Read Line information for current Unit
						If: !BL_AddVertexLayer("Vertical Aquifer Leakage Boundary NL" + ElementLayerIndex)
							Alert: "Out of Memory. Abort this process, free up memory and try again."
						End if
						Set Variable: ListIndex:= -1
						Loop for: Objects in layer: Vertical Aquifer Leakage Boundary NL[ElementLayerIndex]
							Set Variable: ListIndex:= ListIndex + 1
							If: !IsNA(Potential Energy per Unit Mass1)
								Set Variable: TLBC:= 0
								Set Variable: ATime:= 0
								Evaluate expression: L_FreeAList(ObjectTimeList)
								Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
									If: IsNumber(Time[InnerTimeIndex])
										Set Variable: ATime:= Time[InnerTimeIndex]
									End if
									Evaluate expression: L_AddToList(ObjectTimeList, ATime)
								End loop
								Set Variable: InnerTimeIndex:= L_IndexOf(ObjectTimeList, CurrentTime)+1
								# Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
								# If: CurrentTime<=Time[InnerTimeIndex]
								If: !IsNA(Temperature[InnerTimeIndex])
									Set Variable: TLBC:= Temperature[InnerTimeIndex]
								End if
								# End if
								# end If: CurrentTime<=Time[InnerTimeIndex]
								# End loop
								If: BL_GetCountOfACrossRowList(ListIndex)>0
									Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossRowList(ListIndex)-1 step: 1
										Set Variable: 
										Set Variable: AColumn:= BL_GetCrossRowColumn(ListIndex, CellIndex)
										Set Variable: ARow:= BL_GetCrossRowRow(ListIndex, CellIndex)
										Start a new line
											Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
											Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
											Export expression: L_GetFromList(RowList, ARow - 1); [G0]
											Export expression: L_GetFromList(RowList, ARow - 1); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
										End line
										Start a new line
											Export expression: TLBC; [G0]
											Export expression: 1; [G0]
										End line
									End loop
									# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossRowList(ListIndex)-1 step: 1
								End if
								# If: BL_GetCountOfACrossRowList(ListIndex)>0
							End if
						End loop
						# Loop for: Objects in layer: Vertical Aquifer Leakage Boundary NL[ElementLayerIndex]
						Set Variable: ListIndex:= -1
						Loop for: Objects in layer: Vertical Aquifer Leakage Boundary NL[ElementLayerIndex]
							Set Variable: ListIndex:= ListIndex + 1
							If: !IsNA(Potential Energy per Unit Mass1)
								Set Variable: TLBC:= 0
								Set Variable: ATime:= 0
								Evaluate expression: L_FreeAList(ObjectTimeList)
								Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
									If: IsNumber(Time[InnerTimeIndex])
										Set Variable: ATime:= Time[InnerTimeIndex]
									End if
									Evaluate expression: L_AddToList(ObjectTimeList, ATime)
								End loop
								Set Variable: InnerTimeIndex:= L_IndexOf(ObjectTimeList, CurrentTime)+1
								# Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
								# If: CurrentTime<=Time[InnerTimeIndex]
								If: !IsNA(Temperature[InnerTimeIndex])
									Set Variable: TLBC:= Temperature[InnerTimeIndex]
								End if
								# End if
								# end If: CurrentTime<=Time[InnerTimeIndex]
								# End loop
								If: BL_GetCountOfACrossColumnList(ListIndex)>0
									Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
										Set Variable: AColumn:= BL_GetCrossColumnColumn(ListIndex, CellIndex)
										Set Variable: ARow:= BL_GetCrossColumnRow(ListIndex, CellIndex)
										Start a new line
											Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
											Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
											Export expression: L_GetFromList(RowList, ARow - 1); [G0]
											Export expression: L_GetFromList(RowList, ARow - 1); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
										End line
										Start a new line
											Export expression: TLBC; [G0]
											Export expression: 1; [G0]
										End line
									End loop
									# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
								End if
								# If: BL_GetCountOfACrossColumnList(ListIndex)>0
							End if
						End loop
						# Loop for: Objects in layer: Vertical Aquifer Leakage Boundary NL[ElementLayerIndex]
						# Clear Line information
						Evaluate expression: BL_FreeVertexList()
						# Read Line information for current Unit
						If: !BL_AddVertexLayer("Horizontal Aquifer Leakage Boundary NL" + ElementLayerIndex)
							Alert: "Out of Memory. Abort this process, free up memory and try again."
						End if
						Set Variable: ListIndex:= -1
						Loop for: Objects in layer: Horizontal Aquifer Leakage Boundary NL[ElementLayerIndex]
							Set Variable: ListIndex:= ListIndex + 1
							If: !IsNA(Potential Energy per Unit Mass1)
								Set Variable: ATime:= 0
								Evaluate expression: L_FreeAList(ObjectTimeList)
								Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
									If: IsNumber(Time[InnerTimeIndex])
										Set Variable: ATime:= Time[InnerTimeIndex]
									End if
									Evaluate expression: L_AddToList(ObjectTimeList, ATime)
								End loop
								Set Variable: InnerTimeIndex:= L_IndexOf(ObjectTimeList, CurrentTime)+1
								# Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
								Set Variable: TLBC:= 0
								# If: CurrentTime<=Time[InnerTimeIndex]
								If: !IsNA(Temperature[InnerTimeIndex])
									Set Variable: TLBC:= Temperature[InnerTimeIndex]
								End if
								# End if
								# end If: CurrentTime<=Time[InnerTimeIndex]
								# End loop
								If: ContourType()=3
									Set Variable: RowCount:= BL_GetRowNodeCount()
									Set Variable: ColumnCount:= BL_GetColumnNodeCount()
									Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
										Set Variable: NodeX:= BL_GetColumnNodePosition(ColumnIndex)
										Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
											Set Variable: NodeY:= BL_GetRowNodePosition(RowIndex)
											# If: BL_GetCountOfCellLists()>0
											# Loop for: Variable ListIndex from: 0 to: BL_GetCountOfCellLists()-1 step: 1
											If: BL_PointInsideContour(ListIndex, NodeX, NodeY)
												Start a new line
													Export expression: NodeX; [G0]
													Export expression: NodeX; [G0]
													Export expression: NodeY; [G0]
													Export expression: NodeY; [G0]
													Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
													Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
												End line
												Start a new line
													Export expression: TLBC; [G0]
													Export expression: 1; [G0]
												End line
											End if
											# end if BL_PointInsideContour(ListIndex, NodeX, NodeY)
											# End loop
											# end Loop for: Variable ListIndex from: 0 to: BL_GetCountOfCellLists()-1 step: 1
											# End if
											# end If: BL_GetCountOfCellLists()>0
										End loop
										# end Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
									End loop
									# end Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
								End if
								If: BL_GetCountOfACellList(ListIndex)>0
									Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACellList(ListIndex)-1 step: 1
										Set Variable: AColumn:= BL_GetCellColumn(ListIndex, CellIndex)
										Set Variable: ARow:= BL_GetCellRow(ListIndex, CellIndex)
										If: (L_GetFrom3DList(BoundaryTypeArray, AColumn - 1, ARow - 1, ElementLayerIndex - 1)!=1)
											Start a new line
												Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
												Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
												Export expression: L_GetFromList(RowList, ARow - 1); [G0]
												Export expression: L_GetFromList(RowList, ARow - 1); [G0]
												Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
												Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
											End line
											Start a new line
												Export expression: TLBC; [G0]
												Export expression: 1; [G0]
											End line
										End if
									End loop
									# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
								End if
							End if
						End loop
						# end Loop for: Objects in layer: Horizontal Specified Flux Boundary NL[ElementLayerIndex]
					End loop
					# End Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
				End if
				If: RDLBC&HEAT&(NLBC>0)&(UseLeakageBoundary|UseRiverLeakage)
					Start a new line
						Export expression: "END" [G0]
					End line
				End if
				# 3.5.4
				Start a new line
					Export expression: "C.3.5.4 .. CLBC by x,y,z range {0.1-0.3};(O) - RDLBC [3.5.1] and SOLUTE [1.4]" [G0]
				End line
				If: RDLBC&SOLUTE&(NLBC>0)&UseLeakageBoundary
					Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
						Evaluate expression: ProgressBarAdvance()
						Evaluate expression: BL_FreeVertexList()
						# Read Line information for current Unit
						If: !BL_AddVertexLayer("Vertical Aquifer Leakage Boundary NL" + ElementLayerIndex)
							Alert: "Out of Memory. Abort this process, free up memory and try again."
						End if
						Set Variable: ListIndex:= -1
						Loop for: Objects in layer: Vertical Aquifer Leakage Boundary NL[ElementLayerIndex]
							Set Variable: ListIndex:= ListIndex + 1
							If: !IsNA(Potential Energy per Unit Mass1)
								Set Variable: CLBC:= 0
								Set Variable: ATime:= 0
								Evaluate expression: L_FreeAList(ObjectTimeList)
								Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
									If: IsNumber(Time[InnerTimeIndex])
										Set Variable: ATime:= Time[InnerTimeIndex]
									End if
									Evaluate expression: L_AddToList(ObjectTimeList, ATime)
								End loop
								Set Variable: InnerTimeIndex:= L_IndexOf(ObjectTimeList, CurrentTime)+1
								# Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
								# If: CurrentTime<=Time[InnerTimeIndex]
								Set Variable: MassFractionTest:= 0
								If: SCALMF
									If: !IsNA(Scaled Mass Fraction[InnerTimeIndex])
										Set Variable: MassFractionTest:= 1
									End if
								Else
									If: !IsNA(Mass Fraction[InnerTimeIndex])
										Set Variable: MassFractionTest:= 1
									End if
								End if
								If: MassFractionTest
									If: SCALMF
										Set Variable: CLBC:= Scaled Mass Fraction[InnerTimeIndex]
									Else
										Set Variable: CLBC:= Mass Fraction[InnerTimeIndex]
									End if
								End if
								# End if
								# end If: CurrentTime<=Time[InnerTimeIndex]
								# End loop
								If: BL_GetCountOfACrossRowList(ListIndex)>0
									Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossRowList(ListIndex)-1 step: 1
										Set Variable: AColumn:= BL_GetCrossRowColumn(ListIndex, CellIndex)
										Set Variable: ARow:= BL_GetCrossRowRow(ListIndex, CellIndex)
										Start a new line
											Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
											Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
											Export expression: L_GetFromList(RowList, ARow - 1); [G0]
											Export expression: L_GetFromList(RowList, ARow - 1); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
										End line
										Start a new line
											Export expression: CLBC; [G0]
											Export expression: 1; [G0]
										End line
									End loop
									# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossRowList(ListIndex)-1 step: 1
								End if
								# If: BL_GetCountOfACrossRowList(ListIndex)>0
							End if
						End loop
						# Loop for: Objects in layer: Vertical Aquifer Leakage Boundary NL[ElementLayerIndex]
						Set Variable: ListIndex:= -1
						Loop for: Objects in layer: Vertical Aquifer Leakage Boundary NL[ElementLayerIndex]
							Set Variable: ListIndex:= ListIndex + 1
							If: !IsNA(Potential Energy per Unit Mass1)
								Set Variable: CLBC:= 0
								Set Variable: ATime:= 0
								Evaluate expression: L_FreeAList(ObjectTimeList)
								Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
									If: IsNumber(Time[InnerTimeIndex])
										Set Variable: ATime:= Time[InnerTimeIndex]
									End if
									Evaluate expression: L_AddToList(ObjectTimeList, ATime)
								End loop
								Set Variable: InnerTimeIndex:= L_IndexOf(ObjectTimeList, CurrentTime)+1
								# Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
								# If: CurrentTime<=Time[InnerTimeIndex]
								Set Variable: MassFractionTest:= 0
								If: SCALMF
									If: !IsNA(Scaled Mass Fraction[InnerTimeIndex])
										Set Variable: MassFractionTest:= 1
									End if
								Else
									If: !IsNA(Mass Fraction[InnerTimeIndex])
										Set Variable: MassFractionTest:= 1
									End if
								End if
								If: MassFractionTest
									If: SCALMF
										Set Variable: CLBC:= Scaled Mass Fraction[InnerTimeIndex]
									Else
										Set Variable: CLBC:= Mass Fraction[InnerTimeIndex]
									End if
								End if
								# End if
								# end If: CurrentTime<=Time[InnerTimeIndex]
								# End loop
								If: BL_GetCountOfACrossColumnList(ListIndex)>0
									Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
										Set Variable: AColumn:= BL_GetCrossColumnColumn(ListIndex, CellIndex)
										Set Variable: ARow:= BL_GetCrossColumnRow(ListIndex, CellIndex)
										Start a new line
											Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
											Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
											Export expression: L_GetFromList(RowList, ARow - 1); [G0]
											Export expression: L_GetFromList(RowList, ARow - 1); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
										End line
										Start a new line
											Export expression: CLBC; [G0]
											Export expression: 1; [G0]
										End line
									End loop
									# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
								End if
								# If: BL_GetCountOfACrossColumnList(ListIndex)>0
							End if
						End loop
						# Loop for: Objects in layer: Vertical Aquifer Leakage Boundary NL[ElementLayerIndex]
						# Clear Line information
						Evaluate expression: BL_FreeVertexList()
						# Read Line information for current Unit
						If: !BL_AddVertexLayer("Horizontal Aquifer Leakage Boundary NL" + ElementLayerIndex)
							Alert: "Out of Memory. Abort this process, free up memory and try again."
						End if
						Set Variable: ListIndex:= -1
						Loop for: Objects in layer: Horizontal Aquifer Leakage Boundary NL[ElementLayerIndex]
							Set Variable: ListIndex:= ListIndex + 1
							If: !IsNA(Potential Energy per Unit Mass1)
								Set Variable: ATime:= 0
								Evaluate expression: L_FreeAList(ObjectTimeList)
								Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
									If: IsNumber(Time[InnerTimeIndex])
										Set Variable: ATime:= Time[InnerTimeIndex]
									End if
									Evaluate expression: L_AddToList(ObjectTimeList, ATime)
								End loop
								Set Variable: InnerTimeIndex:= L_IndexOf(ObjectTimeList, CurrentTime)+1
								# Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
								Set Variable: CLBC:= 0
								# If: CurrentTime<=Time[InnerTimeIndex]
								Set Variable: MassFractionTest:= 0
								If: SCALMF
									If: !IsNA(Scaled Mass Fraction[InnerTimeIndex])
										Set Variable: MassFractionTest:= 1
									End if
								Else
									If: !IsNA(Mass Fraction[InnerTimeIndex])
										Set Variable: MassFractionTest:= 1
									End if
								End if
								If: MassFractionTest
									If: SCALMF
										Set Variable: CLBC:= Scaled Mass Fraction[InnerTimeIndex]
									Else
										Set Variable: CLBC:= Mass Fraction[InnerTimeIndex]
									End if
								End if
								# End if
								# end If: CurrentTime<=Time[InnerTimeIndex]
								# End loop
								If: ContourType()=3
									Set Variable: RowCount:= BL_GetRowNodeCount()
									Set Variable: ColumnCount:= BL_GetColumnNodeCount()
									Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
										Set Variable: NodeX:= BL_GetColumnNodePosition(ColumnIndex)
										Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
											Set Variable: NodeY:= BL_GetRowNodePosition(RowIndex)
											# If: BL_GetCountOfCellLists()>0
											# Loop for: Variable ListIndex from: 0 to: BL_GetCountOfCellLists()-1 step: 1
											If: BL_PointInsideContour(ListIndex, NodeX, NodeY)
												Start a new line
													Export expression: NodeX; [G0]
													Export expression: NodeX; [G0]
													Export expression: NodeY; [G0]
													Export expression: NodeY; [G0]
													Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
													Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
												End line
												Start a new line
													Export expression: CLBC; [G0]
													Export expression: 1; [G0]
												End line
											End if
											# end if BL_PointInsideContour(ListIndex, NodeX, NodeY)
											# End loop
											# end Loop for: Variable ListIndex from: 0 to: BL_GetCountOfCellLists()-1 step: 1
											# End if
											# end If: BL_GetCountOfCellLists()>0
										End loop
										# end Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
									End loop
									# end Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
								End if
								If: BL_GetCountOfACellList(ListIndex)>0
									Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACellList(ListIndex)-1 step: 1
										Set Variable: AColumn:= BL_GetCellColumn(ListIndex, CellIndex)
										Set Variable: ARow:= BL_GetCellRow(ListIndex, CellIndex)
										If: (L_GetFrom3DList(BoundaryTypeArray, AColumn - 1, ARow - 1, ElementLayerIndex - 1)!=1)
											Start a new line
												Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
												Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
												Export expression: L_GetFromList(RowList, ARow - 1); [G0]
												Export expression: L_GetFromList(RowList, ARow - 1); [G0]
												Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
												Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
											End line
											Start a new line
												Export expression: CLBC; [G0]
												Export expression: 1; [G0]
											End line
										End if
									End loop
									# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
								End if
							End if
						End loop
						# end Loop for: Objects in layer: Horizontal Specified Flux Boundary NL[ElementLayerIndex]
					End loop
					# End Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
				End if
				If: RDLBC&SOLUTE&(NLBC>0)&(UseLeakageBoundary|UseRiverLeakage)
					Start a new line
						Export expression: "END" [G0]
					End line
				End if
				# 3.5.5
				Start a new line
					Export expression: "C.....          River leakage b.c." [G0]
				End line
				Start a new line
					Export expression: "C.3.5.5 .. XR1,YR1,XR2,YR2,HRBC,DENRBC,VISRBC,TRBC,CRBC;(O) - RDLBC [3.5.1]; VISRBC  Pa-s or cP" [G0]
				End line
				Start a new line
					Export expression: "C.....Use as many 3.5.5 lines as necessary" [G0]
				End line
				If: UseRiverLeakage&NLBC>0&RDLBC
					# Clear Lines
					Evaluate expression: BL_FreeVertexList()
					# Read River information
					If: !BL_AddVertexLayer("River Leakage")
						Alert: "Out of Memory. Abort this process, free up memory and try again."
					End if
					Set Variable: ListCount:= BL_GetCountOfCellLists()
					Set Variable: ListIndex:= -1
					Evaluate expression: ProgressBarAdvance()
					Loop for: Objects in layer: River Leakage
						Set Variable: ListIndex:= ListIndex + 1
						If: !IsNA(Head1)
							Set Variable: ATime:= 0
							Evaluate expression: L_FreeAList(ObjectTimeList)
							Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
								If: IsNumber(Time[InnerTimeIndex])
									Set Variable: ATime:= Time[InnerTimeIndex]
								End if
								Evaluate expression: L_AddToList(ObjectTimeList, ATime)
							End loop
							Set Variable: InnerTimeIndex:= L_IndexOf(ObjectTimeList, CurrentTime)+1
							# Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
							# If: CurrentTime<=Time[InnerTimeIndex]
							If: !IsNA(Head[InnerTimeIndex])
								Set Variable: HRBC:= Head[InnerTimeIndex]
								Set Variable: DENRBC:= Density[InnerTimeIndex]
								Set Variable: VISRBC:= Viscosity[InnerTimeIndex]
								Set Variable: TRBC:= Temperature[InnerTimeIndex]
								If: SOLUTE
									If: SCALMF
										Set Variable: CRBC:= Scaled Mass Fraction[InnerTimeIndex]
									Else
										Set Variable: CRBC:= Mass Fraction[InnerTimeIndex]
									End if
								Else
									Set Variable: CRBC:= 0
								End if
							End if
							# End if
							# end If: CurrentTime<=Time[InnerTimeIndex]
							# End loop
							Set Variable: CellCount:= BL_GetCountOfACellList(ListIndex)
							Loop for: Variable CellIndex from: 0 to: CellCount-1 step: 1
								Set Variable: AColumn:= BL_GetCellColumn(ListIndex, CellIndex)
								Set Variable: ARow:= BL_GetCellRow(ListIndex, CellIndex)
								Start a new line
									Export expression: BL_SegmentFirstX(ListIndex, CellIndex, 0); [G0]
									Export expression: BL_SegmentFirstY(ListIndex, CellIndex, 0); [G0]
									Export expression: BL_SegmentSecondX(ListIndex, CellIndex, BL_SegmentCount(ListIndex, CellIndex) - 1); [G0]
									Export expression: BL_SegmentSecondY(ListIndex, CellIndex, BL_SegmentCount(ListIndex, CellIndex) - 1); [G0]
									Export expression: HRBC; [G0]
									Export expression: DENRBC; [G0]
									Export expression: VISRBC; [G0]
									Export expression: TRBC; [G0]
									Export expression: CRBC; [G0]
								End line
							End loop
							# end Loop for: Variable CellIndex from: 0 to: CellCount-1 step: 1
						End if
					End loop
					# end Loop for: Variable ListIndex from: 0 to: ListCount-1 step: 1
				End if
				# 3.5.6
				Start a new line
					Export expression: "C.3.5.6 .. End with END" [G0]
				End line
				# If: NLBC>0&RDLBC
				If: RDLBC
					Start a new line
						Export expression: "END" [G0]
					End line
				End if
				Start a new line
					Export expression: "C------------------------------------------------------------------------------" [G0]
				End line
				Start a new line
					Export expression: "C.....     Evapotranspiration b.c." [G0]
				End line
				# 3.6.1
				Evaluate expression: ProgressBarSetMessage(Message + "3.6")
				Start a new line
					Export expression: "C.3.6.1 .. RDETBC[T/F];(O) - NETBC [1.6] > 0" [G0]
				End line
				If: NETBC>0
					Set Variable: RDETBC:= 0
					If: UseEvapotranspiration
						Loop for: Variable InnerTimeIndex from: 0 to: L_GetListSize(EvapotranspirationList)-1 step: 1
							Set Variable: InnerCurrentTime:= L_GetFromList(EvapotranspirationList, InnerTimeIndex)
							If: CurrentTime=InnerCurrentTime
								Set Variable: RDETBC:= UseEvapotranspiration
							End if
						End loop
						# end Loop for: Variable InnerTimeIndex from: 0 to: L_GetListSize(EvapotranspirationList)-1 step: 1
					End if
					Start a new line
						If: RDETBC
							Export expression: "T"; [G0]
						Else
							Export expression: "F"; [G0]
						End if
					End line
				End if
				# 3.6.2
				Start a new line
					Export expression: "C.3.6.2 .. QETBC by x,y,z range {0.1-0.3};(O) - RDETBC [3.6.1]; QETBC generic time units" [G0]
				End line
				If: RDETBC&(NETBC>0)
					# Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
					Evaluate expression: ProgressBarAdvance()
					Evaluate expression: BL_FreeVertexList()
					# Read Line information for current Unit
					If: !BL_AddVertexLayer("Horizontal Evapotranspiration Boundary")
						Alert: "Out of Memory. Abort this process, free up memory and try again."
					End if
					Set Variable: ListIndex:= -1
					Loop for: Objects in layer: Horizontal Evapotranspiration Boundary
						Set Variable: ElementLayerIndex:= Node Layer
						Set Variable: ListIndex:= ListIndex + 1
						If: !IsNA(Max Evapotranspiration1)
							Set Variable: ATime:= 0
							Evaluate expression: L_FreeAList(ObjectTimeList)
							Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
								If: IsNumber(Time[InnerTimeIndex])
									Set Variable: ATime:= Time[InnerTimeIndex]
								End if
								Evaluate expression: L_AddToList(ObjectTimeList, ATime)
							End loop
							Set Variable: InnerTimeIndex:= L_IndexOf(ObjectTimeList, CurrentTime)+1
							# Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
							# If: CurrentTime<=Time[InnerTimeIndex]
							Set Variable: QETBC:= Max Evapotranspiration[InnerTimeIndex]
							# End if
							# end If: CurrentTime<=Time[InnerTimeIndex]
							# End loop
							If: ContourType()=3
								Set Variable: RowCount:= BL_GetRowNodeCount()
								Set Variable: ColumnCount:= BL_GetColumnNodeCount()
								Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
									Set Variable: NodeX:= BL_GetColumnNodePosition(ColumnIndex)
									Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
										Set Variable: NodeY:= BL_GetRowNodePosition(RowIndex)
										# If: BL_GetCountOfCellLists()>0
										# Loop for: Variable ListIndex from: 0 to: BL_GetCountOfCellLists()-1 step: 1
										If: BL_PointInsideContour(ListIndex, NodeX, NodeY)
											Start a new line
												Export expression: NodeX; [G0]
												Export expression: NodeX; [G0]
												Export expression: NodeY; [G0]
												Export expression: NodeY; [G0]
												Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
												Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
											End line
											Start a new line
												Export expression: QETBC; [G0]
												Export expression: 1; [G0]
											End line
										End if
										# end if BL_PointInsideContour(ListIndex, NodeX, NodeY)
										# End loop
										# end Loop for: Variable ListIndex from: 0 to: BL_GetCountOfCellLists()-1 step: 1
										# End if
										# end If: BL_GetCountOfCellLists()>0
									End loop
									# end Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
								End loop
								# end Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
							End if
							If: BL_GetCountOfACellList(ListIndex)>0
								Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACellList(ListIndex)-1 step: 1
									Set Variable: AColumn:= BL_GetCellColumn(ListIndex, CellIndex)
									Set Variable: ARow:= BL_GetCellRow(ListIndex, CellIndex)
									If: (L_GetFrom3DList(BoundaryTypeArray, AColumn - 1, ARow - 1, ElementLayerIndex - 1)!=1)
										Start a new line
											Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
											Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
											Export expression: L_GetFromList(RowList, ARow - 1); [G0]
											Export expression: L_GetFromList(RowList, ARow - 1); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
										End line
										Start a new line
											Export expression: QETBC; [G0]
											Export expression: 1; [G0]
										End line
									End if
								End loop
								# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
							End if
						End if
					End loop
					# end Loop for: Objects in layer: Horizontal Evapotranspiration Boundary
					# End loop
					# End Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
					Start a new line
						Export expression: "END" [G0]
					End line
				End if
				Start a new line
					Export expression: "C------------------------------------------------------------------------------" [G0]
				End line
				Start a new line
					Export expression: "C.....     Aquifer influence function b.c." [G0]
				End line
				# 3.7.1
				Evaluate expression: ProgressBarSetMessage(Message + "3.7")
				Start a new line
					Export expression: "C.3.7.1 .. RDAIF[T/F];(O) - NAIFC [1.6] > 0" [G0]
				End line
				If: NAIFC>0
					Set Variable: RDAIF:= 0
					If: UseAquiferInfluence
						Loop for: Variable InnerTimeIndex from: 0 to: L_GetListSize(AqInflList)-1 step: 1
							Set Variable: InnerCurrentTime:= L_GetFromList(AqInflList, InnerTimeIndex)
							If: CurrentTime=InnerCurrentTime
								Set Variable: RDAIF:= UseAquiferInfluence
							End if
						End loop
						# end Loop for: Variable InnerTimeIndex from: 0 to: L_GetListSize(AqInflList)-1 step: 1
					End if
					Start a new line
						If: RDAIF
							Export expression: "T"; [G0]
						Else
							Export expression: "F"; [G0]
						End if
					End line
				End if
				# 3.7.2
				Start a new line
					Export expression: "C.3.7.2 .. DENOAR by x,y,z range {0.1-0.3};(O) - RDAIF [3.7.1]" [G0]
				End line
				If: RDAIF&(NAIFC>0)
					Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
						Evaluate expression: ProgressBarAdvance()
						Evaluate expression: BL_FreeVertexList()
						# Read Line information for current Unit
						If: !BL_AddVertexLayer("Vertical Aquifer Influence Boundary NL" + ElementLayerIndex)
							Alert: "Out of Memory. Abort this process, free up memory and try again."
						End if
						Set Variable: ListIndex:= -1
						Loop for: Objects in layer: Vertical Aquifer Influence Boundary NL[ElementLayerIndex]
							Set Variable: ListIndex:= ListIndex + 1
							If: !IsNA(Density1)
								Set Variable: ATime:= 0
								Evaluate expression: L_FreeAList(ObjectTimeList)
								Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
									If: IsNumber(Time[InnerTimeIndex])
										Set Variable: ATime:= Time[InnerTimeIndex]
									End if
									Evaluate expression: L_AddToList(ObjectTimeList, ATime)
								End loop
								Set Variable: InnerTimeIndex:= L_IndexOf(ObjectTimeList, CurrentTime)+1
								# Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
								# If: CurrentTime<=Time[InnerTimeIndex]
								Set Variable: DENOAR:= Density[InnerTimeIndex]
								# End if
								# end If: CurrentTime<=Time[InnerTimeIndex]
								# End loop
								If: BL_GetCountOfACrossRowList(ListIndex)>0
									Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossRowList(ListIndex)-1 step: 1
										Set Variable: AColumn:= BL_GetCrossRowColumn(ListIndex, CellIndex)
										Set Variable: ARow:= BL_GetCrossRowRow(ListIndex, CellIndex)
										Start a new line
											Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
											Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
											Export expression: L_GetFromList(RowList, ARow - 1); [G0]
											Export expression: L_GetFromList(RowList, ARow - 1); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
										End line
										Start a new line
											Export expression: DENOAR; [G0]
											Export expression: 1; [G0]
										End line
									End loop
									# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossRowList(ListIndex)-1 step: 1
								End if
								# If: BL_GetCountOfACrossRowList(ListIndex)>0
							End if
						End loop
						# Loop for: Objects in layer: Vertical Aquifer Influence Boundary NL[ElementLayerIndex]
						Set Variable: ListIndex:= -1
						Loop for: Objects in layer: Vertical Aquifer Influence Boundary NL[ElementLayerIndex]
							Set Variable: ListIndex:= ListIndex + 1
							If: !IsNA(Density1)
								Set Variable: ATime:= 0
								Evaluate expression: L_FreeAList(ObjectTimeList)
								Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
									If: IsNumber(Time[InnerTimeIndex])
										Set Variable: ATime:= Time[InnerTimeIndex]
									End if
									Evaluate expression: L_AddToList(ObjectTimeList, ATime)
								End loop
								Set Variable: InnerTimeIndex:= L_IndexOf(ObjectTimeList, CurrentTime)+1
								# Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
								# If: CurrentTime<=Time[InnerTimeIndex]
								Set Variable: DENOAR:= Density[InnerTimeIndex]
								# End if
								# end If: CurrentTime<=Time[InnerTimeIndex]
								# End loop
								If: BL_GetCountOfACrossColumnList(ListIndex)>0
									Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
										Set Variable: AColumn:= BL_GetCrossColumnColumn(ListIndex, CellIndex)
										Set Variable: ARow:= BL_GetCrossColumnRow(ListIndex, CellIndex)
										Start a new line
											Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
											Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
											Export expression: L_GetFromList(RowList, ARow - 1); [G0]
											Export expression: L_GetFromList(RowList, ARow - 1); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
										End line
										Start a new line
											Export expression: DENOAR; [G0]
											Export expression: 1; [G0]
										End line
									End loop
									# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
								End if
								# If: BL_GetCountOfACrossColumnList(ListIndex)>0
							End if
						End loop
						# Loop for: Objects in layer: Vertical Aquifer Influence Boundary NL[ElementLayerIndex]
						# Clear Line information
						Evaluate expression: BL_FreeVertexList()
						# Read Line information for current Unit
						If: !BL_AddVertexLayer("Horizontal Aquifer Influence Boundary NL" + ElementLayerIndex)
							Alert: "Out of Memory. Abort this process, free up memory and try again."
						End if
						Set Variable: ListIndex:= -1
						Loop for: Objects in layer: Horizontal Aquifer Influence Boundary NL[ElementLayerIndex]
							Set Variable: ListIndex:= ListIndex + 1
							If: !IsNA(Density1)
								Set Variable: ATime:= 0
								Evaluate expression: L_FreeAList(ObjectTimeList)
								Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
									If: IsNumber(Time[InnerTimeIndex])
										Set Variable: ATime:= Time[InnerTimeIndex]
									End if
									Evaluate expression: L_AddToList(ObjectTimeList, ATime)
								End loop
								Set Variable: InnerTimeIndex:= L_IndexOf(ObjectTimeList, CurrentTime)+1
								# Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
								# If: CurrentTime<=Time[InnerTimeIndex]
								Set Variable: DENOAR:= Density[InnerTimeIndex]
								# End if
								# end If: CurrentTime<=Time[InnerTimeIndex]
								# End loop
								If: ContourType()=3
									Set Variable: RowCount:= BL_GetRowNodeCount()
									Set Variable: ColumnCount:= BL_GetColumnNodeCount()
									Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
										Set Variable: NodeX:= BL_GetColumnNodePosition(ColumnIndex)
										Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
											Set Variable: NodeY:= BL_GetRowNodePosition(RowIndex)
											# If: BL_GetCountOfCellLists()>0
											# Loop for: Variable ListIndex from: 0 to: BL_GetCountOfCellLists()-1 step: 1
											If: BL_PointInsideContour(ListIndex, NodeX, NodeY)
												Start a new line
													Export expression: NodeX; [G0]
													Export expression: NodeX; [G0]
													Export expression: NodeY; [G0]
													Export expression: NodeY; [G0]
													Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
													Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
												End line
												Start a new line
													Export expression: DENOAR; [G0]
													Export expression: 1; [G0]
												End line
											End if
											# end if BL_PointInsideContour(ListIndex, NodeX, NodeY)
											# End loop
											# end Loop for: Variable ListIndex from: 0 to: BL_GetCountOfCellLists()-1 step: 1
											# End if
											# end If: BL_GetCountOfCellLists()>0
										End loop
										# end Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
									End loop
									# end Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
								End if
								If: BL_GetCountOfACellList(ListIndex)>0
									Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACellList(ListIndex)-1 step: 1
										Set Variable: AColumn:= BL_GetCellColumn(ListIndex, CellIndex)
										Set Variable: ARow:= BL_GetCellRow(ListIndex, CellIndex)
										If: (L_GetFrom3DList(BoundaryTypeArray, AColumn - 1, ARow - 1, ElementLayerIndex - 1)!=1)
											Start a new line
												Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
												Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
												Export expression: L_GetFromList(RowList, ARow - 1); [G0]
												Export expression: L_GetFromList(RowList, ARow - 1); [G0]
												Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
												Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
											End line
											Start a new line
												Export expression: DENOAR; [G0]
												Export expression: 1; [G0]
											End line
										End if
									End loop
									# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
								End if
							End if
						End loop
						# end Loop for: Objects in layer: Horizontal Specified Flux Boundary NL[ElementLayerIndex]
					End loop
					# End Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
					Start a new line
						Export expression: "END" [G0]
					End line
				End if
				# 3.7.3
				Start a new line
					Export expression: "C.3.7.3 .. TAIF by x,y,z range {0.1-0.3};(O) - RDAIF [3.7.1] and HEAT [1.4]" [G0]
				End line
				If: RDAIF&HEAT&(NAIFC>0)
					Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
						Evaluate expression: ProgressBarAdvance()
						Evaluate expression: BL_FreeVertexList()
						# Read Line information for current Unit
						If: !BL_AddVertexLayer("Vertical Aquifer Influence Boundary NL" + ElementLayerIndex)
							Alert: "Out of Memory. Abort this process, free up memory and try again."
						End if
						Set Variable: ListIndex:= -1
						Loop for: Objects in layer: Vertical Aquifer Influence Boundary NL[ElementLayerIndex]
							Set Variable: ListIndex:= ListIndex + 1
							If: !IsNA(Density1)
								Set Variable: ATime:= 0
								Evaluate expression: L_FreeAList(ObjectTimeList)
								Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
									If: IsNumber(Time[InnerTimeIndex])
										Set Variable: ATime:= Time[InnerTimeIndex]
									End if
									Evaluate expression: L_AddToList(ObjectTimeList, ATime)
								End loop
								Set Variable: InnerTimeIndex:= L_IndexOf(ObjectTimeList, CurrentTime)+1
								# Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
								# If: CurrentTime<=Time[InnerTimeIndex]
								Set Variable: TAIF:= Temperature[InnerTimeIndex]
								# End if
								# end If: CurrentTime<=Time[InnerTimeIndex]
								# End loop
								If: BL_GetCountOfACrossRowList(ListIndex)>0
									Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossRowList(ListIndex)-1 step: 1
										Set Variable: AColumn:= BL_GetCrossRowColumn(ListIndex, CellIndex)
										Set Variable: ARow:= BL_GetCrossRowRow(ListIndex, CellIndex)
										Start a new line
											Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
											Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
											Export expression: L_GetFromList(RowList, ARow - 1); [G0]
											Export expression: L_GetFromList(RowList, ARow - 1); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
										End line
										Start a new line
											Export expression: TAIF; [G0]
											Export expression: 1; [G0]
										End line
									End loop
									# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossRowList(ListIndex)-1 step: 1
								End if
								# If: BL_GetCountOfACrossRowList(ListIndex)>0
							End if
						End loop
						# Loop for: Objects in layer: Vertical Aquifer Influence Boundary NL[ElementLayerIndex]
						Set Variable: ListIndex:= -1
						Loop for: Objects in layer: Vertical Aquifer Influence Boundary NL[ElementLayerIndex]
							Set Variable: ListIndex:= ListIndex + 1
							If: !IsNA(Density1)
								Set Variable: ATime:= 0
								Evaluate expression: L_FreeAList(ObjectTimeList)
								Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
									If: IsNumber(Time[InnerTimeIndex])
										Set Variable: ATime:= Time[InnerTimeIndex]
									End if
									Evaluate expression: L_AddToList(ObjectTimeList, ATime)
								End loop
								Set Variable: InnerTimeIndex:= L_IndexOf(ObjectTimeList, CurrentTime)+1
								# Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
								# If: CurrentTime<=Time[InnerTimeIndex]
								Set Variable: TAIF:= Temperature[InnerTimeIndex]
								# End if
								# end If: CurrentTime<=Time[InnerTimeIndex]
								# End loop
								If: BL_GetCountOfACrossColumnList(ListIndex)>0
									Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
										Set Variable: AColumn:= BL_GetCrossColumnColumn(ListIndex, CellIndex)
										Set Variable: ARow:= BL_GetCrossColumnRow(ListIndex, CellIndex)
										Start a new line
											Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
											Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
											Export expression: L_GetFromList(RowList, ARow - 1); [G0]
											Export expression: L_GetFromList(RowList, ARow - 1); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
										End line
										Start a new line
											Export expression: TAIF; [G0]
											Export expression: 1; [G0]
										End line
									End loop
									# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
								End if
								# If: BL_GetCountOfACrossColumnList(ListIndex)>0
							End if
						End loop
						# Loop for: Objects in layer: Vertical Aquifer Influence Boundary NL[ElementLayerIndex]
						# Clear Line information
						Evaluate expression: BL_FreeVertexList()
						# Read Line information for current Unit
						If: !BL_AddVertexLayer("Horizontal Aquifer Influence Boundary NL" + ElementLayerIndex)
							Alert: "Out of Memory. Abort this process, free up memory and try again."
						End if
						Set Variable: ListIndex:= -1
						Loop for: Objects in layer: Horizontal Aquifer Influence Boundary NL[ElementLayerIndex]
							Set Variable: ListIndex:= ListIndex + 1
							If: !IsNA(Density1)
								Set Variable: ATime:= 0
								Evaluate expression: L_FreeAList(ObjectTimeList)
								Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
									If: IsNumber(Time[InnerTimeIndex])
										Set Variable: ATime:= Time[InnerTimeIndex]
									End if
									Evaluate expression: L_AddToList(ObjectTimeList, ATime)
								End loop
								Set Variable: InnerTimeIndex:= L_IndexOf(ObjectTimeList, CurrentTime)+1
								# Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
								# If: CurrentTime<=Time[InnerTimeIndex]
								Set Variable: TAIF:= Temperature[InnerTimeIndex]
								# End if
								# end If: CurrentTime<=Time[InnerTimeIndex]
								# End loop
								If: ContourType()=3
									Set Variable: RowCount:= BL_GetRowNodeCount()
									Set Variable: ColumnCount:= BL_GetColumnNodeCount()
									Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
										Set Variable: NodeX:= BL_GetColumnNodePosition(ColumnIndex)
										Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
											Set Variable: NodeY:= BL_GetRowNodePosition(RowIndex)
											# If: BL_GetCountOfCellLists()>0
											# Loop for: Variable ListIndex from: 0 to: BL_GetCountOfCellLists()-1 step: 1
											If: BL_PointInsideContour(ListIndex, NodeX, NodeY)
												Start a new line
													Export expression: NodeX; [G0]
													Export expression: NodeX; [G0]
													Export expression: NodeY; [G0]
													Export expression: NodeY; [G0]
													Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
													Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
												End line
												Start a new line
													Export expression: TAIF; [G0]
													Export expression: 1; [G0]
												End line
											End if
											# end if BL_PointInsideContour(ListIndex, NodeX, NodeY)
											# End loop
											# end Loop for: Variable ListIndex from: 0 to: BL_GetCountOfCellLists()-1 step: 1
											# End if
											# end If: BL_GetCountOfCellLists()>0
										End loop
										# end Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
									End loop
									# end Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
								End if
								If: BL_GetCountOfACellList(ListIndex)>0
									Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACellList(ListIndex)-1 step: 1
										Set Variable: AColumn:= BL_GetCellColumn(ListIndex, CellIndex)
										Set Variable: ARow:= BL_GetCellRow(ListIndex, CellIndex)
										If: (L_GetFrom3DList(BoundaryTypeArray, AColumn - 1, ARow - 1, ElementLayerIndex - 1)!=1)
											Start a new line
												Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
												Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
												Export expression: L_GetFromList(RowList, ARow - 1); [G0]
												Export expression: L_GetFromList(RowList, ARow - 1); [G0]
												Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
												Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
											End line
											Start a new line
												Export expression: TAIF; [G0]
												Export expression: 1; [G0]
											End line
										End if
									End loop
									# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
								End if
							End if
						End loop
						# end Loop for: Objects in layer: Horizontal Specified Flux Boundary NL[ElementLayerIndex]
					End loop
					# End Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
					Start a new line
						Export expression: "END" [G0]
					End line
				End if
				# 3.7.4
				Start a new line
					Export expression: "C.3.7.4 .. CAIF by x,y,z range {0.1-0.3};(O) - RDAIF [3.7.1] and SOLUTE [1.4]" [G0]
				End line
				If: RDAIF&SOLUTE&(NAIFC>0)
					Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
						Evaluate expression: ProgressBarAdvance()
						Evaluate expression: BL_FreeVertexList()
						# Read Line information for current Unit
						If: !BL_AddVertexLayer("Vertical Aquifer Influence Boundary NL" + ElementLayerIndex)
							Alert: "Out of Memory. Abort this process, free up memory and try again."
						End if
						Set Variable: ListIndex:= -1
						Loop for: Objects in layer: Vertical Aquifer Influence Boundary NL[ElementLayerIndex]
							Set Variable: ListIndex:= ListIndex + 1
							Set Variable: MassFractionTest:= 0
							If: SCALMF
								If: !IsNA(Scaled Mass Fraction[InnerTimeIndex])
									Set Variable: MassFractionTest:= 1
								End if
							Else
								If: !IsNA(Mass Fraction[InnerTimeIndex])
									Set Variable: MassFractionTest:= 1
								End if
							End if
							If: MassFractionTest
								Set Variable: ATime:= 0
								Evaluate expression: L_FreeAList(ObjectTimeList)
								Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
									If: IsNumber(Time[InnerTimeIndex])
										Set Variable: ATime:= Time[InnerTimeIndex]
									End if
									Evaluate expression: L_AddToList(ObjectTimeList, ATime)
								End loop
								Set Variable: InnerTimeIndex:= L_IndexOf(ObjectTimeList, CurrentTime)+1
								# Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
								# If: CurrentTime<=Time[InnerTimeIndex]
								If: SCALMF
									Set Variable: CIAF:= Scaled Mass Fraction[InnerTimeIndex]
								Else
									Set Variable: CIAF:= Mass Fraction[InnerTimeIndex]
								End if
								# End if
								# end If: CurrentTime<=Time[InnerTimeIndex]
								# End loop
								If: BL_GetCountOfACrossRowList(ListIndex)>0
									Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossRowList(ListIndex)-1 step: 1
										Set Variable: AColumn:= BL_GetCrossRowColumn(ListIndex, CellIndex)
										Set Variable: ARow:= BL_GetCrossRowRow(ListIndex, CellIndex)
										Start a new line
											Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
											Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
											Export expression: L_GetFromList(RowList, ARow - 1); [G0]
											Export expression: L_GetFromList(RowList, ARow - 1); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
										End line
										Start a new line
											Export expression: CIAF; [G0]
											Export expression: 1; [G0]
										End line
									End loop
									# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossRowList(ListIndex)-1 step: 1
								End if
								# If: BL_GetCountOfACrossRowList(ListIndex)>0
							End if
						End loop
						# Loop for: Objects in layer: Vertical Aquifer Influence Boundary NL[ElementLayerIndex]
						Set Variable: ListIndex:= -1
						Loop for: Objects in layer: Vertical Aquifer Influence Boundary NL[ElementLayerIndex]
							Set Variable: ListIndex:= ListIndex + 1
							Set Variable: MassFractionTest:= 0
							If: SCALMF
								If: !IsNA(Scaled Mass Fraction[InnerTimeIndex])
									Set Variable: MassFractionTest:= 1
								End if
							Else
								If: !IsNA(Mass Fraction[InnerTimeIndex])
									Set Variable: MassFractionTest:= 1
								End if
							End if
							If: MassFractionTest
								Set Variable: ATime:= 0
								Evaluate expression: L_FreeAList(ObjectTimeList)
								Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
									If: IsNumber(Time[InnerTimeIndex])
										Set Variable: ATime:= Time[InnerTimeIndex]
									End if
									Evaluate expression: L_AddToList(ObjectTimeList, ATime)
								End loop
								Set Variable: InnerTimeIndex:= L_IndexOf(ObjectTimeList, CurrentTime)+1
								# Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
								# If: CurrentTime<=Time[InnerTimeIndex]
								If: SCALMF
									Set Variable: CIAF:= Scaled Mass Fraction[InnerTimeIndex]
								Else
									Set Variable: CIAF:= Mass Fraction[InnerTimeIndex]
								End if
								# End if
								# end If: CurrentTime<=Time[InnerTimeIndex]
								# End loop
								If: BL_GetCountOfACrossColumnList(ListIndex)>0
									Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
										Set Variable: AColumn:= BL_GetCrossColumnColumn(ListIndex, CellIndex)
										Set Variable: ARow:= BL_GetCrossColumnRow(ListIndex, CellIndex)
										Start a new line
											Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
											Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
											Export expression: L_GetFromList(RowList, ARow - 1); [G0]
											Export expression: L_GetFromList(RowList, ARow - 1); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
											Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
										End line
										Start a new line
											Export expression: CIAF; [G0]
											Export expression: 1; [G0]
										End line
									End loop
									# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
								End if
								# If: BL_GetCountOfACrossColumnList(ListIndex)>0
							End if
						End loop
						# Loop for: Objects in layer: Vertical Aquifer Influence Boundary NL[ElementLayerIndex]
						# Clear Line information
						Evaluate expression: BL_FreeVertexList()
						# Read Line information for current Unit
						If: !BL_AddVertexLayer("Horizontal Aquifer Influence Boundary NL" + ElementLayerIndex)
							Alert: "Out of Memory. Abort this process, free up memory and try again."
						End if
						Set Variable: ListIndex:= -1
						Loop for: Objects in layer: Horizontal Aquifer Influence Boundary NL[ElementLayerIndex]
							Set Variable: ListIndex:= ListIndex + 1
							Set Variable: MassFractionTest:= 0
							If: SCALMF
								If: !IsNA(Scaled Mass Fraction[InnerTimeIndex])
									Set Variable: MassFractionTest:= 1
								End if
							Else
								If: !IsNA(Mass Fraction[InnerTimeIndex])
									Set Variable: MassFractionTest:= 1
								End if
							End if
							If: MassFractionTest
								Set Variable: ATime:= 0
								Evaluate expression: L_FreeAList(ObjectTimeList)
								Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
									If: IsNumber(Time[InnerTimeIndex])
										Set Variable: ATime:= Time[InnerTimeIndex]
									End if
									Evaluate expression: L_AddToList(ObjectTimeList, ATime)
								End loop
								Set Variable: InnerTimeIndex:= L_IndexOf(ObjectTimeList, CurrentTime)+1
								# Loop for: Variable InnerTimeIndex from: 1 to: HST3D_NPer step: 1
								# If: CurrentTime<=Time[InnerTimeIndex]
								If: SCALMF
									Set Variable: CIAF:= Scaled Mass Fraction[InnerTimeIndex]
								Else
									Set Variable: CIAF:= Mass Fraction[InnerTimeIndex]
								End if
								# End if
								# end If: CurrentTime<=Time[InnerTimeIndex]
								# End loop
								If: ContourType()=3
									Set Variable: RowCount:= BL_GetRowNodeCount()
									Set Variable: ColumnCount:= BL_GetColumnNodeCount()
									Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
										Set Variable: NodeX:= BL_GetColumnNodePosition(ColumnIndex)
										Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
											Set Variable: NodeY:= BL_GetRowNodePosition(RowIndex)
											# If: BL_GetCountOfCellLists()>0
											# Loop for: Variable ListIndex from: 0 to: BL_GetCountOfCellLists()-1 step: 1
											If: BL_PointInsideContour(ListIndex, NodeX, NodeY)
												Start a new line
													Export expression: NodeX; [G0]
													Export expression: NodeX; [G0]
													Export expression: NodeY; [G0]
													Export expression: NodeY; [G0]
													Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
													Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
												End line
												Start a new line
													Export expression: CIAF; [G0]
													Export expression: 1; [G0]
												End line
											End if
											# end if BL_PointInsideContour(ListIndex, NodeX, NodeY)
											# End loop
											# end Loop for: Variable ListIndex from: 0 to: BL_GetCountOfCellLists()-1 step: 1
											# End if
											# end If: BL_GetCountOfCellLists()>0
										End loop
										# end Loop for: Variable RowIndex from: 0 to: RowCount - 1 step: 1
									End loop
									# end Loop for: Variable ColumnIndex from: 0 to: ColumnCount - 1 step: 1
								End if
								If: BL_GetCountOfACellList(ListIndex)>0
									Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACellList(ListIndex)-1 step: 1
										Set Variable: AColumn:= BL_GetCellColumn(ListIndex, CellIndex)
										Set Variable: ARow:= BL_GetCellRow(ListIndex, CellIndex)
										If: (L_GetFrom3DList(BoundaryTypeArray, AColumn - 1, ARow - 1, ElementLayerIndex - 1)!=1)
											Start a new line
												Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
												Export expression: L_GetFromList(ColumnList, AColumn - 1); [G0]
												Export expression: L_GetFromList(RowList, ARow - 1); [G0]
												Export expression: L_GetFromList(RowList, ARow - 1); [G0]
												Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
												Export expression: HST3D_GetZ(ElementLayerIndex); [G0]
											End line
											Start a new line
												Export expression: CIAF; [G0]
												Export expression: 1; [G0]
											End line
										End if
									End loop
									# Loop for: Variable CellIndex from: 0 to: BL_GetCountOfACrossColumnList(ListIndex)-1 step: 1
								End if
							End if
						End loop
						# end Loop for: Objects in layer: Horizontal Specified Flux Boundary NL[ElementLayerIndex]
					End loop
					# End Loop for: Variable ElementLayerIndex from: 1 to: NZ step: 1
					Start a new line
						Export expression: "END" [G0]
					End line
				End if
				Start a new line
					Export expression: "C------------------------------------------------------------------------------" [G0]
				End line
				# 3.8.1
				Start a new line
					Export expression: "C.....Calculation information" [G0]
				End line
				Evaluate expression: ProgressBarSetMessage(Message + "3.8")
				Start a new line
					Export expression: "C.3.8.1 .. RDCALC[T/F]" [G0]
				End line
				Set Variable: RDCALC:= 0
				Set Variable: CurrentTimeIndex:= 0
				Loop for: Variable InnerTimeIndex from: 0 to: L_GetListSize(SolverList)-1 step: 1
					Set Variable: InnerCurrentTime:= L_GetFromList(SolverList, InnerTimeIndex)
					If: CurrentTime=InnerCurrentTime
						Set Variable: RDCALC:= 1
					End if
				End loop
				# end Loop for: Variable InnerTimeIndex from: 0 to: L_GetListSize(AqInflList)-1 step: 1
				Start a new line
					If: RDCALC
						Export expression: "T"; [G0]
					Else
						Export expression: "F"; [G0]
					End if
				End line
				Start a new line
					Export expression: "C.3.8.2 .. AUTOTS[T/F];(O) - RDCALC [3.8.1]" [G0]
				End line
				Set Variable: CurrentTimeIndex:= L_IndexOf(SolverList, CurrentTime) + 1
				If: RDCALC
					Set Variable: AUTOTS:= HST3D_Autots(CurrentTimeIndex)
					Start a new line
						If: AUTOTS
							Export expression: "T"; [G0]
						Else
							Export expression: "F"; [G0]
						End if
					End line
					If: !AUTOTS
						# 3.83B
						Start a new line
							Export expression: "C.3.8.3A .. DELTIM;(O) - RDCALC [3.8.1] and NOT AUTOTS [3.8.2]" [G0]
						End line
						Start a new line
							Export expression: HST3D_Deltim(CurrentTimeIndex); [G0]
						End line
					Else
						Start a new line
							Export expression: "C.3.8.3B .. DPTAS{5E4},DTTAS{5.},DCTAS{.25},DTIMMN{1.E4},DTIMMX{1.E7};" [G0]
						End line
						Start a new line
							Export expression: "C..           (O) - RDCALC [3.8.1] and AUTOTS [3.8.2]" [G0]
						End line
						Start a new line
							Export expression: HST3D_Dptas(CurrentTimeIndex); [G0]
							Export expression: HST3D_Dttas(CurrentTimeIndex); [G0]
							Export expression: HST3D_Dctas(CurrentTimeIndex); [G0]
							Export expression: HST3D_Dtimmn(CurrentTimeIndex); [G0]
							Export expression: HST3D_Dtimmx(CurrentTimeIndex); [G0]
						End line
					End if
				End if
				# 3.8.4
				Start a new line
					Export expression: "C.3.8.4 .. TIMCHG" [G0]
				End line
				Start a new line
					Export expression: L_GetFromList(TimeList, TimeIndex+1) [G0]
				End line
				Start a new line
					Export expression: "C------------------------------------------------------------------------------" [G0]
				End line
				Start a new line
					Export expression: "C.....Output information" [G0]
				End line
				# 3.9.1
				Evaluate expression: ProgressBarSetMessage(Message + "3.9")
				Start a new line
					Export expression: "C.3.9.1 .. PRISLM,PRIKD,PRIPTC,PRIDV,PRIVEL,PRIGFB,PRIBCF,PRIWEL; all [I]" [G0]
				End line
				Start a new line
					Export expression: HST3D_Prislm(CurrentTimeIndex); [G0]
					Export expression: HST3D_Prikd(CurrentTimeIndex); [G0]
					Export expression: HST3D_Priptc(CurrentTimeIndex); [G0]
					Export expression: HST3D_Pridv(CurrentTimeIndex); [G0]
					Export expression: HST3D_Privel(CurrentTimeIndex); [G0]
					Export expression: HST3D_Prigfb(CurrentTimeIndex); [G0]
					Export expression: HST3D_Pribcf(CurrentTimeIndex); [G0]
					Export expression: HST3D_Priwel(CurrentTimeIndex); [G0]
				End line
				Start a new line
					Export expression: "C.3.9.2 .. IPRPTC;(O) - IF PRIPTC [3.9.1] NOT = 0" [G0]
				End line
				If: HST3D_Priptc(CurrentTimeIndex)
					Start a new line
						Export expression: HST3D_Iprptc(CurrentTimeIndex) [G0]
					End line
				End if
				# 3.9.3
				Start a new line
					Export expression: "C.3.9.3 .. CHKPTD[T/F],PRICPD,SAVLDO[T/F]" [G0]
				End line
				Start a new line
					If: HST3D_Chkptd(CurrentTimeIndex)
						Export expression: "T"; [G0]
					Else
						Export expression: "F"; [G0]
					End if
					Export expression: HST3D_Pricpd(CurrentTimeIndex); [G0]
					If: HST3D_Savldo(CurrentTimeIndex)
						Export expression: "T"; [G0]
					Else
						Export expression: "F"; [G0]
					End if
				End line
				Start a new line
					Export expression: "C------------------------------------------------------------------------------" [G0]
				End line
				Start a new line
					Export expression: "C.....Contour and vector map information" [G0]
				End line
				# 3.10.1
				Evaluate expression: ProgressBarSetMessage(Message + "3.10")
				Start a new line
					Export expression: "C.3.10.1 .. CNTMAP[T/F],VECMAP[T/F],PRIMAP[I]" [G0]
				End line
				Start a new line
					If: HST3D_Cntmap(CurrentTimeIndex)
						Export expression: "T"; [G0]
					Else
						Export expression: "F"; [G0]
					End if
					If: HST3D_Vecmap(CurrentTimeIndex)
						Export expression: "T"; [G0]
					Else
						Export expression: "F"; [G0]
					End if
					Export expression: HST3D_Primap(CurrentTimeIndex); [G0]
				End line
				Start a new line
					Export expression: "C------------------------------------------------------------------------------" [G0]
				End line
				Start a new line
					Export expression: "C.....End of transient information set number " [G0]
					Export expression: TimeIndex+1 [G0]
				End line
				Start a new line
					Export expression: "C- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -" [G0]
				End line
				Start a new line
					Export expression: "C.....Read sets of READ3 data at each TIMCHG until THRU  (Lines 3.N1.N2)" [G0]
				End line
				Start a new line
					Export expression: "C------------------------------------------------------------------------------" [G0]
				End line
			End if
		End loop
		# end Loop for: Variable TimeIndex from: 0 to: L_GetListSize(TimeList)-1 step: 1
		# final 3.1
		Evaluate expression: ProgressBarSetMessage(Message + "3.1")
		Start a new line
			Export expression: "C.....End of simulation line follows, THRU=.TRUE." [G0]
		End line
		# 3.99
		Evaluate expression: ProgressBarSetMessage(Message + "3.99")
		Start a new line
			Export expression: "C.3.99.1 .. THRU" [G0]
		End line
		Start a new line
			Export expression: "T" [G0]
		End line
		Start a new line
			Export expression: "C.....End of the data file" [G0]
		End line
		Start a new line
			Export expression: "C------------------------------------------------------------------------------" [G0]
		End line
		Start a new line
			Export expression: "C------------------------------------------------------------------------------" [G0]
		End line
	End file
	Evaluate expression: BL_FreeAllBlockLists()
	Evaluate expression: L_FreeAllLists()
	Redirect output to: RunHST3D.BAT
		Start a new line
			Export expression: RunPath; [G0]
			Export expression: "<Response.txt" [G0]
		End line
		If: PauseDOS
			Start a new line
				Export expression: "pause" [G0]
			End line
		End if
	End file
	Redirect output to: Response.txt
		Start a new line
			Export expression: InputFileName [G0]
		End line
		Start a new line
			Export expression: OutputExtension [G0]
		End line
		If: RESTRT
			Evaluate expression: HST3D_RenameFiles("Rst." + OutputExtension, "Rst.Old" + OutputExtension)
			Start a new line
				Export expression: "Old" + OutputExtension [G0]
			End line
		End if
	End file
	If: RunHST3D
		Execute external code: "RunHST3D.BAT"
	End if
	Evaluate expression: ProgressBarFree()
	If: L_GetErrorCount()
		Alert: "An error occurred during export of this model. Please contact the PIE developer for assistance."
	End if
End if

