# =============================================================================
# Export template for SUTRA PIE
# =============================================================================
# David Boldt                                                     Oct. 16, 1997
# modified by Richard Winston                                     Aug. 17, 1999
# 
Define Variable: ok [Boolean]
Define Variable: freemesh [Boolean]
Set Variable: ok:= 1
# Define Variable: NBI [Integer]
Define Variable: NN1 [Integer]
Define Variable: NN2 [Integer]
Define Variable: NN3 [Integer]
Define Variable: transportConditions [Integer]
If: @rbSpecific@
	If: @rbSoluteVarDens@
		Set Variable: transportConditions:= 0
	End if
	If: @rbSoluteConstDens@
		Set Variable: transportConditions:= 1
	End if
	If: @rbEnergy@
		Set Variable: transportConditions:= 2
	End if
Else
	If: @rbSoluteVarDens@|@rbSoluteConstDens@
		Set Variable: transportConditions:= 0
	Else
		Set Variable: transportConditions:= 2
	End if
End if
Define Variable: SutraDimensions [Integer]
If: (@rbSpecific@&(@rb3D_va@|@rb3D_nva@))|(@rbGeneral@&(@rgDimensions@=1))
	Set Variable: SutraDimensions:= 3
Else
	Set Variable: SutraDimensions:= 2
End if
Evaluate expression: SUTRA_RF_Clear_Files()
# variable definitions
# 
Define Variable: TransportType [Integer]
# TransportType: 1=Energy, 2=Solute
	If: @rbEnergy@=1
		Set Variable: TransportType:= 1
	Else
		Set Variable: TransportType:= 2
	End if
Define Variable: TransportType2 [Integer]
Set Variable: TransportType2:= Sutra_GetTransportType()
Define Variable: StateVariableType [Integer]
# StateVariableType: 1=Head, 2=Pressure
If: @rbSpecific@&@rbSoluteConstDens@
	Set Variable: StateVariableType:= 1
Else
	Set Variable: StateVariableType:= 2
End if
Define Variable: FluidSourceCount [Integer]
Define Variable: SoluteEnergyCount [Integer]
Define Variable: SpecifiedPressureCount [Integer]
Define Variable: SpecTempConcCount [Integer]
Define Variable: ObservationCount [Integer]
Define Variable: ObservationCount2 [Integer]
Define Variable: Calibrate [Boolean]
Set Variable: Calibrate:= @cbExternal@
Define Variable: ContinueSimulation [Boolean]
Define Variable: ReMakeICS [Boolean]
Set Variable: ContinueSimulation:= 1
Define Variable: VertexIndex [Integer]
Define Variable: VertexCount [Integer]
Define Variable: XPosition [Real]
Define Variable: YPosition [Real]
Define Variable: VertexFound [Boolean]
Define Variable: InvalidSourcesCount [Integer]
Set Variable: InvalidSourcesCount:= 0
Define Variable: ObservationContourCount [Integer]
Set Variable: ObservationContourCount:= 0
Define Variable: XCoordList [Integer]
Define Variable: YCoordList [Integer]
Define Variable: NodeIndex [Integer]
Define Variable: NodeCount [Integer]
Define Variable: ElementIndex [Integer]
Define Variable: ElementCount [Integer]
Define Variable: MinX [Real]
Define Variable: MaxX [Real]
Define Variable: MinY [Real]
Define Variable: MaxY [Real]
Define Variable: Epsilon [Real]
Define Variable: ContourIndex [Integer]
Define Variable: LayerIndex [Integer]
Define Variable: LayerCount [Integer]
Define Variable: BoundaryLayerCount [Integer]
Define Variable: NodeX [Real]
Define Variable: NodeY [Real]
Define Variable: SameX [Boolean]
Define Variable: SameY [Boolean]
# 
Define Variable: SutraPath [String]
Set Variable: SutraPath:= "@edRunSutra@"
Define Variable: AcuteElement [Integer]
Define Variable: CountEnergySoluteSources [Integer]
Define Variable: CountFluidSources [Integer]
Define Variable: CountInvalidPBCandQIN [Integer]
Define Variable: CountInvalidSources [Integer]
Define Variable: CountInvalidWellSources [Integer]
Define Variable: CountInvalidUBCandQUIN [Integer]
Define Variable: CountMissingSources [Integer]
Define Variable: CountMissingSources2 [Integer]
Define Variable: CountNodelessWells [Integer]
Define Variable: CountObservationNodes [Integer]
Define Variable: CountSpecifiedCorT [Integer]
Define Variable: CountSpecifiedP [Integer]
Define Variable: InValidOutput [Integer]
Define Variable: i [Integer]
Define Variable: NodeToBandwidthRatio [Real]
Define Variable: TSTART [Real]
Define Variable: StringLength [Integer]
Define Variable: BadFluidSourceConc [Boolean]
Define Variable: ProgressMax [Integer]
# -----------------------------------------------------------------------------
# Some error checking, much more could be done
# 
# Use variable "Alert" to set level of feedback
#   0 - show all alert messages
#   1 - turn off warnings, alert messages that could be problems
#   2 - turn off alert messages on conditions that will certainly
#       produce invalid model results
Define Variable: Alert [Integer]
Set Variable: Alert:= @rgAlert@
# 
If: SutraDimensions=3
	Set Variable: NodeCount:= NumNodes()*Sutra_GetZCount()
	Set Variable: ElementCount:= NumElements()*(Sutra_GetZCount()-1)
	Set Variable: LayerCount:= @adeVertDisc@+1
Else
	Set Variable: NodeCount:= NumNodes()
	Set Variable: ElementCount:= NumElements()
End if
Set Variable: ProgressMax:= 0
If: SutraDimensions=3
	# 	Set Variable: ProgressMax:= ProgressMax + 28 + LayerCount*8 +7*NodeCount
	Set Variable: ProgressMax:= ProgressMax + 38 + LayerCount*7
Else
	Set Variable: ProgressMax:= ProgressMax + 28 + ElementCount*2 + 9*NodeCount
End if
If: SutraDimensions=2
	If: @rbFishnet@
		Set Variable: ProgressMax:= ProgressMax + 1
	End if
Else
	Set Variable: ProgressMax:= ProgressMax + 1
End if
# If: !@cbExportNBI@ | !@cbExport8D@ | !@cbExport19@ | !@cbExport20@ | !@cbExport17@ | !@cbExport18@
If: !@cbExport8D@ | !@cbExport19@ | !@cbExport20@ | !@cbExport17@ | !@cbExport18@
	Set Variable: ok:= Sutra_ReadDataSet3("@edRoot@.inp3")
	If: ok
		# If: !@cbExportNBI@
		#	Set Variable: NBI:= Sutra_GetNBI()
		# End if
		If: !@cbExport19@
			Set Variable: SpecifiedPressureCount:= Sutra_GetNPBC()
		End if
		If: !@cbExport20@
			Set Variable: SpecTempConcCount:= Sutra_GetNUBC()
		End if
		If: !@cbExport17@
			Set Variable: FluidSourceCount:= Sutra_GetNSOP()
		End if
		If: !@cbExport18@
			Set Variable: SoluteEnergyCount:= Sutra_GetNSOU()
		End if
		If: !@cbExport8D@
			Set Variable: ObservationCount:= Sutra_GetNOBS()
		End if
	End if
End if
Evaluate expression: Sutra_ProgressBarInitialize(ProgressMax, 1)
If: SutraDimensions=2
	If: @rbFishnet@
		Set Variable: ContinueSimulation:= Sutra_ProgressBarSetMessage("Determining mesh dimensions")
		Set Variable: ok:= Sutra_SetFishNetMeshCount("")
		If: !ok
			Alert: "Error while determining fishnet mesh dimensions"
		End if
		Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
	End if
Else
	Set Variable: ContinueSimulation:= Sutra_ProgressBarSetMessage("Determining mesh dimensions")
	If: @rb3D_va@
		Set Variable: ok:= Sutra_SetFishNetMeshCount("")
	Else
		Set Variable: ok:= Sutra_SetFishNetMeshCount("1")
	End if
	If: !ok
		Alert: "Error while determining fishnet mesh dimensions"
	End if
	Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
End if
If: SutraDimensions=3
	Set Variable: ContinueSimulation:= Sutra_ProgressBarSetMessage("Caching Data")
	If: ok&ContinueSimulation&@cbExport17@
		Set Variable: ContourIndex:= 0
		Set Variable: BoundaryLayerCount:= Sutra_GetBoundaryCount(1,1)
		If: BoundaryLayerCount>0
			Loop for: Variable LayerIndex from: 1 to: BoundaryLayerCount step: 1
				Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
				If: ok&ContinueSimulation
					Loop for: Objects in layer: Sources of Fluid Solids[LayerIndex]
						If: ok&ContinueSimulation
							Set Variable: ContourIndex:= ContourIndex + 1
							# Evaluate expression: Sutra_IsOverridenFluidSourceBottom(ContourIndex, IsOverriden(Sources of Fluid Solids[LayerIndex].bottom elevation))
							If: @rbSoluteVarDens@|@rbSoluteConstDens@
								Evaluate expression: Sutra_IsOverridenFluidSourceConc(ContourIndex, IsOverriden(Sources of Fluid Solids[LayerIndex].concentration_of_source))
							Else
								Evaluate expression: Sutra_IsOverridenFluidSourceConc(ContourIndex, IsOverriden(Sources of Fluid Solids[LayerIndex].temperature_of_source))
							End if
							Evaluate expression: Sutra_IsOverridenFluidSourceSpecific(ContourIndex, IsOverriden(Sources of Fluid Solids[LayerIndex].specific_source))
							# Evaluate expression: Sutra_IsOverridenFluidSourceTop(ContourIndex, IsOverriden(Sources of Fluid Solids[LayerIndex].top elevation))
							Evaluate expression: Sutra_IsOverridenFluidSourceTotal(ContourIndex, IsOverriden(Sources of Fluid Solids[LayerIndex].total_source))
							If: Alert<2
								If: (TOTAL OR SPECIFIC SOURCE=0)
									Set Variable: OK:= 0
									Alert: "Error: You must set the total or specific source for every object on the Sources of Fluid Solids" + LayerIndex + " layer."
								End if
								If: @rbSoluteVarDens@|@rbSoluteConstDens@
									If: (concentration_of_source=$N/A)
										Set Variable: OK:= 0
										Alert: "Error: You must set the concentration_of_source for every object on the Sources of Fluid Solids" + LayerIndex + " layer."
									End if
								Else
									If: (temperature_of_source=$N/A)
										Set Variable: OK:= 0
										Alert: "Error: You must set the temperature_of_source for every object on the Sources of Fluid Solids" + LayerIndex + " layer."
									End if
								End if
							End if
						End if
					End loop
				End if
			End loop
		End if
		Set Variable: BoundaryLayerCount:= Sutra_GetBoundaryCount(2,1)
		If: BoundaryLayerCount>0
			Loop for: Variable LayerIndex from: 1 to: BoundaryLayerCount step: 1
				Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
				If: ok&ContinueSimulation
					Loop for: Objects in layer: Sources of Fluid Points[LayerIndex]
						If: ok&ContinueSimulation
							Set Variable: ContourIndex:= ContourIndex + 1
							# Evaluate expression: Sutra_IsOverridenFluidSourceBottom(ContourIndex, IsOverriden(Sources of Fluid Points[LayerIndex].bottom elevation))
							If: @rbSoluteVarDens@|@rbSoluteConstDens@
								Evaluate expression: Sutra_IsOverridenFluidSourceConc(ContourIndex, IsOverriden(Sources of Fluid Points[LayerIndex].concentration_of_source))
							Else
								Evaluate expression: Sutra_IsOverridenFluidSourceConc(ContourIndex, IsOverriden(Sources of Fluid Points[LayerIndex].temperature_of_source))
							End if
							# Evaluate expression: Sutra_IsOverridenFluidSourceSpecific(ContourIndex, IsOverriden(Sources of Fluid Points[LayerIndex].specific_source))
							# Evaluate expression: Sutra_IsOverridenFluidSourceTop(ContourIndex, IsOverriden(Sources of Fluid Points[LayerIndex].top elevation))
							Evaluate expression: Sutra_IsOverridenFluidSourceTotal(ContourIndex, IsOverriden(Sources of Fluid Points[LayerIndex].total_source))
							If: Alert<2
								If: (total_source=$N/A)
									Set Variable: OK:= 0
									Alert: "Error: You must set the total source for every object on the Sources of Fluid Points" + LayerIndex + " layer."
								End if
								If: @rbSoluteVarDens@|@rbSoluteConstDens@
									If: (concentration_of_source=$N/A)
										Set Variable: OK:= 0
										Alert: "Error: You must set the concentration_of_source for every object on the Sources of Fluid Points" + LayerIndex + " layer."
									End if
								Else
									If: (temperature_of_source=$N/A)
										Set Variable: OK:= 0
										Alert: "Error: You must set the temperature_of_source for every object on the Sources of Fluid Points" + LayerIndex + " layer."
									End if
								End if
							End if
						End if
					End loop
				End if
			End loop
		End if
		Set Variable: BoundaryLayerCount:= Sutra_GetBoundaryCount(3,1)
		If: BoundaryLayerCount>0
			Loop for: Variable LayerIndex from: 1 to: BoundaryLayerCount step: 1
				Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
				If: ok&ContinueSimulation
					Loop for: Objects in layer: Sources of Fluid Lines[LayerIndex]
						If: ok&ContinueSimulation
							Set Variable: ContourIndex:= ContourIndex + 1
							# Evaluate expression: Sutra_IsOverridenFluidSourceBottom(ContourIndex, IsOverriden(Sources of Fluid Lines[LayerIndex].bottom elevation))
							If: @rbSoluteVarDens@|@rbSoluteConstDens@
								Evaluate expression: Sutra_IsOverridenFluidSourceConc(ContourIndex, IsOverriden(Sources of Fluid Lines[LayerIndex].concentration_of_source))
							Else
								Evaluate expression: Sutra_IsOverridenFluidSourceConc(ContourIndex, IsOverriden(Sources of Fluid Lines[LayerIndex].temperature_of_source))
							End if
							Evaluate expression: Sutra_IsOverridenFluidSourceSpecific(ContourIndex, IsOverriden(Sources of Fluid Lines[LayerIndex].specific_source))
							# Evaluate expression: Sutra_IsOverridenFluidSourceTop(ContourIndex, IsOverriden(Sources of Fluid Lines[LayerIndex].top elevation))
							Evaluate expression: Sutra_IsOverridenFluidSourceTotal(ContourIndex, IsOverriden(Sources of Fluid Lines[LayerIndex].total_source))
							If: Alert<2
								If: (TOTAL OR SPECIFIC SOURCE=0)
									Set Variable: OK:= 0
									Alert: "Error: You must set the total or specific source for every object on the Sources of Fluid Lines" + LayerIndex + " layer."
								End if
								If: @rbSoluteVarDens@|@rbSoluteConstDens@
									If: (concentration_of_source=$N/A)
										Set Variable: OK:= 0
										Alert: "Error: You must set the concentration_of_source for every object on the Sources of Fluid Lines" + LayerIndex + " layer."
									End if
								Else
									If: (temperature_of_source=$N/A)
										Set Variable: OK:= 0
										Alert: "Error: You must set the temperature_of_source for every object on the Sources of Fluid Lines" + LayerIndex + " layer."
									End if
								End if
							End if
						End if
					End loop
				End if
			End loop
		End if
		Set Variable: BoundaryLayerCount:= Sutra_GetBoundaryCount(4,1)
		If: BoundaryLayerCount>0
			Loop for: Variable LayerIndex from: 1 to: BoundaryLayerCount step: 1
				Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
				If: ok&ContinueSimulation
					Loop for: Objects in layer: Sources of Fluid Sheets Vertical[LayerIndex]
						If: ok&ContinueSimulation
							Set Variable: ContourIndex:= ContourIndex + 1
							# Evaluate expression: Sutra_IsOverridenFluidSourceBottom(ContourIndex, IsOverriden(Sources of Fluid Sheets Vertical[LayerIndex].bottom elevation))
							If: @rbSoluteVarDens@|@rbSoluteConstDens@
								Evaluate expression: Sutra_IsOverridenFluidSourceConc(ContourIndex, IsOverriden(Sources of Fluid Sheets Vertical[LayerIndex].concentration_of_source))
							Else
								Evaluate expression: Sutra_IsOverridenFluidSourceConc(ContourIndex, IsOverriden(Sources of Fluid Sheets Vertical[LayerIndex].temperature_of_source))
							End if
							Evaluate expression: Sutra_IsOverridenFluidSourceSpecific(ContourIndex, IsOverriden(Sources of Fluid Sheets Vertical[LayerIndex].specific_source))
							# Evaluate expression: Sutra_IsOverridenFluidSourceTop(ContourIndex, IsOverriden(Sources of Fluid Sheets Vertical[LayerIndex].top elevation))
							Evaluate expression: Sutra_IsOverridenFluidSourceTotal(ContourIndex, IsOverriden(Sources of Fluid Sheets Vertical[LayerIndex].total_source))
							If: Alert<2
								If: (TOTAL OR SPECIFIC SOURCE=0)
									Set Variable: OK:= 0
									Alert: "Error: You must set the total or specific source for every object on the Sources of Fluid Sheets Vertical" + LayerIndex + " layer."
								End if
								If: @rbSoluteVarDens@|@rbSoluteConstDens@
									If: (concentration_of_source=$N/A)
										Set Variable: OK:= 0
										Alert: "Error: You must set the concentration_of_source for every object on the Sources of Fluid Sheets Vertical" + LayerIndex + " layer."
									End if
								Else
									If: (temperature_of_source=$N/A)
										Set Variable: OK:= 0
										Alert: "Error: You must set the temperature_of_source for every object on the Sources of Fluid Sheets Vertical" + LayerIndex + " layer."
									End if
								End if
							End if
						End if
					End loop
				End if
			End loop
		End if
		Set Variable: BoundaryLayerCount:= Sutra_GetBoundaryCount(5,1)
		If: BoundaryLayerCount>0
			Loop for: Variable LayerIndex from: 1 to: BoundaryLayerCount step: 1
				Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
				If: ok&ContinueSimulation
					Loop for: Objects in layer: Sources of Fluid Sheets Slanted[LayerIndex]
						If: ok&ContinueSimulation
							Set Variable: ContourIndex:= ContourIndex + 1
							# Evaluate expression: Sutra_IsOverridenFluidSourceBottom(ContourIndex, IsOverriden(Sources of Fluid Sheets Slanted[LayerIndex].bottom elevation))
							If: @rbSoluteVarDens@|@rbSoluteConstDens@
								Evaluate expression: Sutra_IsOverridenFluidSourceConc(ContourIndex, IsOverriden(Sources of Fluid Sheets Slanted[LayerIndex].concentration_of_source))
							Else
								Evaluate expression: Sutra_IsOverridenFluidSourceConc(ContourIndex, IsOverriden(Sources of Fluid Sheets Slanted[LayerIndex].temperature_of_source))
							End if
							Evaluate expression: Sutra_IsOverridenFluidSourceSpecific(ContourIndex, IsOverriden(Sources of Fluid Sheets Slanted[LayerIndex].specific_source))
							# Evaluate expression: Sutra_IsOverridenFluidSourceTop(ContourIndex, IsOverriden(Sources of Fluid Sheets Slanted[LayerIndex].top elevation))
							Evaluate expression: Sutra_IsOverridenFluidSourceTotal(ContourIndex, IsOverriden(Sources of Fluid Sheets Slanted[LayerIndex].total_source))
							If: Alert<2
								If: (TOTAL OR SPECIFIC SOURCE=0)
									Set Variable: OK:= 0
									Alert: "Error: You must set the total or specific source for every object on the Sources of Fluid Sheets Slanted" + LayerIndex + " layer."
								End if
								If: @rbSoluteVarDens@|@rbSoluteConstDens@
									If: (concentration_of_source=$N/A)
										Set Variable: OK:= 0
										Alert: "Error: You must set the concentration_of_source for every object on the Sources of Fluid Sheets Slanted" + LayerIndex + " layer."
									End if
								Else
									If: (temperature_of_source=$N/A)
										Set Variable: OK:= 0
										Alert: "Error: You must set the temperature_of_source for every object on the Sources of Fluid Sheets Slanted" + LayerIndex + " layer."
									End if
								End if
							End if
						End if
					End loop
				End if
			End loop
		End if
	End if
	# If: ok&ContinueSimulation
	# 
	# 
	# Set Variable: ContourIndex:= 0
	# Loop for: Variable LayerIndex from: 1 to: LayerCount step: 1
	# Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
	# If: ok&ContinueSimulation&@cbExport17@
	# Loop for: Objects in layer: Sources of Fluid surfaces[LayerIndex]
	# Set Variable: ContourIndex:= ContourIndex + 1
	# Evaluate expression: Sutra_IsOverridenSurfaceFluidSourceBottom(ContourIndex, IsOverriden(Sources of Fluid surfaces[LayerIndex].bottom elevation))
	# Evaluate expression: Sutra_IsOverridenSurfaceFluidSourceConc(ContourIndex, IsOverriden(Sources of Fluid surfaces[LayerIndex].concentration_of_source))
	# Evaluate expression: Sutra_IsOverridenSurfaceFluidSourceSpecific(ContourIndex, IsOverriden(Sources of Fluid surfaces[LayerIndex].specific_source))
	# Evaluate expression: Sutra_IsOverridenSurfaceFluidSourceTop(ContourIndex, IsOverriden(Sources of Fluid surfaces[LayerIndex].top elevation))
	# Evaluate expression: Sutra_IsOverridenSurfaceFluidSourceTotal(ContourIndex, IsOverriden(Sources of Fluid surfaces[LayerIndex].total_source))
	# End loop
	# End if
	# End loop
	# End if
	If: ok&ContinueSimulation&@cbExport18@
		If: TransportType2=0
			Set Variable: ContourIndex:= 0
			Set Variable: BoundaryLayerCount:= Sutra_GetBoundaryCount(1,2)
			If: BoundaryLayerCount>0
				Loop for: Variable LayerIndex from: 1 to: BoundaryLayerCount step: 1
					Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
					If: ok&ContinueSimulation
						Loop for: Objects in layer: Sources of Energy or Solute Solids[LayerIndex]
							If: ok&ContinueSimulation
								Set Variable: ContourIndex:= ContourIndex + 1
								# Evaluate expression: Sutra_IsOverridenEnergySoluteBottom(ContourIndex, IsOverriden(Sources of Energy or Solute Solids[LayerIndex].bottom elevation))
								Evaluate expression: Sutra_IsOverridenEnergySoluteSpecificSource(ContourIndex, IsOverriden(Sources of Energy or Solute Solids[LayerIndex].specific_source))
								# Evaluate expression: Sutra_IsOverridenEnergySoluteTop(ContourIndex, IsOverriden(Sources of Energy or Solute Solids[LayerIndex].top elevation))
								Evaluate expression: Sutra_IsOverridenEnergySoluteTotalSource(ContourIndex, IsOverriden(Sources of Energy or Solute Solids[LayerIndex].total_source))
								If: Alert<2
									If: (TOTAL OR SPECIFIC SOURCE=0)
										Set Variable: OK:= 0
										Alert: "Error: You must set the total or specific source for every object on the Sources of Energy or Solute Solids" + LayerIndex + " layer."
									End if
								End if
							End if
						End loop
					End if
				End loop
			End if
			Set Variable: BoundaryLayerCount:= Sutra_GetBoundaryCount(2,2)
			If: BoundaryLayerCount>0
				Loop for: Variable LayerIndex from: 1 to: BoundaryLayerCount step: 1
					Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
					If: ok&ContinueSimulation
						Loop for: Objects in layer: Sources of Energy or Solute Points[LayerIndex]
							If: ok&ContinueSimulation
								Set Variable: ContourIndex:= ContourIndex + 1
								# Evaluate expression: Sutra_IsOverridenEnergySoluteBottom(ContourIndex, IsOverriden(Sources of Energy or Solute Points[LayerIndex].bottom elevation))
								Evaluate expression: Sutra_IsOverridenEnergySoluteSpecificSource(ContourIndex, IsOverriden(Sources of Energy or Solute Points[LayerIndex].specific_source))
								# Evaluate expression: Sutra_IsOverridenEnergySoluteTop(ContourIndex, IsOverriden(Sources of Energy or Solute Points[LayerIndex].top elevation))
								Evaluate expression: Sutra_IsOverridenEnergySoluteTotalSource(ContourIndex, IsOverriden(Sources of Energy or Solute Points[LayerIndex].total_source))
								If: Alert<2
									If: (total_source=$N/A)
										Set Variable: OK:= 0
										Alert: "Error: You must set the total source for every object on the Sources of Energy or Solute Points" + LayerIndex + " layer."
									End if
								End if
							End if
						End loop
					End if
				End loop
			End if
			Set Variable: BoundaryLayerCount:= Sutra_GetBoundaryCount(3,2)
			If: BoundaryLayerCount>0
				Loop for: Variable LayerIndex from: 1 to: BoundaryLayerCount step: 1
					Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
					If: ok&ContinueSimulation
						Loop for: Objects in layer: Sources of Energy or Solute Lines[LayerIndex]
							If: ok&ContinueSimulation
								Set Variable: ContourIndex:= ContourIndex + 1
								# Evaluate expression: Sutra_IsOverridenEnergySoluteBottom(ContourIndex, IsOverriden(Sources of Energy or Solute Lines[LayerIndex].bottom elevation))
								Evaluate expression: Sutra_IsOverridenEnergySoluteSpecificSource(ContourIndex, IsOverriden(Sources of Energy or Solute Lines[LayerIndex].specific_source))
								# Evaluate expression: Sutra_IsOverridenEnergySoluteTop(ContourIndex, IsOverriden(Sources of Energy or Solute Lines[LayerIndex].top elevation))
								Evaluate expression: Sutra_IsOverridenEnergySoluteTotalSource(ContourIndex, IsOverriden(Sources of Energy or Solute Lines[LayerIndex].total_source))
								If: Alert<2
									If: (TOTAL OR SPECIFIC SOURCE=0)
										Set Variable: OK:= 0
										Alert: "Error: You must set the total or specific source for every object on the Sources of Energy or Solute Lines" + LayerIndex + " layer."
									End if
								End if
							End if
						End loop
					End if
				End loop
			End if
			Set Variable: BoundaryLayerCount:= Sutra_GetBoundaryCount(4,2)
			If: BoundaryLayerCount>0
				Loop for: Variable LayerIndex from: 1 to: BoundaryLayerCount step: 1
					Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
					If: ok&ContinueSimulation
						Loop for: Objects in layer: Sources of Energy or Solute Sheets Vertical[LayerIndex]
							If: ok&ContinueSimulation
								Set Variable: ContourIndex:= ContourIndex + 1
								# Evaluate expression: Sutra_IsOverridenEnergySoluteBottom(ContourIndex, IsOverriden(Sources of Energy or Solute Sheets Vertical[LayerIndex].bottom elevation))
								Evaluate expression: Sutra_IsOverridenEnergySoluteSpecificSource(ContourIndex, IsOverriden(Sources of Energy or Solute Sheets Vertical[LayerIndex].specific_source))
								# Evaluate expression: Sutra_IsOverridenEnergySoluteTop(ContourIndex, IsOverriden(Sources of Energy or Solute Sheets Vertical[LayerIndex].top elevation))
								Evaluate expression: Sutra_IsOverridenEnergySoluteTotalSource(ContourIndex, IsOverriden(Sources of Energy or Solute Sheets Vertical[LayerIndex].total_source))
								If: Alert<2
									If: (TOTAL OR SPECIFIC SOURCE=0)
										Set Variable: OK:= 0
										Alert: "Error: You must set the total or specific source for every object on the Sources of Energy or Solute Sheets Vertical" + LayerIndex + " layer."
									End if
								End if
							End if
						End loop
					End if
				End loop
			End if
			Set Variable: BoundaryLayerCount:= Sutra_GetBoundaryCount(5,2)
			If: BoundaryLayerCount>0
				Loop for: Variable LayerIndex from: 1 to: BoundaryLayerCount step: 1
					Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
					If: ok&ContinueSimulation
						Loop for: Objects in layer: Sources of Energy or Solute Sheets Slanted[LayerIndex]
							If: ok&ContinueSimulation
								Set Variable: ContourIndex:= ContourIndex + 1
								# Evaluate expression: Sutra_IsOverridenEnergySoluteBottom(ContourIndex, IsOverriden(Sources of Energy or Solute Sheets Slanted[LayerIndex].bottom elevation))
								Evaluate expression: Sutra_IsOverridenEnergySoluteSpecificSource(ContourIndex, IsOverriden(Sources of Energy or Solute Sheets Slanted[LayerIndex].specific_source))
								# Evaluate expression: Sutra_IsOverridenEnergySoluteTop(ContourIndex, IsOverriden(Sources of Energy or Solute Sheets Slanted[LayerIndex].top elevation))
								Evaluate expression: Sutra_IsOverridenEnergySoluteTotalSource(ContourIndex, IsOverriden(Sources of Energy or Solute Sheets Slanted[LayerIndex].total_source))
								If: Alert<2
									If: (TOTAL OR SPECIFIC SOURCE=0)
										Set Variable: OK:= 0
										Alert: "Error: You must set the total or specific source for every object on the Sources of Energy or Solute Sheets Slanted" + LayerIndex + " layer."
									End if
								End if
							End if
						End loop
					End if
				End loop
			End if
		Else
			If: TransportType2=1
				Set Variable: ContourIndex:= 0
				Set Variable: BoundaryLayerCount:= Sutra_GetBoundaryCount(1,2)
				If: BoundaryLayerCount>0
					Loop for: Variable LayerIndex from: 1 to: BoundaryLayerCount step: 1
						Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
						If: ok&ContinueSimulation
							Loop for: Objects in layer: Sources of Energy Solids[LayerIndex]
								If: ok&ContinueSimulation
									Set Variable: ContourIndex:= ContourIndex + 1
									# Evaluate expression: Sutra_IsOverridenEnergySoluteBottom(ContourIndex, IsOverriden(Sources of Energy Solids[LayerIndex].bottom elevation))
									Evaluate expression: Sutra_IsOverridenEnergySoluteSpecificSource(ContourIndex, IsOverriden(Sources of Energy Solids[LayerIndex].specific_source))
									# Evaluate expression: Sutra_IsOverridenEnergySoluteTop(ContourIndex, IsOverriden(Sources of Energy Solids[LayerIndex].top elevation))
									Evaluate expression: Sutra_IsOverridenEnergySoluteTotalSource(ContourIndex, IsOverriden(Sources of Energy Solids[LayerIndex].total_source))
									If: Alert<2
										If: (TOTAL OR SPECIFIC SOURCE=0)
											Set Variable: OK:= 0
											Alert: "Error: You must set the total or specific source for every object on the Sources of Energy Solids" + LayerIndex + " layer."
										End if
									End if
								End if
							End loop
						End if
					End loop
				End if
				Set Variable: BoundaryLayerCount:= Sutra_GetBoundaryCount(2,2)
				If: BoundaryLayerCount>0
					Loop for: Variable LayerIndex from: 1 to: BoundaryLayerCount step: 1
						Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
						If: ok&ContinueSimulation
							Loop for: Objects in layer: Sources of Energy Points[LayerIndex]
								If: ok&ContinueSimulation
									Set Variable: ContourIndex:= ContourIndex + 1
									# Evaluate expression: Sutra_IsOverridenEnergySoluteBottom(ContourIndex, IsOverriden(Sources of Energy Points[LayerIndex].bottom elevation))
									Evaluate expression: Sutra_IsOverridenEnergySoluteSpecificSource(ContourIndex, IsOverriden(Sources of Energy Points[LayerIndex].specific_source))
									# Evaluate expression: Sutra_IsOverridenEnergySoluteTop(ContourIndex, IsOverriden(Sources of Energy Points[LayerIndex].top elevation))
									Evaluate expression: Sutra_IsOverridenEnergySoluteTotalSource(ContourIndex, IsOverriden(Sources of Energy Points[LayerIndex].total_source))
									If: Alert<2
										If: (total_source=$N/A)
											Set Variable: OK:= 0
											Alert: "Error: You must set the total source for every object on the Sources of Energy Points" + LayerIndex + " layer."
										End if
									End if
								End if
							End loop
						End if
					End loop
				End if
				Set Variable: BoundaryLayerCount:= Sutra_GetBoundaryCount(3,2)
				If: BoundaryLayerCount>0
					Loop for: Variable LayerIndex from: 1 to: BoundaryLayerCount step: 1
						Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
						If: ok&ContinueSimulation
							Loop for: Objects in layer: Sources of Energy Lines[LayerIndex]
								If: ok&ContinueSimulation
									Set Variable: ContourIndex:= ContourIndex + 1
									# Evaluate expression: Sutra_IsOverridenEnergySoluteBottom(ContourIndex, IsOverriden(Sources of Energy Lines[LayerIndex].bottom elevation))
									Evaluate expression: Sutra_IsOverridenEnergySoluteSpecificSource(ContourIndex, IsOverriden(Sources of Energy Lines[LayerIndex].specific_source))
									# Evaluate expression: Sutra_IsOverridenEnergySoluteTop(ContourIndex, IsOverriden(Sources of Energy Lines[LayerIndex].top elevation))
									Evaluate expression: Sutra_IsOverridenEnergySoluteTotalSource(ContourIndex, IsOverriden(Sources of Energy Lines[LayerIndex].total_source))
									If: Alert<2
										If: (TOTAL OR SPECIFIC SOURCE=0)
											Set Variable: OK:= 0
											Alert: "Error: You must set the total or specific source for every object on the Sources of Energy Lines" + LayerIndex + " layer."
										End if
									End if
								End if
							End loop
						End if
					End loop
				End if
				Set Variable: BoundaryLayerCount:= Sutra_GetBoundaryCount(4,2)
				If: BoundaryLayerCount>0
					Loop for: Variable LayerIndex from: 1 to: BoundaryLayerCount step: 1
						Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
						If: ok&ContinueSimulation
							Loop for: Objects in layer: Sources of Energy Sheets Vertical[LayerIndex]
								If: ok&ContinueSimulation
									Set Variable: ContourIndex:= ContourIndex + 1
									# Evaluate expression: Sutra_IsOverridenEnergySoluteBottom(ContourIndex, IsOverriden(Sources of Energy Sheets Vertical[LayerIndex].bottom elevation))
									Evaluate expression: Sutra_IsOverridenEnergySoluteSpecificSource(ContourIndex, IsOverriden(Sources of Energy Sheets Vertical[LayerIndex].specific_source))
									# Evaluate expression: Sutra_IsOverridenEnergySoluteTop(ContourIndex, IsOverriden(Sources of Energy Sheets Vertical[LayerIndex].top elevation))
									Evaluate expression: Sutra_IsOverridenEnergySoluteTotalSource(ContourIndex, IsOverriden(Sources of Energy Sheets Vertical[LayerIndex].total_source))
									If: Alert<2
										If: (TOTAL OR SPECIFIC SOURCE=0)
											Set Variable: OK:= 0
											Alert: "Error: You must set the total or specific source for every object on the Sources of Energy Sheets Vertical" + LayerIndex + " layer."
										End if
									End if
								End if
							End loop
						End if
					End loop
				End if
				Set Variable: BoundaryLayerCount:= Sutra_GetBoundaryCount(5,2)
				If: BoundaryLayerCount>0
					Loop for: Variable LayerIndex from: 1 to: BoundaryLayerCount step: 1
						Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
						If: ok&ContinueSimulation
							Loop for: Objects in layer: Sources of Energy Sheets Slanted[LayerIndex]
								If: ok&ContinueSimulation
									Set Variable: ContourIndex:= ContourIndex + 1
									# Evaluate expression: Sutra_IsOverridenEnergySoluteBottom(ContourIndex, IsOverriden(Sources of Energy Sheets Slanted[LayerIndex].bottom elevation))
									Evaluate expression: Sutra_IsOverridenEnergySoluteSpecificSource(ContourIndex, IsOverriden(Sources of Energy Sheets Slanted[LayerIndex].specific_source))
									# Evaluate expression: Sutra_IsOverridenEnergySoluteTop(ContourIndex, IsOverriden(Sources of Energy Sheets Slanted[LayerIndex].top elevation))
									Evaluate expression: Sutra_IsOverridenEnergySoluteTotalSource(ContourIndex, IsOverriden(Sources of Energy Sheets Slanted[LayerIndex].total_source))
									If: Alert<2
										If: (TOTAL OR SPECIFIC SOURCE=0)
											Set Variable: OK:= 0
											Alert: "Error: You must set the total or specific source for every object on the Sources of Energy Sheets Slanted" + LayerIndex + " layer."
										End if
									End if
								End if
							End loop
						End if
					End loop
				End if
			Else
				If: TransportType2=2
					Set Variable: ContourIndex:= 0
					Set Variable: BoundaryLayerCount:= Sutra_GetBoundaryCount(1,2)
					If: BoundaryLayerCount>0
						Loop for: Variable LayerIndex from: 1 to: BoundaryLayerCount step: 1
							Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
							If: ok&ContinueSimulation
								Loop for: Objects in layer: Sources of Solute Solids[LayerIndex]
									If: ok&ContinueSimulation
										Set Variable: ContourIndex:= ContourIndex + 1
										# Evaluate expression: Sutra_IsOverridenEnergySoluteBottom(ContourIndex, IsOverriden(Sources of Solute Solids[LayerIndex].bottom elevation))
										Evaluate expression: Sutra_IsOverridenEnergySoluteSpecificSource(ContourIndex, IsOverriden(Sources of Solute Solids[LayerIndex].specific_source))
										# Evaluate expression: Sutra_IsOverridenEnergySoluteTop(ContourIndex, IsOverriden(Sources of Solute Solids[LayerIndex].top elevation))
										Evaluate expression: Sutra_IsOverridenEnergySoluteTotalSource(ContourIndex, IsOverriden(Sources of Solute Solids[LayerIndex].total_source))
										If: Alert<2
											If: (TOTAL OR SPECIFIC SOURCE=0)
												Set Variable: OK:= 0
												Alert: "Error: You must set the total or specific source for every object on the Sources of Solute Solids" + LayerIndex + " layer."
											End if
										End if
									End if
								End loop
							End if
						End loop
					End if
					Set Variable: BoundaryLayerCount:= Sutra_GetBoundaryCount(2,2)
					If: BoundaryLayerCount>0
						Loop for: Variable LayerIndex from: 1 to: BoundaryLayerCount step: 1
							Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
							If: ok&ContinueSimulation
								Loop for: Objects in layer: Sources of Solute Points[LayerIndex]
									If: ok&ContinueSimulation
										Set Variable: ContourIndex:= ContourIndex + 1
										# Evaluate expression: Sutra_IsOverridenEnergySoluteBottom(ContourIndex, IsOverriden(Sources of Solute Points[LayerIndex].bottom elevation))
										# Evaluate expression: Sutra_IsOverridenEnergySoluteSpecificSource(ContourIndex, IsOverriden(Sources of Solute Points[LayerIndex].specific_source))
										# Evaluate expression: Sutra_IsOverridenEnergySoluteTop(ContourIndex, IsOverriden(Sources of Solute Points[LayerIndex].top elevation))
										Evaluate expression: Sutra_IsOverridenEnergySoluteTotalSource(ContourIndex, IsOverriden(Sources of Solute Points[LayerIndex].total_source))
										If: Alert<2
											If: (total_source=$N/A)
												Set Variable: OK:= 0
												Alert: "Error: You must set the total source for every object on the Sources of Solute Points" + LayerIndex + " layer."
											End if
										End if
									End if
								End loop
							End if
						End loop
					End if
					Set Variable: BoundaryLayerCount:= Sutra_GetBoundaryCount(3,2)
					If: BoundaryLayerCount>0
						Loop for: Variable LayerIndex from: 1 to: BoundaryLayerCount step: 1
							Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
							If: ok&ContinueSimulation
								Loop for: Objects in layer: Sources of Solute Lines[LayerIndex]
									If: ok&ContinueSimulation
										Set Variable: ContourIndex:= ContourIndex + 1
										# Evaluate expression: Sutra_IsOverridenEnergySoluteBottom(ContourIndex, IsOverriden(Sources of Solute Lines[LayerIndex].bottom elevation))
										Evaluate expression: Sutra_IsOverridenEnergySoluteSpecificSource(ContourIndex, IsOverriden(Sources of Solute Lines[LayerIndex].specific_source))
										# Evaluate expression: Sutra_IsOverridenEnergySoluteTop(ContourIndex, IsOverriden(Sources of Solute Lines[LayerIndex].top elevation))
										Evaluate expression: Sutra_IsOverridenEnergySoluteTotalSource(ContourIndex, IsOverriden(Sources of Solute Lines[LayerIndex].total_source))
										If: Alert<2
											If: (TOTAL OR SPECIFIC SOURCE=0)
												Set Variable: OK:= 0
												Alert: "Error: You must set the total or specific source for every object on the Sources of Solute Lines" + LayerIndex + " layer."
											End if
										End if
									End if
								End loop
							End if
						End loop
					End if
					Set Variable: BoundaryLayerCount:= Sutra_GetBoundaryCount(4,2)
					If: BoundaryLayerCount>0
						Loop for: Variable LayerIndex from: 1 to: BoundaryLayerCount step: 1
							Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
							If: ok&ContinueSimulation
								Loop for: Objects in layer: Sources of Solute Sheets Vertical[LayerIndex]
									If: ok&ContinueSimulation
										Set Variable: ContourIndex:= ContourIndex + 1
										# Evaluate expression: Sutra_IsOverridenEnergySoluteBottom(ContourIndex, IsOverriden(Sources of Solute Sheets Vertical[LayerIndex].bottom elevation))
										Evaluate expression: Sutra_IsOverridenEnergySoluteSpecificSource(ContourIndex, IsOverriden(Sources of Solute Sheets Vertical[LayerIndex].specific_source))
										# Evaluate expression: Sutra_IsOverridenEnergySoluteTop(ContourIndex, IsOverriden(Sources of Solute Sheets Vertical[LayerIndex].top elevation))
										Evaluate expression: Sutra_IsOverridenEnergySoluteTotalSource(ContourIndex, IsOverriden(Sources of Solute Sheets Vertical[LayerIndex].total_source))
										If: Alert<2
											If: (TOTAL OR SPECIFIC SOURCE=0)
												Set Variable: OK:= 0
												Alert: "Error: You must set the total or specific source for every object on the Sources of Solute Sheets Vertical" + LayerIndex + " layer."
											End if
										End if
									End if
								End loop
							End if
						End loop
					End if
					Set Variable: BoundaryLayerCount:= Sutra_GetBoundaryCount(5,2)
					If: BoundaryLayerCount>0
						Loop for: Variable LayerIndex from: 1 to: BoundaryLayerCount step: 1
							Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
							If: ok&ContinueSimulation
								Loop for: Objects in layer: Sources of Solute Sheets Slanted[LayerIndex]
									If: ok&ContinueSimulation
										Set Variable: ContourIndex:= ContourIndex + 1
										# Evaluate expression: Sutra_IsOverridenEnergySoluteBottom(ContourIndex, IsOverriden(Sources of Solute Sheets Slanted[LayerIndex].bottom elevation))
										Evaluate expression: Sutra_IsOverridenEnergySoluteSpecificSource(ContourIndex, IsOverriden(Sources of Solute Sheets Slanted[LayerIndex].specific_source))
										# Evaluate expression: Sutra_IsOverridenEnergySoluteTop(ContourIndex, IsOverriden(Sources of Solute Sheets Slanted[LayerIndex].top elevation))
										Evaluate expression: Sutra_IsOverridenEnergySoluteTotalSource(ContourIndex, IsOverriden(Sources of Solute Sheets Slanted[LayerIndex].total_source))
										If: Alert<2
											If: (TOTAL OR SPECIFIC SOURCE=0)
												Set Variable: OK:= 0
												Alert: "Error: You must set the total or specific source for every object on the Sources of Solute Sheets Slanted" + LayerIndex + " layer."
											End if
										End if
									End if
								End loop
							End if
						End loop
					End if
				End if
			End if
		End if
		# 
	End if
	# If: ok&ContinueSimulation
	# 
	# If: TransportType=1
	# Set Variable: ContourIndex:= 0
	# Loop for: Variable LayerIndex from: 1 to: LayerCount step: 1
	# Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
	# If: ok&ContinueSimulation&@cbExport18@
	# Loop for: Objects in layer: Sources of Solute surfaces[LayerIndex]
	# Set Variable: ContourIndex:= ContourIndex + 1
	# Evaluate expression: Sutra_IsOverridenSurfaceEnergySoluteBottom(ContourIndex, IsOverriden(Sources of Solute surfaces[LayerIndex].bottom elevation))
	# Evaluate expression: Sutra_IsOverridenSurfaceEnergySoluteSpecificSource(ContourIndex, IsOverriden(Sources of Solute surfaces[LayerIndex].specific_source))
	# Evaluate expression: Sutra_IsOverridenSurfaceEnergySoluteTop(ContourIndex, IsOverriden(Sources of Solute surfaces[LayerIndex].top elevation))
	# Evaluate expression: Sutra_IsOverridenSurfaceEnergySoluteTotal(ContourIndex, IsOverriden(Sources of Solute surfaces[LayerIndex].total_source))
	# End loop
	# End if
	# End loop
	# Else
	# Set Variable: ContourIndex:= 0
	# Loop for: Variable LayerIndex from: 1 to: LayerCount step: 1
	# Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
	# If: ok&ContinueSimulation&@cbExport18@
	# Loop for: Objects in layer: Sources of Energy surfaces[LayerIndex]
	# Set Variable: ContourIndex:= ContourIndex + 1
	# Evaluate expression: Sutra_IsOverridenSurfaceEnergySoluteBottom(ContourIndex, IsOverriden(Sources of Energy surfaces[LayerIndex].bottom elevation))
	# Evaluate expression: Sutra_IsOverridenSurfaceEnergySoluteSpecificSource(ContourIndex, IsOverriden(Sources of Energy surfaces[LayerIndex].specific_source))
	# Evaluate expression: Sutra_IsOverridenSurfaceEnergySoluteTop(ContourIndex, IsOverriden(Sources of Energy surfaces[LayerIndex].top elevation))
	# Evaluate expression: Sutra_IsOverridenSurfaceEnergySoluteTotal(ContourIndex, IsOverriden(Sources of Energy surfaces[LayerIndex].total_source))
	# End loop
	# End if
	# End loop
	# End if
	# 
	# End if
	If: ok&ContinueSimulation&@cbExport19@
		# 
		If: StateVariableType=1
			Set Variable: ContourIndex:= 0
			Set Variable: BoundaryLayerCount:= Sutra_GetBoundaryCount(1,3)
			If: BoundaryLayerCount>0
				Loop for: Variable LayerIndex from: 1 to: BoundaryLayerCount step: 1
					Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
					If: ok&ContinueSimulation
						Loop for: Objects in layer: Specified Hydraulic Head Solids[LayerIndex]
							If: ok&ContinueSimulation
								Set Variable: ContourIndex:= ContourIndex + 1
								Evaluate expression: Sutra_IsOverridenSpecPres(ContourIndex, IsOverriden(Specified Hydraulic Head Solids[LayerIndex].specified_hydraulic_head))
								Evaluate expression: Sutra_IsOverridenSpecPresConc(ContourIndex, IsOverriden(Specified Hydraulic Head Solids[LayerIndex].concentration))
								# Evaluate expression: Sutra_IsOverridenSpecPresTop(ContourIndex, IsOverriden(Specified Hydraulic Head Solids[LayerIndex].top elevation))
								# Evaluate expression: Sutra_IsOverridenSpecPresBottom(ContourIndex, IsOverriden(Specified Hydraulic Head Solids[LayerIndex].bottom elevation))
								If: Alert<2
									If: (specified_hydraulic_head=$N/A)
										Set Variable: OK:= 0
										Alert: "Error: You must set the specified_hydraulic_head for every object on the Specified Hydraulic Head Solids" + LayerIndex + " layer."
									End if
									If: (concentration=$N/A)
										Set Variable: OK:= 0
										Alert: "Error: You must set the concentration for every object on the Specified Hydraulic Head Solids" + LayerIndex + " layer."
									End if
								End if
							End if
						End loop
					End if
				End loop
			End if
			Set Variable: BoundaryLayerCount:= Sutra_GetBoundaryCount(2,3)
			If: BoundaryLayerCount>0
				Loop for: Variable LayerIndex from: 1 to: BoundaryLayerCount step: 1
					Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
					If: ok&ContinueSimulation
						Loop for: Objects in layer: Specified Hydraulic Head Points[LayerIndex]
							If: ok&ContinueSimulation
								Set Variable: ContourIndex:= ContourIndex + 1
								Evaluate expression: Sutra_IsOverridenSpecPres(ContourIndex, IsOverriden(Specified Hydraulic Head Points[LayerIndex].specified_hydraulic_head))
								Evaluate expression: Sutra_IsOverridenSpecPresConc(ContourIndex, IsOverriden(Specified Hydraulic Head Points[LayerIndex].concentration))
								# Evaluate expression: Sutra_IsOverridenSpecPresTop(ContourIndex, IsOverriden(Specified Hydraulic Head Points[LayerIndex].top elevation))
								# Evaluate expression: Sutra_IsOverridenSpecPresBottom(ContourIndex, IsOverriden(Specified Hydraulic Head Points[LayerIndex].bottom elevation))
								If: Alert<2
									If: (specified_hydraulic_head=$N/A)
										Set Variable: OK:= 0
										Alert: "Error: You must set the specified_hydraulic_head for every object on the Specified Hydraulic Head Points" + LayerIndex + " layer."
									End if
									If: (concentration=$N/A)
										Set Variable: OK:= 0
										Alert: "Error: You must set the concentration for every object on the Specified Hydraulic Head Points" + LayerIndex + " layer."
									End if
								End if
							End if
						End loop
					End if
				End loop
			End if
			Set Variable: BoundaryLayerCount:= Sutra_GetBoundaryCount(3,3)
			If: BoundaryLayerCount>0
				Loop for: Variable LayerIndex from: 1 to: BoundaryLayerCount step: 1
					Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
					If: ok&ContinueSimulation
						Loop for: Objects in layer: Specified Hydraulic Head Lines[LayerIndex]
							If: ok&ContinueSimulation
								Set Variable: ContourIndex:= ContourIndex + 1
								Evaluate expression: Sutra_IsOverridenSpecPres(ContourIndex, IsOverriden(Specified Hydraulic Head Lines[LayerIndex].specified_hydraulic_head))
								Evaluate expression: Sutra_IsOverridenSpecPresConc(ContourIndex, IsOverriden(Specified Hydraulic Head Lines[LayerIndex].concentration))
								# Evaluate expression: Sutra_IsOverridenSpecPresTop(ContourIndex, IsOverriden(Specified Hydraulic Head Lines[LayerIndex].top elevation))
								# Evaluate expression: Sutra_IsOverridenSpecPresBottom(ContourIndex, IsOverriden(Specified Hydraulic Head Lines[LayerIndex].bottom elevation))
								If: Alert<2
									If: (specified_hydraulic_head=$N/A)
										Set Variable: OK:= 0
										Alert: "Error: You must set the specified_hydraulic_head for every object on the Specified Hydraulic Head Lines" + LayerIndex + " layer."
									End if
									If: (concentration=$N/A)
										Set Variable: OK:= 0
										Alert: "Error: You must set the concentration for every object on the Specified Hydraulic Head Lines" + LayerIndex + " layer."
									End if
								End if
							End if
						End loop
					End if
				End loop
			End if
			Set Variable: BoundaryLayerCount:= Sutra_GetBoundaryCount(4,3)
			If: BoundaryLayerCount>0
				Loop for: Variable LayerIndex from: 1 to: BoundaryLayerCount step: 1
					Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
					If: ok&ContinueSimulation
						Loop for: Objects in layer: Specified Hydraulic Head Sheets Vertical[LayerIndex]
							If: ok&ContinueSimulation
								Set Variable: ContourIndex:= ContourIndex + 1
								Evaluate expression: Sutra_IsOverridenSpecPres(ContourIndex, IsOverriden(Specified Hydraulic Head Sheets Vertical[LayerIndex].specified_hydraulic_head))
								Evaluate expression: Sutra_IsOverridenSpecPresConc(ContourIndex, IsOverriden(Specified Hydraulic Head Sheets Vertical[LayerIndex].concentration))
								# Evaluate expression: Sutra_IsOverridenSpecPresTop(ContourIndex, IsOverriden(Specified Hydraulic Head Sheets Vertical[LayerIndex].top elevation))
								# Evaluate expression: Sutra_IsOverridenSpecPresBottom(ContourIndex, IsOverriden(Specified Hydraulic Head Sheets Vertical[LayerIndex].bottom elevation))
								If: Alert<2
									If: (specified_hydraulic_head=$N/A)
										Set Variable: OK:= 0
										Alert: "Error: You must set the specified_hydraulic_head for every object on the Specified Hydraulic Head Sheets Vertical" + LayerIndex + " layer."
									End if
									If: (concentration=$N/A)
										Set Variable: OK:= 0
										Alert: "Error: You must set the concentration for every object on the Specified Hydraulic Head Sheets Vertical" + LayerIndex + " layer."
									End if
								End if
							End if
						End loop
					End if
				End loop
			End if
			Set Variable: BoundaryLayerCount:= Sutra_GetBoundaryCount(5,3)
			If: BoundaryLayerCount>0
				Loop for: Variable LayerIndex from: 1 to: BoundaryLayerCount step: 1
					Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
					If: ok&ContinueSimulation
						Loop for: Objects in layer: Specified Hydraulic Head Sheets Slanted[LayerIndex]
							If: ok&ContinueSimulation
								Set Variable: ContourIndex:= ContourIndex + 1
								Evaluate expression: Sutra_IsOverridenSpecPres(ContourIndex, IsOverriden(Specified Hydraulic Head Sheets Slanted[LayerIndex].specified_hydraulic_head))
								Evaluate expression: Sutra_IsOverridenSpecPresConc(ContourIndex, IsOverriden(Specified Hydraulic Head Sheets Slanted[LayerIndex].concentration))
								# Evaluate expression: Sutra_IsOverridenSpecPresTop(ContourIndex, IsOverriden(Specified Hydraulic Head Sheets Slanted[LayerIndex].top elevation))
								# Evaluate expression: Sutra_IsOverridenSpecPresBottom(ContourIndex, IsOverriden(Specified Hydraulic Head Sheets Slanted[LayerIndex].bottom elevation))
								If: Alert<2
									If: (specified_hydraulic_head=$N/A)
										Set Variable: OK:= 0
										Alert: "Error: You must set the specified_hydraulic_head for every object on the Specified Hydraulic Head Sheets Slanted" + LayerIndex + " layer."
									End if
									If: (concentration=$N/A)
										Set Variable: OK:= 0
										Alert: "Error: You must set the concentration for every object on the Specified Hydraulic Head Sheets Slanted" + LayerIndex + " layer."
									End if
								End if
							End if
						End loop
					End if
				End loop
			End if
		Else
			Set Variable: ContourIndex:= 0
			Set Variable: BoundaryLayerCount:= Sutra_GetBoundaryCount(1,3)
			If: BoundaryLayerCount>0
				Loop for: Variable LayerIndex from: 1 to: BoundaryLayerCount step: 1
					Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
					If: ok&ContinueSimulation
						Loop for: Objects in layer: Specified Pressure Solids[LayerIndex]
							If: ok&ContinueSimulation
								Set Variable: ContourIndex:= ContourIndex + 1
								Evaluate expression: Sutra_IsOverridenSpecPres(ContourIndex, IsOverriden(Specified Pressure Solids[LayerIndex].specified_pressure))
								If: @rbSoluteVarDens@|@rbSoluteConstDens@
									Evaluate expression: Sutra_IsOverridenSpecPresConc(ContourIndex, IsOverriden(Specified Pressure Solids[LayerIndex].concentration))
								Else
									Evaluate expression: Sutra_IsOverridenSpecPresConc(ContourIndex, IsOverriden(Specified Pressure Solids[LayerIndex].temperature))
								End if
								# Evaluate expression: Sutra_IsOverridenSpecPresTop(ContourIndex, IsOverriden(Specified Pressure Solids[LayerIndex].top elevation))
								# Evaluate expression: Sutra_IsOverridenSpecPresBottom(ContourIndex, IsOverriden(Specified Pressure Solids[LayerIndex].bottom elevation))
								If: Alert<2
									If: (specified_pressure=$N/A)
										Set Variable: OK:= 0
										Alert: "Error: You must set the specified_pressure for every object on the Specified Pressure Solids" + LayerIndex + " layer."
									End if
									If: @rbSoluteVarDens@|@rbSoluteConstDens@
										If: (concentration=$N/A)
											Set Variable: OK:= 0
											Alert: "Error: You must set the concentration for every object on the Specified Pressure Solids" + LayerIndex + " layer."
										End if
									Else
										If: (temperature=$N/A)
											Set Variable: OK:= 0
											Alert: "Error: You must set the temperature for every object on the Specified Pressure Solids" + LayerIndex + " layer."
										End if
									End if
								End if
							End if
						End loop
					End if
				End loop
			End if
			Set Variable: BoundaryLayerCount:= Sutra_GetBoundaryCount(2,3)
			If: BoundaryLayerCount>0
				Loop for: Variable LayerIndex from: 1 to: BoundaryLayerCount step: 1
					Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
					If: ok&ContinueSimulation
						Loop for: Objects in layer: Specified Pressure Points[LayerIndex]
							If: ok&ContinueSimulation
								Set Variable: ContourIndex:= ContourIndex + 1
								Evaluate expression: Sutra_IsOverridenSpecPres(ContourIndex, IsOverriden(Specified Pressure Points[LayerIndex].specified_pressure))
								If: @rbSoluteVarDens@|@rbSoluteConstDens@
									Evaluate expression: Sutra_IsOverridenSpecPresConc(ContourIndex, IsOverriden(Specified Pressure Points[LayerIndex].concentration))
								Else
									Evaluate expression: Sutra_IsOverridenSpecPresConc(ContourIndex, IsOverriden(Specified Pressure Points[LayerIndex].temperature))
								End if
								# Evaluate expression: Sutra_IsOverridenSpecPresTop(ContourIndex, IsOverriden(Specified Pressure Points[LayerIndex].top elevation))
								# Evaluate expression: Sutra_IsOverridenSpecPresBottom(ContourIndex, IsOverriden(Specified Pressure Points[LayerIndex].bottom elevation))
								If: Alert<2
									If: (specified_pressure=$N/A)
										Set Variable: OK:= 0
										Alert: "Error: You must set the specified_pressure for every object on the Specified Pressure Points" + LayerIndex + " layer."
									End if
									If: @rbSoluteVarDens@|@rbSoluteConstDens@
										If: (concentration=$N/A)
											Set Variable: OK:= 0
											Alert: "Error: You must set the concentration for every object on the Specified Pressure Points" + LayerIndex + " layer."
										End if
									Else
										If: (temperature=$N/A)
											Set Variable: OK:= 0
											Alert: "Error: You must set the temperature for every object on the Specified Pressure Points" + LayerIndex + " layer."
										End if
									End if
								End if
							End if
						End loop
					End if
				End loop
			End if
			Set Variable: BoundaryLayerCount:= Sutra_GetBoundaryCount(3,3)
			If: BoundaryLayerCount>0
				Loop for: Variable LayerIndex from: 1 to: BoundaryLayerCount step: 1
					Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
					If: ok&ContinueSimulation
						Loop for: Objects in layer: Specified Pressure Lines[LayerIndex]
							If: ok&ContinueSimulation
								Set Variable: ContourIndex:= ContourIndex + 1
								Evaluate expression: Sutra_IsOverridenSpecPres(ContourIndex, IsOverriden(Specified Pressure Lines[LayerIndex].specified_pressure))
								If: @rbSoluteVarDens@|@rbSoluteConstDens@
									Evaluate expression: Sutra_IsOverridenSpecPresConc(ContourIndex, IsOverriden(Specified Pressure Lines[LayerIndex].concentration))
								Else
									Evaluate expression: Sutra_IsOverridenSpecPresConc(ContourIndex, IsOverriden(Specified Pressure Lines[LayerIndex].temperature))
								End if
								# Evaluate expression: Sutra_IsOverridenSpecPresTop(ContourIndex, IsOverriden(Specified Pressure Lines[LayerIndex].top elevation))
								# Evaluate expression: Sutra_IsOverridenSpecPresBottom(ContourIndex, IsOverriden(Specified Pressure Lines[LayerIndex].bottom elevation))
								If: Alert<2
									If: (specified_pressure=$N/A)
										Set Variable: OK:= 0
										Alert: "Error: You must set the specified_pressure for every object on the Specified Pressure Lines" + LayerIndex + " layer."
									End if
									If: @rbSoluteVarDens@|@rbSoluteConstDens@
										If: (concentration=$N/A)
											Set Variable: OK:= 0
											Alert: "Error: You must set the concentration for every object on the Specified Pressure Lines" + LayerIndex + " layer."
										End if
									Else
										If: (temperature=$N/A)
											Set Variable: OK:= 0
											Alert: "Error: You must set the temperature for every object on the Specified Pressure Lines" + LayerIndex + " layer."
										End if
									End if
								End if
							End if
						End loop
					End if
				End loop
			End if
			Set Variable: BoundaryLayerCount:= Sutra_GetBoundaryCount(4,3)
			If: BoundaryLayerCount>0
				Loop for: Variable LayerIndex from: 1 to: BoundaryLayerCount step: 1
					Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
					If: ok&ContinueSimulation
						Loop for: Objects in layer: Specified Pressure Sheets Vertical[LayerIndex]
							If: ok&ContinueSimulation
								Set Variable: ContourIndex:= ContourIndex + 1
								Evaluate expression: Sutra_IsOverridenSpecPres(ContourIndex, IsOverriden(Specified Pressure Sheets Vertical[LayerIndex].specified_pressure))
								If: @rbSoluteVarDens@|@rbSoluteConstDens@
									Evaluate expression: Sutra_IsOverridenSpecPresConc(ContourIndex, IsOverriden(Specified Pressure Sheets Vertical[LayerIndex].concentration))
								Else
									Evaluate expression: Sutra_IsOverridenSpecPresConc(ContourIndex, IsOverriden(Specified Pressure Sheets Vertical[LayerIndex].temperature))
								End if
								# Evaluate expression: Sutra_IsOverridenSpecPresTop(ContourIndex, IsOverriden(Specified Pressure Sheets Vertical[LayerIndex].top elevation))
								# Evaluate expression: Sutra_IsOverridenSpecPresBottom(ContourIndex, IsOverriden(Specified Pressure Sheets Vertical[LayerIndex].bottom elevation))
								If: Alert<2
									If: (specified_pressure=$N/A)
										Set Variable: OK:= 0
										Alert: "Error: You must set the specified_pressure for every object on the Specified Pressure Sheets Vertical" + LayerIndex + " layer."
									End if
									If: @rbSoluteVarDens@|@rbSoluteConstDens@
										If: (concentration=$N/A)
											Set Variable: OK:= 0
											Alert: "Error: You must set the concentration for every object on the Specified Pressure Sheets Vertical" + LayerIndex + " layer."
										End if
									Else
										If: (temperature=$N/A)
											Set Variable: OK:= 0
											Alert: "Error: You must set the temperature for every object on the Specified Pressure Sheets Vertical" + LayerIndex + " layer."
										End if
									End if
								End if
							End if
						End loop
					End if
				End loop
			End if
			Set Variable: BoundaryLayerCount:= Sutra_GetBoundaryCount(5,3)
			If: BoundaryLayerCount>0
				Loop for: Variable LayerIndex from: 1 to: BoundaryLayerCount step: 1
					Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
					If: ok&ContinueSimulation
						Loop for: Objects in layer: Specified Pressure Sheets Slanted[LayerIndex]
							If: ok&ContinueSimulation
								Set Variable: ContourIndex:= ContourIndex + 1
								Evaluate expression: Sutra_IsOverridenSpecPres(ContourIndex, IsOverriden(Specified Pressure Sheets Slanted[LayerIndex].specified_pressure))
								If: @rbSoluteVarDens@|@rbSoluteConstDens@
									Evaluate expression: Sutra_IsOverridenSpecPresConc(ContourIndex, IsOverriden(Specified Pressure Sheets Slanted[LayerIndex].concentration))
								Else
									Evaluate expression: Sutra_IsOverridenSpecPresConc(ContourIndex, IsOverriden(Specified Pressure Sheets Slanted[LayerIndex].temperature))
								End if
								# Evaluate expression: Sutra_IsOverridenSpecPresTop(ContourIndex, IsOverriden(Specified Pressure Sheets Slanted[LayerIndex].top elevation))
								# Evaluate expression: Sutra_IsOverridenSpecPresBottom(ContourIndex, IsOverriden(Specified Pressure Sheets Slanted[LayerIndex].bottom elevation))
								If: Alert<2
									If: (specified_pressure=$N/A)
										Set Variable: OK:= 0
										Alert: "Error: You must set the specified_pressure for every object on the Specified Pressure Sheets Slanted" + LayerIndex + " layer."
									End if
									If: @rbSoluteVarDens@|@rbSoluteConstDens@
										If: (concentration=$N/A)
											Set Variable: OK:= 0
											Alert: "Error: You must set the concentration for every object on the Specified Pressure Sheets Slanted" + LayerIndex + " layer."
										End if
									Else
										If: (temperature=$N/A)
											Set Variable: OK:= 0
											Alert: "Error: You must set the temperature for every object on the Specified Pressure Sheets Slanted" + LayerIndex + " layer."
										End if
									End if
								End if
							End if
						End loop
					End if
				End loop
			End if
		End if
	End if
	# If: ok&ContinueSimulation&@cbExport19@
	# 
	# If: StateVariableType=1
	# Set Variable: ContourIndex:= 0
	# Loop for: Variable LayerIndex from: 1 to: LayerCount step: 1
	# Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
	# If: ok&ContinueSimulation
	# Loop for: Objects in layer: Specified Hydraulic Head surfaces[LayerIndex]
	# Set Variable: ContourIndex:= ContourIndex + 1
	# Evaluate expression: Sutra_IsOverridenSurfaceSpecPres(ContourIndex, IsOverriden(Specified Hydraulic Head surfaces[LayerIndex].specified_hydraulic_head))
	# Evaluate expression: Sutra_IsOverridenSurfaceSpecPresConc(ContourIndex, IsOverriden(Specified Hydraulic Head surfaces[LayerIndex].concentration))
	# Evaluate expression: Sutra_IsOverridenSurfaceSpecPresTop(ContourIndex, IsOverriden(Specified Hydraulic Head surfaces[LayerIndex].top elevation))
	# Evaluate expression: Sutra_IsOverridenSurfaceSpecPresBottom(ContourIndex, IsOverriden(Specified Hydraulic Head surfaces[LayerIndex].bottom elevation))
	# End loop
	# End if
	# End loop
	# Else
	# Set Variable: ContourIndex:= 0
	# Loop for: Variable LayerIndex from: 1 to: LayerCount step: 1
	# Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
	# If: ok&ContinueSimulation&@cbExport19@
	# Loop for: Objects in layer: Specified Pressure surfaces[LayerIndex]
	# Set Variable: ContourIndex:= ContourIndex + 1
	# Evaluate expression: Sutra_IsOverridenSurfaceSpecPres(ContourIndex, IsOverriden(Specified Pressure surfaces[LayerIndex].specified_pressure))
	# Evaluate expression: Sutra_IsOverridenSurfaceSpecPresConc(ContourIndex, IsOverriden(Specified Pressure surfaces[LayerIndex].concentration))
	# Evaluate expression: Sutra_IsOverridenSurfaceSpecPresTop(ContourIndex, IsOverriden(Specified Pressure surfaces[LayerIndex].top elevation))
	# Evaluate expression: Sutra_IsOverridenSurfaceSpecPresBottom(ContourIndex, IsOverriden(Specified Pressure surfaces[LayerIndex].bottom elevation))
	# End loop
	# End if
	# End loop
	# End if
	# 
	# End if
	If: ok&ContinueSimulation&@cbExport20@
		# 
		If: TransportType2=0
			Set Variable: ContourIndex:= 0
			Set Variable: BoundaryLayerCount:= Sutra_GetBoundaryCount(1,4)
			If: BoundaryLayerCount>0
				Loop for: Variable LayerIndex from: 1 to: BoundaryLayerCount step: 1
					Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
					If: ok&ContinueSimulation&@cbExport20@
						Loop for: Objects in layer: Specified Conc or Temp Solids[LayerIndex]
							If: ok&ContinueSimulation&@cbExport20@
								Set Variable: ContourIndex:= ContourIndex + 1
								Evaluate expression: Sutra_IsOverridenSpecConcTemp(ContourIndex, IsOverriden(Specified Conc or Temp Solids[LayerIndex].specified_conc_or_temp))
								# Evaluate expression: Sutra_IsOverridenSpecConcTempTop(ContourIndex, IsOverriden(Specified Conc or Temp Solids[LayerIndex].top elevation))
								# Evaluate expression: Sutra_IsOverridenSpecConcTempBottom(ContourIndex, IsOverriden(Specified Conc or Temp Solids[LayerIndex].bottom elevation))
								If: Alert<2
									If: (specified_conc_or_temp=$N/A)
										Set Variable: OK:= 0
										Alert: "Error: You must set the specified_conc_or_temp for every object on the Specified Conc or Temp Solids" + LayerIndex + " layer."
									End if
								End if
							End if
						End loop
					End if
				End loop
			End if
			Set Variable: BoundaryLayerCount:= Sutra_GetBoundaryCount(2,4)
			If: BoundaryLayerCount>0
				Loop for: Variable LayerIndex from: 1 to: BoundaryLayerCount step: 1
					Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
					If: ok&ContinueSimulation&@cbExport20@
						Loop for: Objects in layer: Specified Conc or Temp Points[LayerIndex]
							If: ok&ContinueSimulation&@cbExport20@
								Set Variable: ContourIndex:= ContourIndex + 1
								Evaluate expression: Sutra_IsOverridenSpecConcTemp(ContourIndex, IsOverriden(Specified Conc or Temp Points[LayerIndex].specified_conc_or_temp))
								# Evaluate expression: Sutra_IsOverridenSpecConcTempTop(ContourIndex, IsOverriden(Specified Conc or Temp Points[LayerIndex].top elevation))
								# Evaluate expression: Sutra_IsOverridenSpecConcTempBottom(ContourIndex, IsOverriden(Specified Conc or Temp Points[LayerIndex].bottom elevation))
								If: Alert<2
									If: (specified_conc_or_temp=$N/A)
										Set Variable: OK:= 0
										Alert: "Error: You must set the specified_conc_or_temp for every object on the Specified Conc or Temp Points" + LayerIndex + " layer."
									End if
								End if
							End if
						End loop
					End if
				End loop
			End if
			Set Variable: BoundaryLayerCount:= Sutra_GetBoundaryCount(3,4)
			If: BoundaryLayerCount>0
				Loop for: Variable LayerIndex from: 1 to: BoundaryLayerCount step: 1
					Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
					If: ok&ContinueSimulation&@cbExport20@
						Loop for: Objects in layer: Specified Conc or Temp Lines[LayerIndex]
							If: ok&ContinueSimulation&@cbExport20@
								Set Variable: ContourIndex:= ContourIndex + 1
								Evaluate expression: Sutra_IsOverridenSpecConcTemp(ContourIndex, IsOverriden(Specified Conc or Temp Lines[LayerIndex].specified_conc_or_temp))
								# Evaluate expression: Sutra_IsOverridenSpecConcTempTop(ContourIndex, IsOverriden(Specified Conc or Temp Lines[LayerIndex].top elevation))
								# Evaluate expression: Sutra_IsOverridenSpecConcTempBottom(ContourIndex, IsOverriden(Specified Conc or Temp Lines[LayerIndex].bottom elevation))
								If: Alert<2
									If: (specified_conc_or_temp=$N/A)
										Set Variable: OK:= 0
										Alert: "Error: You must set the specified_conc_or_temp for every object on the Specified Conc or Temp Lines" + LayerIndex + " layer."
									End if
								End if
							End if
						End loop
					End if
				End loop
			End if
			Set Variable: BoundaryLayerCount:= Sutra_GetBoundaryCount(4,4)
			If: BoundaryLayerCount>0
				Loop for: Variable LayerIndex from: 1 to: BoundaryLayerCount step: 1
					Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
					If: ok&ContinueSimulation&@cbExport20@
						Loop for: Objects in layer: Specified Conc or Temp Sheets Vertical[LayerIndex]
							If: ok&ContinueSimulation&@cbExport20@
								Set Variable: ContourIndex:= ContourIndex + 1
								Evaluate expression: Sutra_IsOverridenSpecConcTemp(ContourIndex, IsOverriden(Specified Conc or Temp Sheets Vertical[LayerIndex].specified_conc_or_temp))
								# Evaluate expression: Sutra_IsOverridenSpecConcTempTop(ContourIndex, IsOverriden(Specified Conc or Temp Sheets Vertical[LayerIndex].top elevation))
								# Evaluate expression: Sutra_IsOverridenSpecConcTempBottom(ContourIndex, IsOverriden(Specified Conc or Temp Sheets Vertical[LayerIndex].bottom elevation))
								If: Alert<2
									If: (specified_conc_or_temp=$N/A)
										Set Variable: OK:= 0
										Alert: "Error: You must set the specified_conc_or_temp for every object on the Specified Conc or Temp Sheets Vertical" + LayerIndex + " layer."
									End if
								End if
							End if
						End loop
					End if
				End loop
			End if
			Set Variable: BoundaryLayerCount:= Sutra_GetBoundaryCount(5,4)
			If: BoundaryLayerCount>0
				Loop for: Variable LayerIndex from: 1 to: BoundaryLayerCount step: 1
					Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
					If: ok&ContinueSimulation&@cbExport20@
						Loop for: Objects in layer: Specified Conc or Temp Sheets Slanted[LayerIndex]
							If: ok&ContinueSimulation&@cbExport20@
								Set Variable: ContourIndex:= ContourIndex + 1
								Evaluate expression: Sutra_IsOverridenSpecConcTemp(ContourIndex, IsOverriden(Specified Conc or Temp Sheets Slanted[LayerIndex].specified_conc_or_temp))
								# Evaluate expression: Sutra_IsOverridenSpecConcTempTop(ContourIndex, IsOverriden(Specified Conc or Temp Sheets Slanted[LayerIndex].top elevation))
								# Evaluate expression: Sutra_IsOverridenSpecConcTempBottom(ContourIndex, IsOverriden(Specified Conc or Temp Sheets Slanted[LayerIndex].bottom elevation))
								If: Alert<2
									If: (specified_conc_or_temp=$N/A)
										Set Variable: OK:= 0
										Alert: "Error: You must set the specified_conc_or_temp for every object on the Specified Conc or Temp Sheets Vertical" + LayerIndex + " layer."
									End if
								End if
							End if
						End loop
					End if
				End loop
			End if
		Else
			If: TransportType2=1
				Set Variable: ContourIndex:= 0
				Set Variable: BoundaryLayerCount:= Sutra_GetBoundaryCount(1,4)
				If: BoundaryLayerCount>0
					Loop for: Variable LayerIndex from: 1 to: BoundaryLayerCount step: 1
						Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
						If: ok&ContinueSimulation&@cbExport20@
							Loop for: Objects in layer: Specified Temperature Solids[LayerIndex]
								If: ok&ContinueSimulation&@cbExport20@
									Set Variable: ContourIndex:= ContourIndex + 1
									Evaluate expression: Sutra_IsOverridenSpecConcTemp(ContourIndex, IsOverriden(Specified Temperature Solids[LayerIndex].specified_temperature))
									# Evaluate expression: Sutra_IsOverridenSpecConcTempTop(ContourIndex, IsOverriden(Specified Temperature Solids[LayerIndex].top elevation))
									# Evaluate expression: Sutra_IsOverridenSpecConcTempBottom(ContourIndex, IsOverriden(Specified Temperature Solids[LayerIndex].bottom elevation))
									If: Alert<2
										If: (specified_temperature=$N/A)
											Set Variable: OK:= 0
											Alert: "Error: You must set the specified_temperature for every object on the Specified Temperature Solids" + LayerIndex + " layer."
										End if
									End if
								End if
							End loop
						End if
					End loop
				End if
				Set Variable: BoundaryLayerCount:= Sutra_GetBoundaryCount(2,4)
				If: BoundaryLayerCount>0
					Loop for: Variable LayerIndex from: 1 to: BoundaryLayerCount step: 1
						Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
						If: ok&ContinueSimulation&@cbExport20@
							Loop for: Objects in layer: Specified Temperature Points[LayerIndex]
								If: ok&ContinueSimulation&@cbExport20@
									Set Variable: ContourIndex:= ContourIndex + 1
									Evaluate expression: Sutra_IsOverridenSpecConcTemp(ContourIndex, IsOverriden(Specified Temperature Points[LayerIndex].specified_temperature))
									# Evaluate expression: Sutra_IsOverridenSpecConcTempTop(ContourIndex, IsOverriden(Specified Temperature Points[LayerIndex].top elevation))
									# Evaluate expression: Sutra_IsOverridenSpecConcTempBottom(ContourIndex, IsOverriden(Specified Temperature Points[LayerIndex].bottom elevation))
									If: Alert<2
										If: (specified_temperature=$N/A)
											Set Variable: OK:= 0
											Alert: "Error: You must set the specified_temperature for every object on the Specified Temperature Points" + LayerIndex + " layer."
										End if
									End if
								End if
							End loop
						End if
					End loop
				End if
				Set Variable: BoundaryLayerCount:= Sutra_GetBoundaryCount(3,4)
				If: BoundaryLayerCount>0
					Loop for: Variable LayerIndex from: 1 to: BoundaryLayerCount step: 1
						Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
						If: ok&ContinueSimulation&@cbExport20@
							Loop for: Objects in layer: Specified Temperature Lines[LayerIndex]
								If: ok&ContinueSimulation&@cbExport20@
									Set Variable: ContourIndex:= ContourIndex + 1
									Evaluate expression: Sutra_IsOverridenSpecConcTemp(ContourIndex, IsOverriden(Specified Temperature Lines[LayerIndex].specified_temperature))
									# Evaluate expression: Sutra_IsOverridenSpecConcTempTop(ContourIndex, IsOverriden(Specified Temperature Lines[LayerIndex].top elevation))
									# Evaluate expression: Sutra_IsOverridenSpecConcTempBottom(ContourIndex, IsOverriden(Specified Temperature Lines[LayerIndex].bottom elevation))
									If: Alert<2
										If: (specified_temperature=$N/A)
											Set Variable: OK:= 0
											Alert: "Error: You must set the specified_temperature for every object on the Specified Temperature Lines" + LayerIndex + " layer."
										End if
									End if
								End if
							End loop
						End if
					End loop
				End if
				Set Variable: BoundaryLayerCount:= Sutra_GetBoundaryCount(4,4)
				If: BoundaryLayerCount>0
					Loop for: Variable LayerIndex from: 1 to: BoundaryLayerCount step: 1
						Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
						If: ok&ContinueSimulation&@cbExport20@
							Loop for: Objects in layer: Specified Temperature Sheets Vertical[LayerIndex]
								If: ok&ContinueSimulation&@cbExport20@
									Set Variable: ContourIndex:= ContourIndex + 1
									Evaluate expression: Sutra_IsOverridenSpecConcTemp(ContourIndex, IsOverriden(Specified Temperature Sheets Vertical[LayerIndex].specified_temperature))
									# Evaluate expression: Sutra_IsOverridenSpecConcTempTop(ContourIndex, IsOverriden(Specified Temperature Sheets Vertical[LayerIndex].top elevation))
									# Evaluate expression: Sutra_IsOverridenSpecConcTempBottom(ContourIndex, IsOverriden(Specified Temperature Sheets Vertical[LayerIndex].bottom elevation))
									If: Alert<2
										If: (specified_temperature=$N/A)
											Set Variable: OK:= 0
											Alert: "Error: You must set the specified_temperature for every object on the Specified Temperature Sheets Vertical" + LayerIndex + " layer."
										End if
									End if
								End if
							End loop
						End if
					End loop
				End if
				Set Variable: BoundaryLayerCount:= Sutra_GetBoundaryCount(5,4)
				If: BoundaryLayerCount>0
					Loop for: Variable LayerIndex from: 1 to: BoundaryLayerCount step: 1
						Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
						If: ok&ContinueSimulation&@cbExport20@
							Loop for: Objects in layer: Specified Temperature Sheets Slanted[LayerIndex]
								If: ok&ContinueSimulation&@cbExport20@
									Set Variable: ContourIndex:= ContourIndex + 1
									Evaluate expression: Sutra_IsOverridenSpecConcTemp(ContourIndex, IsOverriden(Specified Temperature Sheets Slanted[LayerIndex].specified_temperature))
									# Evaluate expression: Sutra_IsOverridenSpecConcTempTop(ContourIndex, IsOverriden(Specified Temperature Sheets Slanted[LayerIndex].top elevation))
									# Evaluate expression: Sutra_IsOverridenSpecConcTempBottom(ContourIndex, IsOverriden(Specified Temperature Sheets Slanted[LayerIndex].bottom elevation))
									If: Alert<2
										If: (specified_temperature=$N/A)
											Set Variable: OK:= 0
											Alert: "Error: You must set the specified_temperature for every object on the Specified Temperature Sheets Slanted" + LayerIndex + " layer."
										End if
									End if
								End if
							End loop
						End if
					End loop
				End if
			Else
				If: TransportType2=2
					Set Variable: ContourIndex:= 0
					Set Variable: BoundaryLayerCount:= Sutra_GetBoundaryCount(1,4)
					If: BoundaryLayerCount>0
						Loop for: Variable LayerIndex from: 1 to: BoundaryLayerCount step: 1
							Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
							If: ok&ContinueSimulation
								Loop for: Objects in layer: Specified Concentration Solids[LayerIndex]
									If: ok&ContinueSimulation
										Set Variable: ContourIndex:= ContourIndex + 1
										Evaluate expression: Sutra_IsOverridenSpecConcTemp(ContourIndex, IsOverriden(Specified Concentration Solids[LayerIndex].specified_concentration))
										# Evaluate expression: Sutra_IsOverridenSpecConcTempTop(ContourIndex, IsOverriden(Specified Concentration Solids[LayerIndex].top elevation))
										# Evaluate expression: Sutra_IsOverridenSpecConcTempBottom(ContourIndex, IsOverriden(Specified Concentration Solids[LayerIndex].bottom elevation))
										If: Alert<2
											If: (specified_concentration=$N/A)
												Set Variable: OK:= 0
												Alert: "Error: You must set the specified_concentration for every object on the Specified Concentration Solids" + LayerIndex + " layer."
											End if
										End if
									End if
								End loop
							End if
						End loop
					End if
					Set Variable: BoundaryLayerCount:= Sutra_GetBoundaryCount(2,4)
					If: BoundaryLayerCount>0
						Loop for: Variable LayerIndex from: 1 to: BoundaryLayerCount step: 1
							Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
							If: ok&ContinueSimulation
								Loop for: Objects in layer: Specified Concentration Points[LayerIndex]
									If: ok&ContinueSimulation
										Set Variable: ContourIndex:= ContourIndex + 1
										Evaluate expression: Sutra_IsOverridenSpecConcTemp(ContourIndex, IsOverriden(Specified Concentration Points[LayerIndex].specified_concentration))
										# Evaluate expression: Sutra_IsOverridenSpecConcTempTop(ContourIndex, IsOverriden(Specified Concentration Points[LayerIndex].top elevation))
										# Evaluate expression: Sutra_IsOverridenSpecConcTempBottom(ContourIndex, IsOverriden(Specified Concentration Points[LayerIndex].bottom elevation))
										If: Alert<2
											If: (specified_concentration=$N/A)
												Set Variable: OK:= 0
												Alert: "Error: You must set the specified_concentration for every object on the Specified Concentration Points" + LayerIndex + " layer."
											End if
										End if
									End if
								End loop
							End if
						End loop
					End if
					Set Variable: BoundaryLayerCount:= Sutra_GetBoundaryCount(3,4)
					If: BoundaryLayerCount>0
						Loop for: Variable LayerIndex from: 1 to: BoundaryLayerCount step: 1
							Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
							If: ok&ContinueSimulation
								Loop for: Objects in layer: Specified Concentration Lines[LayerIndex]
									If: ok&ContinueSimulation
										Set Variable: ContourIndex:= ContourIndex + 1
										Evaluate expression: Sutra_IsOverridenSpecConcTemp(ContourIndex, IsOverriden(Specified Concentration Lines[LayerIndex].specified_concentration))
										# Evaluate expression: Sutra_IsOverridenSpecConcTempTop(ContourIndex, IsOverriden(Specified Concentration Lines[LayerIndex].top elevation))
										# Evaluate expression: Sutra_IsOverridenSpecConcTempBottom(ContourIndex, IsOverriden(Specified Concentration Lines[LayerIndex].bottom elevation))
										If: Alert<2
											If: (specified_concentration=$N/A)
												Set Variable: OK:= 0
												Alert: "Error: You must set the specified_concentration for every object on the Specified Concentration Lines" + LayerIndex + " layer."
											End if
										End if
									End if
								End loop
							End if
						End loop
					End if
					Set Variable: BoundaryLayerCount:= Sutra_GetBoundaryCount(4,4)
					If: BoundaryLayerCount>0
						Loop for: Variable LayerIndex from: 1 to: BoundaryLayerCount step: 1
							Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
							If: ok&ContinueSimulation
								Loop for: Objects in layer: Specified Concentration Sheets Vertical[LayerIndex]
									If: ok&ContinueSimulation
										Set Variable: ContourIndex:= ContourIndex + 1
										Evaluate expression: Sutra_IsOverridenSpecConcTemp(ContourIndex, IsOverriden(Specified Concentration Sheets Vertical[LayerIndex].specified_concentration))
										# Evaluate expression: Sutra_IsOverridenSpecConcTempTop(ContourIndex, IsOverriden(Specified Concentration Sheets Vertical[LayerIndex].top elevation))
										# Evaluate expression: Sutra_IsOverridenSpecConcTempBottom(ContourIndex, IsOverriden(Specified Concentration Sheets Vertical[LayerIndex].bottom elevation))
										If: Alert<2
											If: (specified_concentration=$N/A)
												Set Variable: OK:= 0
												Alert: "Error: You must set the specified_concentration for every object on the Specified Concentration Sheets Vertical" + LayerIndex + " layer."
											End if
										End if
									End if
								End loop
							End if
						End loop
					End if
					Set Variable: BoundaryLayerCount:= Sutra_GetBoundaryCount(5,4)
					If: BoundaryLayerCount>0
						Loop for: Variable LayerIndex from: 1 to: BoundaryLayerCount step: 1
							Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
							If: ok&ContinueSimulation
								Loop for: Objects in layer: Specified Concentration Sheets Slanted[LayerIndex]
									If: ok&ContinueSimulation
										Set Variable: ContourIndex:= ContourIndex + 1
										Evaluate expression: Sutra_IsOverridenSpecConcTemp(ContourIndex, IsOverriden(Specified Concentration Sheets Slanted[LayerIndex].specified_concentration))
										# Evaluate expression: Sutra_IsOverridenSpecConcTempTop(ContourIndex, IsOverriden(Specified Concentration Sheets Slanted[LayerIndex].top elevation))
										# Evaluate expression: Sutra_IsOverridenSpecConcTempBottom(ContourIndex, IsOverriden(Specified Concentration Sheets Slanted[LayerIndex].bottom elevation))
										If: Alert<2
											If: (specified_concentration=$N/A)
												Set Variable: OK:= 0
												Alert: "Error: You must set the specified_concentration for every object on the Specified Concentration Sheets Slanted" + LayerIndex + " layer."
											End if
										End if
									End if
								End loop
							End if
						End loop
					End if
				End if
			End if
		End if
	End if
	# If: ok&ContinueSimulation
	# 
	# If: TransportType=1
	# Set Variable: ContourIndex:= 0
	# Loop for: Variable LayerIndex from: 1 to: LayerCount step: 1
	# Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
	# If: ok&ContinueSimulation&@cbExport20@
	# Loop for: Objects in layer: Specified Concentration surfaces[LayerIndex]
	# Set Variable: ContourIndex:= ContourIndex + 1
	# Evaluate expression: Sutra_IsOverridenSurfaceSpecConcTemp(ContourIndex, IsOverriden(Specified Concentration surfaces[LayerIndex].specified_concentration))
	# Evaluate expression: Sutra_IsOverridenSurfaceSpecConcTempTop(ContourIndex, IsOverriden(Specified Concentration surfaces[LayerIndex].top elevation))
	# Evaluate expression: Sutra_IsOverridenSurfaceSpecConcTempBottom(ContourIndex, IsOverriden(Specified Concentration surfaces[LayerIndex].bottom elevation))
	# End loop
	# End if
	# End loop
	# Else
	# Set Variable: ContourIndex:= 0
	# Loop for: Variable LayerIndex from: 1 to: LayerCount step: 1
	# Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
	# If: ok&ContinueSimulation&@cbExport20@
	# Loop for: Objects in layer: Specified Temperature surfaces[LayerIndex]
	# Set Variable: ContourIndex:= ContourIndex + 1
	# Evaluate expression: Sutra_IsOverridenSurfaceSpecConcTemp(ContourIndex, IsOverriden(Specified Temperature surfaces[LayerIndex].specified_temperature))
	# Evaluate expression: Sutra_IsOverridenSurfaceSpecConcTempTop(ContourIndex, IsOverriden(Specified Temperature surfaces[LayerIndex].top elevation))
	# Evaluate expression: Sutra_IsOverridenSurfaceSpecConcTempBottom(ContourIndex, IsOverriden(Specified Temperature surfaces[LayerIndex].bottom elevation))
	# End loop
	# End if
	# End loop
	# End if
	# 
	# End if
	Set Variable: ReMakeICS:= (@cbExportICS2@ | @cbExportICS3@) & (@rgInitialValues@ != 3)
#	If: ok & ContinueSimulation & (@cbExportNBI@ | @cbExport8D@ | @cbExport14B@ | @cbExport15B@ | @cbExport17@ | @cbExport18@ | @cbExport19@ | @cbExport20@ | @cbExport22@ | ReMakeICS)
	If: ok & ContinueSimulation & (@cbExport8D@ | @cbExport14B@ | @cbExport15B@ | @cbExport17@ | @cbExport18@ | @cbExport19@ | @cbExport20@ | @cbExport22@ | ReMakeICS)
		Set Variable: ContinueSimulation:= Sutra_ProgressBarSetMessage("Creating Virtual Mesh")
		Set Variable: OK:= Sutra_MakeVMesh()
		If: !ok
			Alert: "Error while creating virtual mesh"
		End if
	End if
	# 
Else
	If: Alert<2
		Loop for: Objects in layer: Sources of Fluid
			If: ok&ContinueSimulation
				If: (total_source=$N/A)&(specific_source=$N/A)
					Set Variable: OK:= 0
					Alert: "You must set the total source or the specific source for every object on the Sources of Fluid layer."
				End if
				If: @rbSoluteVarDens@|@rbSoluteConstDens@
					If: concentration_of_source=$N/A
						Set Variable: OK:= 0
						Alert: "You must set the concentration_of_source for every object on the Sources of Fluid layer."
					End if
				Else
					If: temperature_of_source=$N/A
						Set Variable: OK:= 0
						Alert: "You must set the temperature_of_source for every object on the Sources of Fluid layer."
					End if
				End if
			End if
		End loop
		If: @rbSoluteVarDens@|@rbSoluteConstDens@
			Loop for: Objects in layer: Sources of Solute
				If: ok&ContinueSimulation
					If: (total_source=$N/A)&(specific_source=$N/A)
						Set Variable: OK:= 0
						Alert: "You must set the total source or the specific source for every object on the Sources of Fluid layer."
					End if
				End if
			End loop
		Else
			Loop for: Objects in layer: Sources of Energy
				If: ok&ContinueSimulation
					If: (total_source=$N/A)&(specific_source=$N/A)
						Set Variable: OK:= 0
						Alert: "You must set the total source or the specific source for every object on the Sources of Energy layer."
					End if
				End if
			End loop
		End if
		If: StateVariableType=1
			Loop for: Objects in layer: Specified Hydraulic Head
				If: ok&ContinueSimulation
					If: specified_hydraulic_head=$N/A
						Set Variable: OK:= 0
						Alert: "You must set the specified_hydraulic_head for every object on the Specified Hydraulic Head layer."
					End if
				End if
			End loop
		Else
			Loop for: Objects in layer: Specified Pressure
				If: ok&ContinueSimulation
					If: specified_pressure=$N/A
						Set Variable: OK:= 0
						Alert: "You must set the specified_pressure for every object on the Specified Pressure layer."
					End if
				End if
			End loop
		End if
	End if
	If: @rbSoluteVarDens@|@rbSoluteConstDens@
		Loop for: Objects in layer: Specified Concentration
			If: ok&ContinueSimulation
				If: specified_concentration=$N/A
					Set Variable: OK:= 0
					Alert: "You must set the specified_concentration for every object on the Specified Concentration layer."
				End if
			End if
		End loop
	Else
		Loop for: Objects in layer: Specified Temperature
			If: ok&ContinueSimulation
				If: specified_temperature=$N/A
					Set Variable: OK:= 0
					Alert: "You must set the specified_temperature for every object on the Specified Temperature layer."
				End if
			End if
		End loop
	End if
	If: ok&ContinueSimulation
		Set Variable: XCoordList:= Sutra_L_CreateNewList()
		Set Variable: YCoordList:= Sutra_L_CreateNewList()
		Loop for: Nodes
			Evaluate expression: Sutra_L_AddToList(XCoordList,PositionX())
			Evaluate expression: Sutra_L_AddToList(YCoordList,PositionY())
		End loop
		Set Variable: Epsilon:= 1e-13
		Set Variable: NodeCount:= NumNodes()
		If: NodeCount>0
			Set Variable: MinX:= Sutra_L_GetFromList(XCoordList,0)
			Set Variable: MaxX:= Sutra_L_GetFromList(XCoordList,0)
			Set Variable: MinY:= Sutra_L_GetFromList(YCoordList,0)
			Set Variable: MaxY:= Sutra_L_GetFromList(YCoordList,0)
			Loop for: Variable NodeIndex from: 1 to: NodeCount-1 step: 1
				Set Variable: XPosition:= Sutra_L_GetFromList(XCoordList,NodeIndex)
				Set Variable: YPosition:= Sutra_L_GetFromList(YCoordList,NodeIndex)
				If: XPosition>MaxX
					Set Variable: MaxX:= XPosition
				End if
				If: XPosition<MinX
					Set Variable: MinX:= XPosition
				End if
				If: YPosition>MaxY
					Set Variable: MaxY:= YPosition
				End if
				If: YPosition<MinY
					Set Variable: MinY:= YPosition
				End if
			End loop
		End if
	End if
End if
# 
If: ok&ContinueSimulation
	If: SutraDimensions=2
		# Warnings about potential trouble
		If: Alert<1
			# 
			# See if the bandwidth has been optimised
			Set Variable: NodeToBandwidthRatio:= NumNodes()/BandWidth(1)
			If: NodeToBandwidthRatio<2.5
				Set Variable: ok:= IsOK("The matrix bandwidth relative to the number of nodes is large.  You may not have optimized the bandwidth under the menu 'Special', option 'Renumber'?  SUTRA may take a long time to run or run out of memory. (Node:Bandwidth ratio = "+NodeToBandwidthRatio+".) Do you wish to run Sutra?")
				If: IsNAN(ok)
					Alert: "Error: OkCancel PIE not installed."
					Alert: "The matrix bandwidth relative to the number of nodes is large.  Have you optimized the bandwidth under the menu 'Special', option 'Renumber'?  SUTRA may take a long time to run or run out of memory. (Node:Bandwidth ratio = "+NodeToBandwidthRatio+")"
					Set Variable: ok:= 1
				End if
			End if
			If: ok
				# Check for multiple boundary conditions for the same nodes
				#  PBC = Specified pressure
				#  QIN = Fluid Source
				Set Variable: CountInvalidPBCandQIN:= CountNodes(if(isna(SUTRA Mesh.PBC),0,1)+if(isna(SUTRA Mesh.QIN),0,1)>1)
				If: CountInvalidPBCandQIN!=0
					Set Variable: InValidOutput:= 0
					Alert: "Both a specified pressure or head and a fluid source were defined for "+CountInvalidPBCandQIN+" nodes. Check for overlap in objects for layers 'Specified Pressure/Head' and 'Sources of Fluid'."
				End if
				# 
				# Check for multiple boundary conditions for the same nodes
				#  UBC  = Specified Concentration|Temperature
				#  QUIN = Solute|Energy Source
				Set Variable: CountInvalidUBCandQUIN:= CountNodes(if(isna(SUTRA Mesh.UBC),0,1)+if(isna(SUTRA Mesh.QUIN),0,1)>1)
				If: CountInvalidUBCandQUIN!=0
					# Set Variable: InValidOutput:= 2
					Set Variable: InValidOutput:= 0
					Alert: "Both a specified concentration or temperature and an energy or solute source were defined for "+CountInvalidUBCandQUIN+" nodes. Check for overlap in objects for layers 'Specified Concentration/Temperature' and 'Sources of Solute/Energy'."
				End if
				Set Variable: InvalidSourcesCount:= 0
				Redirect output to: InvalidSourcesLocations.txt
					If: SutraDimensions=2
						Loop for: Objects in layer: Sources of Fluid
							If: ContourType()<3
								Set Variable: VertexCount:= NumVertices()
								Loop for: Variable VertexIndex from: 1 to: VertexCount step: 1
									Set Variable: XPosition:= NthVertexX(VertexIndex)
									Set Variable: YPosition:= NthVertexY(VertexIndex)
									Set Variable: VertexFound:= 0
									Loop for: Variable NodeIndex from: 0 to: NodeCount-1 step: 1
										Set Variable: NodeX:= Sutra_L_GetFromList(XCoordList,NodeIndex)
										Set Variable: SameX:= 0
										If: NodeX=XPosition
											Set Variable: SameX:= 1
										Else
											If: (NodeX-XPosition)/(NodeX+XPosition+Epsilon)<Epsilon
												Set Variable: SameX:= 1
											End if
										End if
										If: SameX
											Set Variable: NodeY:= Sutra_L_GetFromList(YCoordList,NodeIndex)
											Set Variable: SameY:= 0
											If: NodeY=YPosition
												Set Variable: SameY:= 1
											Else
												If: (NodeY-YPosition)/(NodeY+YPosition+Epsilon)<Epsilon
													Set Variable: SameY:= 1
												End if
											End if
											If: SameY
												Set Variable: VertexFound:= 1
											End if
										End if
									End loop
									If: !VertexFound
										Set Variable: InvalidSourcesCount:= InvalidSourcesCount + 1
										Start a new line
											Export expression: "Warning: Source of fluid at " [G0]
											Export expression: XPosition [G0]
											Export expression: ", " [G0]
											Export expression: YPosition [G0]
											Export expression: " is not at a node. It will not be included as a source of fluid in the SUTRA model." [G0]
										End line
									End if
								End loop
							End if
						End loop
					End if
				End file
				If: InvalidSourcesCount
					Set Variable: InValidOutput:= 0
					Alert: "Warning: " + InvalidSourcesCount + " objects on the 'Sources of Fluid' layer were not at nodes. They will not be included as a source of fluid in the SUTRA model. See InvalidSourcesLocations.txt for details."
				End if
				If: @adeNOBCYC@=0
					Loop for: Objects in layer: Observation
						Set Variable: ObservationContourCount:= ObservationContourCount+1
					End loop
				End if
				If: ObservationContourCount
					Set Variable: InValidOutput:= 0
					Alert: "There are " + ObservationContourCount + " contours on the 'Observation' layer but NOBCYC has been set to 0 so no observations will be used.  NOBCYC can be changed in the Output Controls pane of the SUTRA Project Information"
				End if
			End if
		End if
		# 
		# Warnings about big trouble, do not export mesh and do write to log file
		If: (Alert<2)&ok
			# 
			# Check for fluid sources with unspecified concentrations/temperatures
			Set Variable: CountMissingSources:= CountNodes(IsNumber(SUTRA Mesh.QIN) & isna(SUTRA Mesh.UIN))
			If: CountMissingSources!=0
				Set Variable: InValidOutput:= 3
				Alert: "No concentration or temperature is specified for at least one fluid source object ("+CountMissingSources+" nodes). Check layer 'Sources of Fluid' for parameter 'concentration_of_source', or layer 'Sources of Energy' for parameter 'temperature_of_source'.\n\nNo SUTRA data has been exported! See the log file sutra.log for details."
			End if
			Set Variable: CountMissingSources2:= CountNodes(IsNumber(SUTRA Mesh.PBC) & isna(SUTRA Mesh.pUBC))
			If: CountMissingSources2!=0
				Set Variable: InValidOutput:= 4
				Alert: "No concentration/temperature is specified for at least one specified head or pressure object ("+CountMissingSources2+" nodes). Check layer 'Specified Head' for parameter 'concentration', or layer 'Specified Pressure' for parameter 'concentration' or 'temperature'.\n\nNo SUTRA data has been exported! See the log file sutra.log for details."
			End if
			# 
			# Check for multiple kinds of source for the same nodes in the same layer
			Set Variable: CountInvalidSources:= CountNodes(if(isna(Sources of Fluid.specific_source),0,1) + if(isna(Sources of Fluid.total_source),0,1)>1)
			If: CountInvalidSources!=0
				Set Variable: InValidOutput:= 5
				Alert: "In layer 'Sources of Fluid' both specific AND total sources are defined for at least one object ("+CountInvalidSources+" nodes). Only one type of source at a time can be used by SUTRA.\n\nNo SUTRA data has been exported! See the log file sutra.log for details."
			End if
			# 
			# Check for Well objects in layer 'Fluid Sources' using a specific source
			Set Variable: CountInvalidWellSources:= CountNodes(Sources of Fluid.specific_source & NodeAboveCntr(Sources of Fluid.specific_source)=1)
			# Set Variable: CountInvalidWellSources:= 1
			If: CountInvalidWellSources!=0
				Set Variable: InValidOutput:= 6
				If: CountInvalidWellSources=1
					Alert: "In layer 'Sources of Fluid' a well (point object) has been set with a value for 'specific_source'.  Use only 'total_source' for wells.\n\nNo SUTRA data has been exported!  See the log file sutra.log for details."
				Else
					Alert: "In layer 'Sources of Fluid' "+CountInvalidWellSources+" wells (point objects) have been set with a value for 'specific_source'.  Use only 'total_source' for wells.\n\nNo SUTRA data has been exported!  See the log file sutra.log for details."
				End if
			End if
			# 
			If: SumElements(Max(NthAngle(1),NthAngle(2),NthAngle(3),NthAngle(4))>=180.0,1)
				Alert: "One or more elements have angles greater than 180 degrees. SUTRA will not be able to run. You can locate the problem elements with the 'Edit|Select Acute Elements' menu item. \n\nNo SUTRA data has been exported!"
				Set Variable: InValidOutput:= 7
			End if
		End if
		# 
		# We would Check for Well objects that do not overlie nodes if we could
		# 
		If: ok
			# Don`t let User change MESH layer name
			If: LayerName()!="SUTRA Mesh"
				Set Variable: InValidOutput:= 5
				Alert: "Mesh Layer Name has been changed! The Mesh layer must be called 'SUTRA Mesh'.\n\nNo SUTRA data has been exported!"
			End if
			# 
			# Check that no "Sources of Fluid.concentration_of_source" = $N/A
			Set Variable: BadFluidSourceConc:= 0
			If: (transportConditions < 2) & (Alert < 2)
				Loop for: Objects in layer: Sources of Fluid
					If: IsNA(concentration_of_source)
						Set Variable: BadFluidSourceConc:= 1
					End if
				End loop
			End if
			If: BadFluidSourceConc
				Alert: "Warning: One or more objects on 'Sources of Fluid' has a 'concentration_of_source' = $N/A"
			End if
		End if
	End if
End if
# ------------------------------------------------------------------------------
# Start writing output
# 
# If we passed through the error checks
If: !InValidOutput&ok
	# 
	# Write the SUTRA input dataset!
	Redirect output to: @edRoot@.inpe
		Set Variable: ContinueSimulation:= Sutra_ProgressBarSetMessage("Exporting Data Set 8A")
		Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
		# DATA SET #8A - OUTPUT CONTROLS AND OPTIONS
		Start a new line
			# NPRINT - Number of time steps between printed output
			Export expression: @adeNPRINT@; [G0]
			# KNODAL = 0  Cancels printout of nodewise data
			If: @cbCNODAL@
				Export expression: "'Y'"; [G0]
			Else
				Export expression: "'N'"; [G0]
			End if
			# KELMNT = 0 Cancels printout of elementwise data
			If: @cbCELMNT@
				Export expression: "'Y'"; [G0]
			Else
				Export expression: "'N'"; [G0]
			End if
			# KINCID = 0 Cancels printout of node incidences
			If: @cbCINCID@
				Export expression: "'Y'"; [G0]
			Else
				Export expression: "'N'"; [G0]
			End if
			# KINCID = 0 Cancels printout of node incidences
			If: @cbCVEL@
				Export expression: "'Y'"; [G0]
			Else
				Export expression: "'N'"; [G0]
			End if
			# KINCID = 0 Cancels printout of node incidences
			If: @cbCBUDG@
				Export expression: "'Y'"; [G0]
			Else
				Export expression: "'N'"; [G0]
			End if
			Export expression: "'Data Set 8A'"; [G0]
		End line
		Set Variable: ContinueSimulation:= Sutra_ProgressBarSetMessage("Exporting Data Set 8B")
		Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
		# DATA SET #8B - Output Controls and Options for UNIT K5 (Nodewise Results Listed in Columns)
		Start a new line
			Export expression: @adeNCOLPR@; [G0]
			If: SutraDimensions=2
				If: @cbNodeElementNumbers@
					Export expression: "'N' 'X' 'Y' 'P' 'U' 'S' '-'"; [G0]
				Else
					Export expression: "'X' 'Y' 'P' 'U' 'S' '-'"; [G0]
				End if
			Else
				If: @cbNodeElementNumbers@
					Export expression: "'N' 'X' 'Y'  'Z' 'P' 'U' 'S' '-'"; [G0]
				Else
					Export expression: "'X' 'Y'  'Z' 'P' 'U' 'S' '-'"; [G0]
				End if
			End if
			Export expression: "'Data Set 8B'"; [G0]
		End line
		Set Variable: ContinueSimulation:= Sutra_ProgressBarSetMessage("Exporting Data Set 8C")
		Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
		# DATA SET #8C:  Output Controls and Options for UNIT K6  (Velocities at Element Centroids Listed in Columns)
		Start a new line
			Export expression: @adeLCOLPR@; [G0]
			If: SutraDimensions=2
				If: @cbNodeElementNumbers@
					Export expression: "'E' 'X' 'Y' 'VX' 'VY' '-'"; [G0]
				Else
					Export expression: "'X' 'Y' 'VX' 'VY' '-'"; [G0]
				End if
			Else
				If: @cbNodeElementNumbers@
					Export expression: "'E' 'X' 'Y' 'Z' 'VX' 'VY' 'VZ' '-'"; [G0]
				Else
					Export expression: "'X' 'Y' 'Z' 'VX' 'VY' 'VZ' '-'"; [G0]
				End if
			End if
			Export expression: "'Data Set 8C'"; [G0]
		End line
	End file
	Set Variable: ContinueSimulation:= Sutra_ProgressBarSetMessage("Exporting Data Set 8D")
	# DATA SET #8D:  Output Controls and Options for UNIT K7 (Observation Node Results Listed in Columns)
	If: ok&ContinueSimulation&@cbExport8D@
		If: SutraDimensions=2
			Redirect output to: @edRoot@.inp8D
				If: @adeNOBCYC@!=0
					Start a new line
						# NOBCYC - number of time steps between making
						# observations at specified nodes
						Export expression: @adeNOBCYC@; [G0]
					End line
						Loop for: Nodes
							Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
							If: ok&ContinueSimulation
								If: (SUTRA Mesh.INOB>0)
									Set Variable: ObservationCount:= ObservationCount + 1
					Start a new line
									Export expression: NodeNumber(); [G0]
					End line
								End if
							End if
						End loop
					Start a new line
						Export expression: 0; [G0]
						Export expression: "'Data Set 8D'"; [G0]
					End line
				Else
					Set Variable: ObservationCount2:= 0
					Loop for: Objects in layer: Observation
						If: ObservationCount2=0
							Set Variable: ObservationCount2:= 1
						End if
					End loop
					If: ObservationCount2>0
						Set Variable: OK:= IsOK("Although there are contours on the 'Observations' layer, You have set NOBCYC to 0 so no observations will be used. Do you want to continue anyway?")
					End if
				End if
			End file
		Else
			Set Variable: ObservationCount2:= 0
			If: @adeNOBCYC@ > 0
				Set Variable: ObservationCount:= Sutra_DataSet8D("@edRoot@.inp8D")
			Else
				Set Variable: ObservationCount:= 0
				Redirect output to: @edRoot@.inp8D
					Start a new line
						Export expression: "# Data Set 8D" [G0]
					End line
				End file
				Set Variable: BoundaryLayerCount:= Sutra_GetBoundaryCount(1,5)
				If: (BoundaryLayerCount>0)&(ObservationCount2=0)
					Loop for: Variable LayerIndex from: 1 to: BoundaryLayerCount step: 1
						If: !IsLayerEmpty(Observation Solids[LayerIndex])
							Set Variable: ObservationCount2:= 1
						End if
					End loop
				End if
				Set Variable: BoundaryLayerCount:= Sutra_GetBoundaryCount(2,5)
				If: (BoundaryLayerCount>0)&(ObservationCount2=0)
					Loop for: Variable LayerIndex from: 1 to: BoundaryLayerCount step: 1
						If: !IsLayerEmpty(Observation Points[LayerIndex])
							Set Variable: ObservationCount2:= 1
						End if
					End loop
				End if
				Set Variable: BoundaryLayerCount:= Sutra_GetBoundaryCount(3,5)
				If: (BoundaryLayerCount>0)&(ObservationCount2=0)
					Loop for: Variable LayerIndex from: 1 to: BoundaryLayerCount step: 1
						If: !IsLayerEmpty(Observation Lines[LayerIndex])
							Set Variable: ObservationCount2:= 1
						End if
					End loop
				End if
				Set Variable: BoundaryLayerCount:= Sutra_GetBoundaryCount(4,5)
				If: (BoundaryLayerCount>0)&(ObservationCount2=0)
					Loop for: Variable LayerIndex from: 1 to: BoundaryLayerCount step: 1
						If: !IsLayerEmpty(Observation Sheets Vertical[LayerIndex])
							Set Variable: ObservationCount2:= 1
						End if
					End loop
				End if
				Set Variable: BoundaryLayerCount:= Sutra_GetBoundaryCount(5,5)
				If: (BoundaryLayerCount>0)&(ObservationCount2=0)
					Loop for: Variable LayerIndex from: 1 to: BoundaryLayerCount step: 1
						If: !IsLayerEmpty(Observation Sheets Slanted[LayerIndex])
							Set Variable: ObservationCount2:= 1
						End if
					End loop
				End if
			End if
			Set Variable: OK:= (ObservationCount>-1)
			If: ok
				If: ObservationCount2>0
					Set Variable: OK:= IsOK("Although there are contours on one or more of the Observation layers, you have set NOBCYC to 0 so no observations will be used. Do you want to continue?")
				End if
			Else
				Alert: "Error while exporting data set 8D"
			End if
			Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
		End if
	End if
	Redirect output to: @edRoot@.inp9
		Set Variable: ContinueSimulation:= Sutra_ProgressBarSetMessage("Exporting Data Set 9")
		Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
		If: ok&ContinueSimulation
			# DATA SET #9 - FLUID PROPERTIES
			Start a new line
				# COMPFL - fluid compressibility
				Export expression: @adeCOMPFL@; [G0]
				# CW - Specific heat (leave blank for solute transport)
				Export expression: @adeCW@; [G0]
				# SIGMAW
				# - For solute: diffusivity of solute in fluid including tortuosity
				# - For energy: thermal conductivity of fluid
				Export expression: @adeSIGMAW@; [G0]
				# RHOW0 - Base fluid density
				Export expression: @adeRHOW0@; [G0]
				# URHOW0 - temperature/concentration at  RHOW0
				Export expression: @adeURHOW0@; [G0]
				# DRWDU - coefficient of density change with respect to
				# concentration/temperature
				Export expression: @adeDRWDU@; [G0]
				# VISC0
				# - for solute transport: FLUID VISCOSITY
				# - for energy transport: scales from MKS units to units of choice
				Export expression: @adeVISC0@; [G0]
				Export expression: "'Data Set 9'"; [G0]
			End line
		End if
		Set Variable: ContinueSimulation:= Sutra_ProgressBarSetMessage("Exporting Data Set 10")
		Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
		If: ok&ContinueSimulation
			# DATA SET #10 - SOLID MATRIX PROPERTIES
			Start a new line
				# COMPMA - Solid matrix compressibility
				Export expression: @adeCOMPMA@; [G0]
				# CS - Solid grain specific heat (leave blank for solute transport)
				Export expression: @adeCS@; [G0]
				# SIGMAS - Solid grain diffusivity
				# - For solute: leave blank
				# - For energy: thermal conductivity of grains
				Export expression: @adeSIGMAS@; [G0]
				# RHOS - Solid grain density
				Export expression: @adeRHOS@; [G0]
				Export expression: "'Data Set 10'"; [G0]
			End line
		End if
		Set Variable: ContinueSimulation:= Sutra_ProgressBarSetMessage("Exporting Data Set 11")
		Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
		If: ok&ContinueSimulation
			# DATA SET #11 - ADSORPTION PARAMETERS
			Start a new line
				# ADSMOD - For no sorption or energy transport enter "      NONE",
				#   and leave the remaining items in Data Set #10 blank
				# for linear sorption enter                          "    LINEAR",
				# for Freundlich sorption enter                      "FREUNDLICH",
				# for Langmuir sorption enter                        "  LANGMUIR"
				If: @comboADSMOD@=0
					Export expression: "'NONE'"; [G0]
				End if
				If: @comboADSMOD@=1
					Export expression: "'LINEAR'"; [G0]
				End if
				If: @comboADSMOD@=2
					Export expression: "'LANGMUIR'"; [G0]
				End if
				If: @comboADSMOD@=3
					Export expression: "'FREUNDLICH'"; [G0]
				End if
				# CHI1 - Value of linear, Freundlich or Langmuir distribution coefficient
				Export expression: @adeCHI1@; [G0]
				# CHI2 - Value of Freundlich or Langmuir coefficient
				Export expression: @adeCHI2@; [G0]
				Export expression: "'Data Set 11'"; [G0]
			End line
		End if
		Set Variable: ContinueSimulation:= Sutra_ProgressBarSetMessage("Exporting Data Set 12")
		Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
		If: ok&ContinueSimulation
			# DATA SET #12 - PRODUCTION OF ENERGY OR SOLUTE MASS
			Start a new line
				# PRODFO - zero-order rate of production in fluid for energy
				# or solute mass
				Export expression: @adePRODF0@; [G0]
				# PRODSO -  zero-order rate of production in the immobile phase
				# for energy or adsorbate mass
				Export expression: @adePRODS0@; [G0]
				# PRODF1 - first-order rate of solute mass production in fluid
				# (leave blank for energy transport)
				Export expression: @adePRODF1@; [G0]
				# PRODS1 - first-order rate of production of adsorbate mass in
				# immobile phase (leave blank for energy transport)
				Export expression: @adePRODS1@; [G0]
				Export expression: "'Data Set 12'"; [G0]
			End line
		End if
		Set Variable: ContinueSimulation:= Sutra_ProgressBarSetMessage("Exporting Data Set 13")
		Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
		If: ok&ContinueSimulation
			# DATA SET #13 - ORIENTATION OF COORDINATES TO GRAVITY
			Start a new line
				# GRAVX - component of gravity vector in +x direction
				Export expression: @adeGRAVX@; [G0]
				# GRAVY - component of gravity vector in +y direction
				Export expression: @adeGRAVY@; [G0]
				# GRAVY - component of gravity vector in +z direction
				Export expression: @adeGRAVZ@; [G0]
				Export expression: "'Data Set 13'"; [G0]
			End line
		End if
		Set Variable: ContinueSimulation:= Sutra_ProgressBarSetMessage("Exporting Data Set 14A")
		Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
		If: ok&ContinueSimulation
			# DATA SET #14A - SCALE FACTORS FOR NODEWISE DATA
			Start a new line
				Export expression: "'NODE'"; [G0]
				# SCALX - multiplier to scale x-coordinates in DATA SET#14B
				Export expression: 1.; [G0]
				# SCALY - multiplier to scale y-coordinates in DATA SET#14B
				Export expression: 1.; [G0]
				# SCALZ - multiplier to scale z-coordinates in DATA SET#14B
				Export expression: 1.; [G0]
				# PORFAC - multiplier to scale porosity in DATA SET #14B
				Export expression: 1.; [G0]
				Export expression: "'Data Set 14A'"; [G0]
			End line
		End if
		Set Variable: ContinueSimulation:= Sutra_ProgressBarSetMessage("Exporting Data Set 14B")
	End file
	If: ok&ContinueSimulation&@cbExport14B@
		# DATA SET 14B - NODEWISE DATA
		If: SutraDimensions=2
			Redirect output to: @edRoot@.inp14B
				Loop for: Nodes
					Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
					If: ok&ContinueSimulation
						Start a new line
							Export expression: NodeNumber(); [G0]
							If: IsNumber(SUTRA Mesh.NREG)
								Export expression: SUTRA Mesh.NREG; [G0]
							Else
								Export expression: 0; [G0]
							End if
							Export expression: PositionX(); [G0]
							Export expression: PositionY(); [G0]
							Export expression: SUTRA Mesh.Z; [G0]
							Export expression: SUTRA Mesh.POR; [G0]
							Export expression: "'Data Set 14B'"; [G0]
						End line
					End if
				End loop
			End file
		Else
			If: ok&ContinueSimulation
				Set Variable: ok:= Sutra_DataSet14B("@edRoot@.inp14B")
				If: !ok
					Alert: "Error while exporting data set 14B"
				End if
				Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
			End if
		End if
	End if
	Set Variable: ContinueSimulation:= Sutra_ProgressBarSetMessage("Exporting Data Set 15A")
	Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
	Redirect output to: @edRoot@.inp15A
		If: ok&ContinueSimulation
			# DATA SET #15A - SCALE FACTORS FOR ELEMENTWISE DATA
			Start a new line
				Export expression: "'ELEMENT'"; [G0]
				# PMAXFA - multiplier for maximum permeability in DATA SET #15B
				Export expression: 1.; [G0]
				If: SutraDimensions=3
					# PMIDFA
					Export expression: 1.; [G0]
				End if
				# PMINFA - multiplier for minimum permeability in DATA SET #15B
				Export expression: 1.; [G0]
				# ANG1FA - multiplier for ANGLEX in DATA SET #15B
				Export expression: 1.; [G0]
				If: SutraDimensions=3
					# ANG2FA
					Export expression: 1.; [G0]
					# ANG3FA
					Export expression: 1.; [G0]
				End if
				# ALMAXF - multiplier for longitudinal dispersivity in maximum
				# permeability direction in DATA SET #15B
				Export expression: 1.; [G0]
				If: SutraDimensions=3
					# ALMIDF
					Export expression: 1.; [G0]
				End if
				# ALMINF - multiplier for longitudinal dispersivity in minimum
				# permeability direction in DATA SET #15B
				Export expression: 1.; [G0]
				# AT1MXF - multiplier for transverse dispersivity in maximum
				# permeability direction in DATA SET #15B
				Export expression: 1.; [G0]
				If: SutraDimensions=3
					# AT1MDF
					Export expression: 1.; [G0]
				End if
				# AT1MNF - multiplier for transverse dispersivity in minimum
				# permeability direction in DATA SET #15B
				Export expression: 1.; [G0]
				If: SutraDimensions=3
					# AT2MXF
					Export expression: 1.; [G0]
					# AT2MDF
					Export expression: 1.; [G0]
					# AT2MNF
					Export expression: 1.; [G0]
				End if
				Export expression: "'Data Set 15A'"; [G0]
			End line
		End if
		Set Variable: ContinueSimulation:= Sutra_ProgressBarSetMessage("Exporting Data Set 15B")
	End file
	If: ok&ContinueSimulation&@cbExport15B@
		# DATA SET #15B - ELEMENTWISE DATA
		If: SutraDimensions=2
			Redirect output to: @edRoot@.inp15B
				Loop for: Elements
					Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
					If: ok&ContinueSimulation
						Start a new line
							Export expression: ElementNumber(); [G0]
							If: IsNumber(SUTRA Mesh.LREG)
								Export expression: SUTRA Mesh.LREG; [G0]
							Else
								Export expression: 0; [G0]
							End if
							Export expression: SUTRA Mesh.PMAX; [G0]
							Export expression: SUTRA Mesh.PMIN; [G0]
							Export expression: SUTRA Mesh.ANGLE1; [G0]
							Export expression: SUTRA Mesh.ALMAX; [G0]
							Export expression: SUTRA Mesh.ALMIN; [G0]
							Export expression: SUTRA Mesh.AT1MAX; [G0]
							Export expression: SUTRA Mesh.AT1MIN; [G0]
							Export expression: "'Data Set 15B'"; [G0]
						End line
					End if
				End loop
			End file
		Else
			If: ok&ContinueSimulation
				Set Variable: ok:= Sutra_DataSet15B("@edRoot@.inp15B")
				If: !ok
					Alert: "Error while exporting data set 15B"
				End if
				Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
			End if
		End if
	End if
	# 
	# DATA SET #16 - DATA FOR PRINTER PLOT - OMITTED
	# 
	Set Variable: ContinueSimulation:= Sutra_ProgressBarSetMessage("Exporting Data Set 17")
	If: ok&ContinueSimulation&@cbExport17@
		# DATA SET #17 - DATA FOR FLUID SOURCES AND SINKS
		If: SutraDimensions=2
			Redirect output to: @edRoot@.inp17
				Loop for: Nodes
					Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
					If: ok&ContinueSimulation
						If: IsNumber(SUTRA Mesh.QIN)
							Set Variable: FluidSourceCount:= FluidSourceCount + 1
							Start a new line
								# if time-dependent, set node value to negative
								If: SUTRA Mesh.time_dependent_fluid_sources
									Export expression: -NodeNumber(); [G0]
								Else
									Export expression: NodeNumber(); [G0]
								End if
								Export expression: SUTRA Mesh.QIN; [G14]
								If: SUTRA Mesh.QIN>=0
									If: IsNumber(SUTRA Mesh.UIN)
										Export expression: SUTRA Mesh.UIN; [G14]
									Else
										Export expression: 0; [G0]
									End if
								End if
								Export expression: "'Data Set 17'"; [G0]
							End line
						End if
					End if
				End loop
				If: FluidSourceCount > 0
					If: ok&ContinueSimulation
						Start a new line
							Export expression: 0 [I1]
							Export expression: " ' Data Set 17'"; [G0]
						End line
					End if
				End if
			End file
			# 				End if
		Else
			# 
			Set Variable: FluidSourceCount:= Sutra_DataSet17("@edRoot@.inp17")
			Set Variable: OK:= (FluidSourceCount>-1)
			If: !ok
				Alert: "Error while exporting data set 17"
			End if
			Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
		End if
	End if
	# 
	Set Variable: ContinueSimulation:= Sutra_ProgressBarSetMessage("Exporting Data Set 18")
	If: ok&ContinueSimulation&@cbExport18@
		# DATA SET #18 DATA FOR ENERGY OR SOLUTE MASS SOURCES AND SINKS
		If: SutraDimensions=2
			Redirect output to: @edRoot@.inp18
				Loop for: Nodes
					Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
					If: ok&ContinueSimulation
						If: IsNumber(SUTRA Mesh.QUIN)
							Set Variable: SoluteEnergyCount:= SoluteEnergyCount + 1
							Start a new line
								# if time-dependent, set node value to negative
								If: SUTRA Mesh.time_dependent_energy_or_solute_sources
									Export expression: -NodeNumber(); [G0]
								Else
									Export expression: NodeNumber(); [G0]
								End if
								Export expression: SUTRA Mesh.QUIN; [G0]
								Export expression: " 'Data Set 18'"; [G0]
							End line
						End if
					End if
				End loop
				If: SoluteEnergyCount>0
					If: ok&ContinueSimulation
						Start a new line
							Export expression: 0 [I1]
							Export expression: " 'Data Set 18'"; [G0]
						End line
					End if
				End if
				# 				End if
			End file
		Else
			Set Variable: SoluteEnergyCount:= Sutra_DataSet18("@edRoot@.inp18")
			Set Variable: OK:= (SoluteEnergyCount>-1)
			If: !ok
				Alert: "Error while exporting data set 18"
			End if
			Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
		End if
		# 
	End if
	Set Variable: ContinueSimulation:= Sutra_ProgressBarSetMessage("Exporting Data Set 19")
	If: ok&ContinueSimulation&@cbExport19@
		# DATA SET #19 - DATA FOR SPECIFIED PRESSURE NODES
		If: SutraDimensions=2
			Redirect output to: @edRoot@.inp19
				Loop for: Nodes
					Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
					If: ok&ContinueSimulation
						If: IsNumber(SUTRA Mesh.PBC)
							Set Variable: SpecifiedPressureCount:= SpecifiedPressureCount + 1
							Start a new line
								# if time-dependent, set node value to negative
								If: SUTRA Mesh.time_dependent_specified_head_or_pressure
									Export expression: -NodeNumber(); [G0]
								Else
									Export expression: NodeNumber(); [G0]
								End if
								Export expression: SUTRA Mesh.PBC; [G0]
								Export expression: SUTRA Mesh.pUBC; [G0]
								Export expression: "' Data Set 19'"; [G0]
							End line
						End if
					End if
				End loop
				If: SpecifiedPressureCount>0
					If: ok&ContinueSimulation
						Start a new line
							Export expression: 0 [I1]
							Export expression: " 'Data Set 19'"; [G0]
						End line
					End if
				End if
			End file
		Else
			Set Variable: SpecifiedPressureCount:= Sutra_DataSet19("@edRoot@.inp19")
			Set Variable: OK:= (SpecifiedPressureCount>-1)
			If: !ok
				Alert: "Error while exporting data set 19"
			End if
			Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
		End if
	End if
	Set Variable: ContinueSimulation:= Sutra_ProgressBarSetMessage("Exporting Data Set 20")
	If: ok&ContinueSimulation&@cbExport20@
		# DATA SET #20 DATA FOR SPECIFIED CONCENTRATION OR TEMPERATURE NODES
		If: SutraDimensions=2
			Redirect output to: @edRoot@.inp20
				Set Variable: SpecTempConcCount:= 0
				Loop for: Nodes
					Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
					If: ok&ContinueSimulation
						If: IsNumber(SUTRA Mesh.UBC)
							Set Variable: SpecTempConcCount:= SpecTempConcCount + 1
							Start a new line
								# if time-dependent, set node value to negative
								If: SUTRA Mesh.time_dependent_specified_concentration_or_temperature
									Export expression: -NodeNumber(); [G0]
								Else
									Export expression: NodeNumber(); [G0]
								End if
								Export expression: SUTRA Mesh.UBC; [G0]
								Export expression: "' Data Set 20'"; [G0]
							End line
						End if
					End if
				End loop
				If: SpecTempConcCount>0
					If: ok&ContinueSimulation
						Start a new line
							Export expression: 0 [G0]
							Export expression: " 'Data Set 20'"; [G0]
						End line
					End if
				End if
				# 				End if
			End file
		Else
			Set Variable: SpecTempConcCount:= Sutra_DataSet20("@edRoot@.inp20")
			Set Variable: OK:= (SpecTempConcCount>-1)
			If: !ok
				Alert: "Error while exporting data set 20"
			End if
			Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
		End if
	End if
	# 
	# DATA SET #21 DATA FOR OBSERVATION NODES (moved to 9)
	# 
	Set Variable: ContinueSimulation:= Sutra_ProgressBarSetMessage("Exporting Data Set 22")
	If: ok&ContinueSimulation&@cbExport22@
		# DATA SET #22 ELEMENT INDICES
		If: SutraDimensions=2
			Redirect output to: @edRoot@.inp22
				If: ok&ContinueSimulation
					Start a new line
						Export expression: "'INCIDENCE'"; [G0]
					End line
					Loop for: Elements
						Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
						If: ok&ContinueSimulation
							Start a new line
								Export expression: ElementNumber(); [G0]
								Export expression: NthNodeNum(1); [G0]
								Export expression: NthNodeNum(2); [G0]
								Export expression: NthNodeNum(3); [G0]
								Export expression: NthNodeNum(4); [G0]
								Export expression: "' Data Set 22'"; [G0]
							End line
						End if
					End loop
				End if
			End file
		Else
			If: ok&ContinueSimulation
				Set Variable: ok:= Sutra_DataSet22(("@edRoot@.inp22"))
				If: !ok
					Alert: "Error while exporting data set 22"
				End if
				Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
			End if
		End if
	End if
	# 	End file
	If: ok&ContinueSimulation
		Redirect output to: @edRoot@.inp1
			Set Variable: ContinueSimulation:= Sutra_ProgressBarSetMessage("Exporting Data Set 1")
			Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
			If: ok&ContinueSimulation
				# DATA SET #1 - OUTPUT HEADING
				# Enter 2 title lines; each line cannot be more than 80 characters
				Start a new line
					Export expression: "@edTitle1@" [G80]
				End line
				Start a new line
					Export expression: "@edTitle2@" [G80]
				End line
			End if
			Set Variable: ContinueSimulation:= Sutra_ProgressBarSetMessage("Exporting Data Set 2A")
			Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
			If: ok&ContinueSimulation
				# DATA SET #2A - INPUT DATA HEADING - CHOOSE "ENERGY" OR "SOLUTE TRANSPORT"
				Start a new line
					Export expression: "# Data Set 2A" [G0]
				End line
				Start a new line
					# Enter either "SUTRA SOLUTE TRANSPORT" or "SUTRA ENERGY TRANSPORT"
					If: @rbSoluteVarDens@|@rbSoluteConstDens@
						Export expression: "'SUTRA SOLUTE TRANSPORT'" [G0]
					Else
						Export expression: "'SUTRA ENERGY TRANSPORT'" [G0]
					End if
				End line
			End if
			Set Variable: ContinueSimulation:= Sutra_ProgressBarSetMessage("Exporting Data Set 2B")
			Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
			If: ok&ContinueSimulation
				# DATA SET #2B
				Start a new line
					Export expression: "# Data Set 2B" [G0]
				End line
				Start a new line
					If: SutraDimensions=2
						If: @rbFishnet@
							Export expression: "'2D REGULAR MESH'"; [G0]
							Export expression: Sutra_GetMeshXCount(); [G0]
							Export expression: Sutra_GetMeshYCount(); [G0]
						Else
							Export expression: "'2D IRREGULAR MESH'"; [G0]
						End if
					Else
						Export expression: "'3D REGULAR MESH'"; [G0]
						Set Variable: NN1:= Sutra_GetZCount()
						Set Variable: NN2:= Sutra_GetMeshXCount()
						Set Variable: NN3:= Sutra_GetMeshYCount()
						Export expression: NN1; [G0]
						Export expression: NN2; [G0]
						Export expression: NN3; [G0]
					End if
				End line
			End if
			Set Variable: ContinueSimulation:= Sutra_ProgressBarSetMessage("Exporting Data Set 3")
			Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
		End file
		Redirect output to: @edRoot@.inp3
			If: ok&ContinueSimulation
				# DATA SET #3 - SIMULATION CONTROL NUMBERS
				Start a new line
					Export expression: "# Data Set 3" [G0]
				End line
				Start a new line
					Export expression: NodeCount; [G0]
					Export expression: ElementCount; [G0]
					# If: SutraDimensions=2
					#	Export expression: 2*(BandWidth(1))+1; [G0]
					# Else
					#	If: @cbExportNBI@
					#		Export expression: Sutra_Bandwidth(); [G0]
					#	Else
					#		Export expression: NBI; [G0]
					#	End if
					# End if
					# 
					# Number of specified pressure nodes
					Export expression: SpecifiedPressureCount; [G0]
					# 
					# Number of specified concentration/temperature nodes
					Export expression: SpecTempConcCount; [G0]
					# 
					# Number of fluid source nodes
					Export expression: FluidSourceCount; [G0]
					# 
					# Number of solute flux or energy flux nodes
					Export expression: SoluteEnergyCount; [G0]
					# 
					# Number of observation nodes (set to zero for no observation nodes)
					If: @adeNOBCYC@
						Set Variable: CountObservationNodes:= ObservationCount
					Else
						Set Variable: CountObservationNodes:= 0
					End if
					Export expression: CountObservationNodes; [G0]
					# 
					# Maximum number of time steps on which observations will be made
					# (set to zero for no observations)
					# Export expression: @adeNTOBS@; [G0]
				End line
			End if
			Set Variable: ContinueSimulation:= Sutra_ProgressBarSetMessage("Exporting Data Set 4")
			Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
		End file
		Redirect output to: @edRoot@.inp4
			If: ok&ContinueSimulation
				# DATA SET #4 - SIMULATION MODES
				Start a new line
					Export expression: "# Data Set 4" [G0]
				End line
				Start a new line
					# IUNSAT=1 implies saturated/unsaturated flow
					# IUNSAT=0 implies saturated flow only
					If: @rbSatUnsat@
						Export expression: "'UNSATURATED'"; [G0]
					Else
						Export expression: "'SATURATED'"; [G0]
					End if
					# ISSFLOW=1 implies steady-state flow
					# ISSFLOW=0 implies transient flow
					If: @sicomboCSSFLO_and_CSSTRA@<=1
						Export expression: "'STEADY FLOW'"; [G0]
					Else
						Export expression: "'TRANSIENT FLOW'"; [G0]
					End if
					# ISSTRA=1 implies steady-state transport
					# ISSTRA=0 implies transient transport
					If: @sicomboCSSFLO_and_CSSTRA@=0
						Export expression: "'STEADY TRANSPORT'"; [G0]
					Else
						Export expression: "'TRANSIENT TRANSPORT'"; [G0]
					End if
					# IREAD=1  implies cold start
					# IREAD=-1 implies warm start
					If: @comboIREAD@=0
						Export expression: "'COLD'"; [G0]
					Else
						Export expression: "'WARM'"; [G0]
					End if
					# ISTORE=0  does not create restart file
					# ISTORE=# creates restart file every # time steps
					Export expression: @adeISTORE@ [I5]
				End line
			End if
			Set Variable: ContinueSimulation:= Sutra_ProgressBarSetMessage("Exporting Data Set 5")
			Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
			If: ok&ContinueSimulation
				# DATA SET #5 - NUMERICAL CONTROL PARAMETERS
				Start a new line
					Export expression: "# Data Set 5" [G0]
				End line
				Start a new line
					# UP=0 implies no upstream weighting
					# UP=1 implies full upstream weighting
					Export expression: @adeFracUpstreamWeight@; [G0]
					# GNUP - pressure boundary condition factor
					Export expression: @adeGNUP@; [G0]
					# GNUU - concentration/temperature boundary condition factor
					Export expression: @adeGNUU@; [G0]
				End line
			End if
			Set Variable: ContinueSimulation:= Sutra_ProgressBarSetMessage("Exporting Data Set 6")
			Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
			If: ok&ContinueSimulation
				Start a new line
					Export expression: "# Data Set 6" [G0]
				End line
				# DATA SET #6 - TEMPORAL CONTROL AND SOLUTION CYCLING
				Start a new line
					# ITMAX - Max allow time steps
					Export expression: @adeITMAX@; [G0]
					# DELT - Initial time step size in seconds
					Export expression: @adeDELT@; [G0]
					# TMAX - Max allowed simulation time in seconds
					Export expression: @adeTMAX@; [G0]
					# ITCYC - number of time steps in time step change cycle
					Export expression: @adeITCYC@; [G0]
					# DTMULT - Time step multiplier
					Export expression: @adeDTMULT@; [G0]
					# DTMAX - Max allowed time step size in seconds
					# The following if statement has been disabled at the request of Clifford Voss
					# If: @adeDTMULT@=1
					# 	Export expression: @adeDELT@; [G0]
					# Else
					Export expression: @adeDTMAX@; [G0]
					# End if
					# NPCYC - Number of time steps in pressure solution cycle
					Export expression: @adeNPCYC@; [G0]
					# NUCYC - Number of time stpes in concentration/temperature cycle
					Export expression: @adeNUCYC@; [G0]
				End line
			End if
			Set Variable: ContinueSimulation:= Sutra_ProgressBarSetMessage("Exporting Data Set 7A")
			Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
			If: ok&ContinueSimulation
				# DATA SET #7A - OUTPUT CONTROLS AND OPTIONS
				Start a new line
					Export expression: "# Data Set 7A" [G0]
				End line
				Start a new line
					If: @rbIterative@
						Export expression: "@adeITRMAX@"; [G0]
					Else
						Export expression: 1; [G0]
					End if
					Export expression: @adeRPMAX@; [G0]
					Export expression: @adeRUMAX@; [G0]
				End line
			End if
			Set Variable: ContinueSimulation:= Sutra_ProgressBarSetMessage("Exporting Data Set 7B")
			Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
			If: ok&ContinueSimulation
				# DATA SET #7B - OUTPUT CONTROLS AND OPTIONS
				Start a new line
					Export expression: "# Data Set 7B" [G0]
				End line
				Start a new line
					If: @rgPressureSolverNew@=0
						Export expression: "'DIRECT'"; [G0]
					End if
					#If: @rgPressureSolverNew@=1
					#	Export expression: "'CG'"; [G0]
					#End if
					#If: @rgPressureSolverNew@=2
					If: @rgPressureSolverNew@=1
						Export expression: "'GMRES'"; [G0]
					End if
					#If: @rgPressureSolverNew@=3
					If: @rgPressureSolverNew@=2
						Export expression: "'ORTHOMIN'"; [G0]
					End if
					If: @rgPressureSolverNew@!=0
						Export expression: @adeITRMXP@; [G0]
						# Export expression: @adeITOLP@; [G0]
						Export expression: @adeTOLP@; [G0]
						# Export expression: @adeNSAVEP@; [G0]
					End if
				End line
			End if
			Set Variable: ContinueSimulation:= Sutra_ProgressBarSetMessage("Exporting Data Set 7C")
			Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
			If: ok&ContinueSimulation
				# DATA SET #7C - OUTPUT CONTROLS AND OPTIONS
				Start a new line
					Export expression: "# Data Set 7C" [G0]
				End line
				Start a new line
					If: @rgTransportSolver@=0
						Export expression: "'DIRECT'"; [G0]
					End if
					# If: @rgTransportSolver@=1
					#	# Export expression: "'CG'"; [G0]
					#	Export expression: "'GMRES'"; [G0]
					# End if
					#If: @rgTransportSolver@=2
					If: @rgTransportSolver@=1
						# Export expression: "'GMRES'"; [G0]
						Export expression: "'ORTHOMIN'"; [G0]
					End if
					# If: @rgTransportSolver@=3
					If: @rgTransportSolver@=2
						# Export expression: "'ORTHOMIN'"; [G0]
					End if
					If: @rgTransportSolver@!=0
						Export expression: @adeITRMXU@; [G0]
						# Export expression: @adeITOLU@; [G0]
						Export expression: @adeTOLU@; [G0]
						# Export expression: @adeNSAVEU@; [G0]
					End if
				End line
			End if
		End file
	End if
	Set Variable: ContinueSimulation:= Sutra_ProgressBarSetMessage("Exporting Data Set 1 in ICS")
	Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
	If: ok&ContinueSimulation&!@comboIREAD@
		# Dataset 1.
		If: @cbStartTime@
			Set Variable: ok:= Sutra_JF_CopyLines("@edRestartFile@", "@edRoot@.ics", 1, 0)
		Else
			Redirect output to: @edRoot@.ics
				Set Variable: TSTART:= @adeTSART@
				Start a new line
					# Starting time - TSTART
					Set Variable: TSTART:= @adeTSART@
					# Alert: TSTART
					Export expression: TSTART; [G0]
				End line
			End file
		End if
		Set Variable: ContinueSimulation:= Sutra_ProgressBarSetMessage("Exporting Data Set 2 in ics")
		Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
		If: ok&ContinueSimulation&@cbExportICS2@
			# Dataset 2.
			If: SutraDimensions=2
				If: @rgInitialValues@=1|@rgInitialValues@=3
					Set Variable: ok:= Sutra_ReadICS2("@edRoot@.ics2",NodeCount)
				Else
					Redirect output to: @edRoot@.ics2
						Start a new line
							Export expression: "'NONUNIFORM'"; [G0]
						End line
						Loop for: Nodes
							Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
							If: ok&ContinueSimulation
								Start a new line
									If: ContinueSimulation
										Export expression: SUTRA Mesh.PVEC [4G20]
									End if
								End line
							End if
						End loop
					End file
				End if
			Else
				Set Variable: ok:= Sutra_DataSetICS2("@edRoot@.ics2")
				If: !ok
					Alert: "Error while exporting in initial conditions data set 2"
				End if
				Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
			End if
		End if
		Set Variable: ContinueSimulation:= Sutra_ProgressBarSetMessage("Exporting Data Set 3 in ics")
		If: ok&ContinueSimulation&@cbExportICS3@
			# Dataset 3.
			If: SutraDimensions=2
				If: @rgInitialValues@=2|@rgInitialValues@=3
					Set Variable: ok:= Sutra_ReadICS3("@edRoot@.ics3",NodeCount)
				Else
					Redirect output to: @edRoot@.ics3
						Start a new line
							Export expression: "'NONUNIFORM'"; [G0]
						End line
						Loop for: Nodes
							Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
							If: ok&ContinueSimulation
								Start a new line
									Export expression: SUTRA Mesh.UVEC [4G20]
								End line
							End if
						End loop
					End file
				End if
			Else
				Set Variable: ok:= Sutra_DataSetICS3("@edRoot@.ics3")
				If: !ok
					Alert: "Error while exporting in initial conditions data set 2"
				End if
				Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
			End if
		End if
	End if
	# 
	# File used be SUTRA to define filenames for input and output
	Set Variable: ContinueSimulation:= Sutra_ProgressBarSetMessage("Exporting SUTRA.FIL")
	Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
	If: ok&ContinueSimulation
		Redirect output to: SUTRA.FIL
			Start a new line
				Export expression: 50 [I5]
			End line
			Start a new line
				Export expression: "@edRoot@.inp" [G0]
			End line
			Start a new line
				Export expression: 55 [I5]
			End line
			Start a new line
				If: @comboIREAD@
					Export expression: "@framWarmRestart.edFilePath@" [G0]
				Else
					Export expression: "@edRoot@.ics" [G0]
				End if
			End line
			Start a new line
				Export expression: 60 [I5]
			End line
			Start a new line
				Export expression: "@edRoot@.lst" [G0]
			End line
			Start a new line
				Export expression: 66 [I5]
			End line
			Start a new line
				Export expression: "@edRoot@.rst" [G0]
			End line
			Start a new line
				Export expression: 30 [I5]
			End line
			Start a new line
				Export expression: "@edRoot@.nod" [G0]
			End line
			Start a new line
				Export expression: 40 [I5]
			End line
			Start a new line
				Export expression: "@edRoot@.ele" [G0]
			End line
			# 			If: CountObservationNodes>0
			Start a new line
				Export expression: 70 [I5]
			End line
			Start a new line
				Export expression: "@edRoot@.obs" [G0]
			End line
			# 			End if
		End file
		# 
		# batch file to run SUTRA
		Set Variable: ContinueSimulation:= Sutra_ProgressBarSetMessage("Exporting RUNSUTRA.BAT")
		Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
		If: ok&ContinueSimulation
			Redirect output to: RUNSUTRA.BAT
				Start a new line
					# Export expression: SUTRA_GetDirectory() + "SUTRA"
					Export expression: "echo on" [G0]
				End line
				Start a new line
					# Export expression: SUTRA_GetDirectory() + "SUTRA"
					Export expression: SutraPath [G0]
					If: Calibrate
						Export expression: " /wait" [G0]
					End if
				End line
				If: Calibrate
					Start a new line
						Export expression: GetMyDirectory() [G0]
						Export expression: "WaitForMe.exe" [G0]
					End line
					# Start a new line
					# 	Export expression: GetMyDirectory() [G0]
					# 	Export expression: "SelectChar.exe" [G0]
					# End line
				Else
					Start a new line
						Export expression: "Pause" [G0]
					End line
				End if
			End file
		End if
	End if
	# 
	# Write to log file
	# 
	If: !InvalidSourcesCount
		Evaluate expression: Sutra_Delete_File("InvalidSourcesLocations.txt")
	End if
Else
	# ERRORs, nothing exported!!!
	# 
	# Write to log file
	Set Variable: ContinueSimulation:= Sutra_ProgressBarSetMessage("Exporting log file")
	Redirect output to: @edRoot@.log
		If: CountInvalidPBCandQIN!=0
			Start a new line
				Export expression: "Both a specified pressure or head and a fluid Source are defined for" [G0]
			End line
			Start a new line
				Export expression: CountInvalidPBCandQIN+" nodes.  Check for overlap in the layers 'Sources of Fluid' and" [G0]
			End line
			Start a new line
				Export expression: "'Specified Pressure/Head'." [G0]
			End line
			Start a new line
			End line
			Start a new line
				Export expression: "  check nodes:  " [G0]
				Loop for: Nodes
					If: if(isna(SUTRA Mesh.PBC),0,1)+if(isna(SUTRA Mesh.QIN),0,1)>1
						Export expression: "$Node$, " [G0]
					End if
				End loop
			End line
			Start a new line
			End line
			Start a new line
			End line
		End if
		If: CountInvalidUBCandQUIN!=0
			Start a new line
				Export expression: "Both a specified energy or concentration and a source of energy or solute" [G0]
			End line
			Start a new line
				Export expression: "are defined for "+CountInvalidUBCandQUIN+" nodes.  Check for overlap in layers" [G0]
			End line
			Start a new line
				Export expression: "'Specified Concentration/Temperature' and 'Sources of Solute/Energy'." [G0]
			End line
			Start a new line
			End line
			Start a new line
				Export expression: "  check nodes:  " [G0]
				Loop for: Nodes
					Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
					If: if(isna(SUTRA Mesh.UBC),0,1)+if(isna(SUTRA Mesh.QUIN),0,1)>1
						Export expression: "$Node$, " [G0]
					End if
				End loop
			End line
			Start a new line
			End line
			Start a new line
			End line
		End if
		If: CountMissingSources!=0
			Start a new line
				Export expression: "In layer 'Sources of Fluid' no concentration or temperature is defined for" [G0]
			End line
			Start a new line
				Export expression: "at least one object ("+CountMissingSources+" nodes).  All sources must have a concentration" [G0]
			End line
			Start a new line
				Export expression: "or temperature." [G0]
			End line
			Start a new line
			End line
			Start a new line
				Export expression: "  check for objects affecting nodes:  " [G0]
				Loop for: Nodes
					Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
					If: ((SUTRA Mesh.QIN) & isna(SUTRA Mesh.UIN))
						Export expression: "$Node$, " [G0]
					End if
				End loop
			End line
			Start a new line
			End line
			Start a new line
			End line
		End if
		If: CountMissingSources2!=0
			Start a new line
				Export expression: "In layer 'Specified Head' or 'Specified Pressure' no concentration or" [G0]
			End line
			Start a new line
				Export expression: " temperature is defined for at least one object ("+CountMissingSources2+" nodes).  All sources" [G0]
			End line
			Start a new line
				Export expression: "must have a concentration or temperature." [G0]
			End line
			Start a new line
			End line
			Start a new line
				Export expression: "  check for objects affecting nodes:  " [G0]
				Loop for: Nodes
					Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
					If: (IsNumber(SUTRA Mesh.PBC) & isna(SUTRA Mesh.pUBC))
						Export expression: "$Node$, " [G0]
					End if
				End loop
			End line
			Start a new line
			End line
			Start a new line
			End line
		End if
		If: CountInvalidSources!=0
			Start a new line
				Export expression: "In layer 'Sources of Fluid' both specific AND total sources are defined" [G0]
			End line
			Start a new line
				Export expression: "for at least one object ("+CountInvalidSources+" nodes).  Only one type of source at a time can" [G0]
			End line
			Start a new line
				Export expression: "be used by SUTRA." [G0]
			End line
			Start a new line
			End line
			Start a new line
				Export expression: "  check for objects affecting nodes:  " [G0]
				Loop for: Nodes
					Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
					If: if(isna(Sources of Fluid.specific_source),0,1) + if(isna(Sources of Fluid.total_source),0,1)>1
						Export expression: "$Node$, " [G0]
					End if
				End loop
			End line
			Start a new line
			End line
			Start a new line
			End line
		End if
		If: CountInvalidWellSources!=0
			If: CountInvalidWellSources=1
				Start a new line
					Export expression: "In layer 'Sources of Fluid' a well (point object) has been set with a" [G0]
				End line
				Start a new line
					Export expression: "value for 'specific_source'. This is not a valid type of source for wells." [G0]
				End line
			Else
				Start a new line
					Export expression: "In layer 'Sources of Fluid' "+CountInvalidWellSources+" wells (point objects) have been set with a value for 'specific_source'. " [G0]
				End line
				Start a new line
					Export expression: "This is not a valid type of source for wells." [G0]
				End line
			End if
			Start a new line
			End line
			Start a new line
				Export expression: "  check nodes:  " [G0]
				Loop for: Nodes
					Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
					If: (Sources of Fluid.specific_source & (NodeAboveCntr(Sources of Fluid)=1))
						Export expression: " $Node$," [G0]
					End if
				End loop
			End line
			Start a new line
			End line
			Start a new line
			End line
		End if
		If: InValidOutput=7
			Start a new line
				Export expression: "One or more elements have angles greater than 180 degrees. SUTRA will not be able to run. You can locate the problem elements with the 'Edit|Select Acute Elements' menu item." [G0]
			End line
			Start a new line
			End line
		End if
		If: LayerName()!="SUTRA Mesh"
			Start a new line
				Export expression: "Mesh layer name is '"+LayerName()+"' and not 'SUTRA Mesh'." [G0]
			End line
			Start a new line
			End line
		End if
		# Start a new line
		# 	Export expression: "Error Code: "+InValidOutput
		# End line
	End file
	If: !InvalidSourcesCount
		Evaluate expression: Sutra_Delete_File("InvalidSourcesLocations.txt")
	End if
End if
If: SutraDimensions=3
	Set Variable: ContinueSimulation:= Sutra_ProgressBarSetMessage("Freeing Virtual Mesh")
	Set Variable: freemesh:= Sutra_FreeVMesh()
	If: !freemesh
		Alert: "Error while freeing virtual mesh"
	End if
	Set Variable: ok:= ok&freemesh
End if
Set Variable: ContinueSimulation:= Sutra_ProgressBarSetMessage("Combining Data Sets 1-7 and 8-22 and Exporting log file")
Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
Redirect output to: @edRoot@.log
	If: ok&ContinueSimulation
		Set Variable: ok:= SUTRA_Join_Files("@edRoot@.inp1", "@edRoot@.inp3", "@edRoot@.inp")
		If: !ok
			Alert: "Error while joining files"
		End if
	End if
	If: ok&ContinueSimulation
		Set Variable: ok:= SUTRA_Join_Files("@edRoot@.inp", "@edRoot@.inp4", "@edRoot@.inp")
		If: !ok
			Alert: "Error while joining files"
		End if
	End if
	If: ok&ContinueSimulation
		Set Variable: ok:= SUTRA_Join_Files("@edRoot@.inp", "@edRoot@.inpe", "@edRoot@.inp")
		If: !ok
			Alert: "Error while joining files"
		End if
	End if
	If: ok&ContinueSimulation&(ObservationCount>0)
		Set Variable: ok:= SUTRA_Join_Files("@edRoot@.inp", "@edRoot@.inp8D", "@edRoot@.inp")
		If: !ok
			Alert: "Error while joining files"
		End if
	End if
	If: ok&ContinueSimulation
		Set Variable: ok:= SUTRA_Join_Files("@edRoot@.inp", "@edRoot@.inp9", "@edRoot@.inp")
		If: !ok
			Alert: "Error while joining files"
		End if
	End if
	If: ok&ContinueSimulation
		Set Variable: ok:= SUTRA_Join_Files("@edRoot@.inp", "@edRoot@.inp14B", "@edRoot@.inp")
		If: !ok
			Alert: "Error while joining files"
		End if
	End if
	If: ok&ContinueSimulation
		Set Variable: ok:= SUTRA_Join_Files("@edRoot@.inp", "@edRoot@.inp15A", "@edRoot@.inp")
		If: !ok
			Alert: "Error while joining files"
		End if
	End if
	If: ok&ContinueSimulation
		Set Variable: ok:= SUTRA_Join_Files("@edRoot@.inp", "@edRoot@.inp15B", "@edRoot@.inp")
		If: !ok
			Alert: "Error while joining files"
		End if
	End if
	If: ok&ContinueSimulation
		Set Variable: ok:= SUTRA_Join_Files("@edRoot@.inp", "@edRoot@.inp17", "@edRoot@.inp")
		If: !ok
			Alert: "Error while joining files"
		End if
	End if
	If: ok&ContinueSimulation
		Set Variable: ok:= SUTRA_Join_Files("@edRoot@.inp", "@edRoot@.inp18", "@edRoot@.inp")
		If: !ok
			Alert: "Error while joining files"
		End if
	End if
	If: ok&ContinueSimulation
		Set Variable: ok:= SUTRA_Join_Files("@edRoot@.inp", "@edRoot@.inp19", "@edRoot@.inp")
		If: !ok
			Alert: "Error while joining files"
		End if
	End if
	If: ok&ContinueSimulation
		Set Variable: ok:= SUTRA_Join_Files("@edRoot@.inp", "@edRoot@.inp20", "@edRoot@.inp")
		If: !ok
			Alert: "Error while joining files"
		End if
	End if
	If: ok&ContinueSimulation
		Set Variable: ok:= SUTRA_Join_Files("@edRoot@.inp", "@edRoot@.inp22", "@edRoot@.inp")
		If: !ok
			Alert: "Error while joining files"
		End if
	End if
	If: ok&ContinueSimulation
		Start a new line
			Export expression: "First file exported @edRoot@.inp" [G0]
		End line
	End if
	If: ok&ContinueSimulation
		Set Variable: ok:= SUTRA_Join_Files("@edRoot@.ics", "@edRoot@.ics2", "@edRoot@.ics")
		If: !ok
			Alert: "Error while joining files"
		End if
	End if
	If: ok&ContinueSimulation
		Set Variable: ok:= SUTRA_Join_Files("@edRoot@.ics", "@edRoot@.ics3", "@edRoot@.ics")
		If: !ok
			Alert: "Error while joining files"
		End if
		Set Variable: ContinueSimulation:= Sutra_ProgressBarAdvance()
	End if
	If: ok&ContinueSimulation
		Start a new line
			Export expression: "Second file exported @edRoot@.ics" [G0]
		End line
	End if
	Start a new line
		Export expression: "Third file exported SUTRA.FIL" [G0]
	End line
	Start a new line
		Export expression: "Fourth file exported RUNSUTRA.BAT" [G0]
	End line
	Start a new line
		Export expression: "Created Log file @edRoot@.log" [G0]
	End line
End file
If: @rgRunSutra@&ContinueSimulation&ok
	Execute external code: "RUNSUTRA.BAT"
	# If: SUTRA_Run()
	# End if
End if
If: ok&ContinueSimulation
	If: !@rgRunSutra@&Calibrate
		Redirect output to: KillSUTRA.BAT
			Start a new line
				Export expression: GetMyDirectory() [G0]
				Export expression: "WaitForMe.exe" [G0]
			End line
		End file
		Execute external code: "KillSUTRA.BAT"
		# If: SUTRA_Run()
		# End if
	End if
End if
Evaluate expression: SUTRA_RF_Save_Files()
Evaluate expression: Sutra_ProgressBarFree()

